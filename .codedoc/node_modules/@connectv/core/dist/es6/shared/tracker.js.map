{"version":3,"file":"tracker.js","sourceRoot":"","sources":["../../../src/shared/tracker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAKpC;;;;;;GAMG;AACH,MAAM,OAAO,OAAO;IAGlB;;;;;;;;OAQG;IACO,KAAK,CAAC,GAAiB;QAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;SAChC;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;;;;;OAQG;IACO,OAAO,CAAC,GAAiB;QACjC,IAAI,IAAI,CAAC,IAAI;YAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,IAAc,QAAQ,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAEzD;;;;;;;;OAQG;IACI,KAAK;QACV,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;SACvB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { Subscription } from 'rxjs';\n\nimport { Clearable } from './clearable';\n\n\n/**\n *\n * A parent class for sub-classes who would want to track\n * some [`Subscription`s](https://rxjs-dev.firebaseapp.com/guide/subscription)\n * and clear them later.\n *\n */\nexport class Tracker implements Clearable {\n  _sub: Subscription | undefined;\n\n  /**\n   *\n   * Tracks given subscription, to clear it up later when\n   * `.clear()` is called.\n   *\n   * @param sub\n   * @returns the given subscription (for convenience).\n   *\n   */\n  protected track(sub: Subscription): Subscription {\n    if (!this._sub) {\n      this._sub = new Subscription();\n    }\n\n    this._sub.add(sub);\n    return sub;\n  }\n\n  /**\n   *\n   * Untracks given subscription, removing it from subscriptions\n   * it will clear up when `.clear()` is called. This is useful when you\n   * clear up some subscriptions yourself before clearing the tracker object.\n   *\n   * @param sub\n   *\n   */\n  protected untrack(sub: Subscription): this {\n    if (this._sub) this._sub.remove(sub);\n    return this;\n  }\n\n  /**\n   *\n   * @returns `true` if this tracker object was ever tracking anything.\n   * @returns `true` even after you `.untrack()` everything.\n   * @returns `false` after invoking `.clear()`.\n   *\n   */\n  protected get tracking(): boolean { return !!this._sub; }\n\n  /**\n   *\n   * Clears out all tracked subscriptions by unsibscribing them.\n   * Also clears out all references to tracked subscriptions.\n   *\n   * @warning most tracker objects will become useless after calling `.clear()` on them,\n   * so do not call this prematurely!\n   *\n   */\n  public clear(): this {\n    if (this._sub) {\n      this._sub.unsubscribe();\n      this._sub = undefined;\n    }\n\n    return this;\n  }\n}\n"]}