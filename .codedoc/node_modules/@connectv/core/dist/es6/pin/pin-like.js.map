{"version":3,"file":"pin-like.js","sourceRoot":"","sources":["../../../src/pin/pin-like.ts"],"names":[],"mappings":"AAuHA;;;;;;GAMG;AACH,MAAM,UAAU,SAAS,CAAC,QAAa;IACrC,OAAO,QAAQ,KAAK,SAAS,IAAI,CAAC,OAAO,QAAQ,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,QAAQ,CAAC,EAAE,IAAI,UAAU,CAAC;WACpG,YAAY,IAAI,QAAQ;WACxB,CAAC,OAAO,QAAQ,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { Observable, PartialObserver, Subscription } from 'rxjs';\n\nimport { Emission } from '../shared/emission';\nimport { Clearable } from '../shared/clearable';\n\n\n/**\n *\n * Denotes objects behaving like a [pin](https://connective.dev/docs/pin)\n *\n */\nexport interface PinLike extends Clearable {\n  /**\n   *\n   * Connects given pins to this pin-like. Typically, when a `PartialFlow` is\n   * among given pins, all of its exit pins are connected to this pin-like\n   * (read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection)).\n   *\n   * @param pins\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its entry pins will be added to the group.\n   *\n   * @note these are typical behaviours of `PinLike`s, and the specific behavior of each might be different.\n   *\n   */\n  from(...pins: PinLike[]): PinLike;\n\n  /**\n   *\n   * Connects this pin-like to given pins. Typically, when a `PartialFlow` is\n   * among given pins, this pin-like will be connected to all of its entry pins\n   * (read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection)).\n   *\n   * @param pins\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its exit pins added to the group.\n   *\n   * @note these are typical behaviours of `PinLike`s, and the specific behavior of each might be different.\n   *\n   */\n  to(...pins: PinLike[]): PinLike;\n\n  /**\n   *\n   * Connects given pins to this pin-like serially.\n   * - For [groups](https://connective.dev/docs/group), this means:\n   *   - For single pins among given pins, they will be connected to pins of the group serially,\n   *     i.e. first to the first, second to the second, etc.\n   *   - For `PartialFlow`s among given pins, their exit pins will be connected serially to pins of the group.\n   * - For [single pins](https://connective.dev/docs/pin), this means:\n   *   - For single pins among given pins, they will simply be connected to this pin-like\n   *   - For `PartialFlow`s among given pins, the first of their exit pins will be connected to this pin-like.\n   *\n   * You can read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection).\n   *\n   * @param pins\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its entry pins will be added to the group.\n   *\n   * @note these are typical behaviours of `PinLike`s, and the specific behavior of each might be different.\n   *\n   */\n  serialFrom(...pins: PinLike[]): PinLike;\n\n  /**\n   *\n   * Connects this pin-like to given pins serially.\n   * - For [groups](https://connective.dev/docs/group), this means:\n   *   - For single pins among given pins, pins of this group will be conencted to them serially,\n   *     i.e. first to the first, second to the second, etc.\n   *   - For `PartialFlow`s among given pins, pins of the group will be connected to their entry pins serially.\n   * - For [single pins](https://connective.dev/docs/pin), this means:\n   *   - For single pins among given pins, this pin-like will simply be connected to them.\n   *   - For `PartialFlow`s among given pins, this pin will be connected to their first entry pin.\n   *\n   * You can read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection).\n   *\n   * @param pins\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its exit pins added to the group.\n   *\n   * @note these are typical behaviours of `PinLike`s, and the specific behavior of each might be different.\n   *\n   */\n  serialTo(...pins: PinLike[]): PinLike;\n\n  /**\n   *\n   * The underlying [`Observable`](https://rxjs-dev.firebaseapp.com/guide/observable) of the pin.\n   *\n   * @throws an error if this pin-like does not have an underlying observable (for example, when it is a\n   * [group](https://connective.dev/docs/group)).\n   *\n   */\n  observable: Observable<Emission>;\n\n  subscribe(observer?: PartialObserver<any>): Subscription;\n    /**\n   *\n   * Subscribes given function or partial observer to the observable of this pin.\n   * The subscriber will recieve the emitted values and not the emission object itself,\n   * so if you need to access the emission (for example, to access its context),\n   * use `.observable.subscribe()` instead.\n   *\n   * @param observerOrNext either an [observer object](https://github.com/ReactiveX/rxjs/blob/master/doc/observer.md),\n   * or a callback handling incoming values.\n   * @param error a callback handling incoming errors.\n   * @param complete a callback that will be invoked when the underlying observable sequence completes, for example\n   * when the sources are all cleared out.\n   * @returns the subscription object. The pin itself will track this subscription and clear it out when\n   * its `.clear()` is invoked. If you wish to unsubscribe the subscription earlier than the time you clear\n   * the pin out, then hold a reference to it and also remove it from subscriptions tracked by the pin\n   * using `.untrack()`.\n   *\n   */\n  subscribe(next?: (value: any) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n}\n\n\n/**\n *\n * Checks if a given object satisfies the `PinLike` interface\n *\n * @param whatever\n *\n */\nexport function isPinLike(whatever: any): whatever is PinLike {\n  return whatever !== undefined && (typeof whatever.from == 'function') && (typeof whatever.to == 'function')\n      && 'observable' in whatever\n      && (typeof whatever.subscribe == 'function');\n}\n"]}