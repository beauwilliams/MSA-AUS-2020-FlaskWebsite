{"version":3,"file":"pin-map.js","sourceRoot":"","sources":["../../../src/pin/pin-map.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAgB,MAAM,MAAM,CAAC;AAE7C,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAG5C,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAO5B;;;;;;GAMG;AACH,MAAM,OAAO,MAAO,SAAQ,OAAO;IAIjC;;;;OAIG;IACH,YACW,UAAyB,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE;QAEjD,KAAK,EAAE,CAAC;QAFC,YAAO,GAAP,OAAO,CAAiC;QAT3C,UAAK,GAA+B,EAAE,CAAC;IAY/C,CAAC;IAED;;;;;;;OAOG;IACI,GAAG,CAAC,KAAa;QACtB,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACzB,IAAI,IAAI,CAAC,QAAQ;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YACrD,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;;;OAOG;IACI,YAAY,CAAC,KAAa;QAC/B,OAAO,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,IAAW,IAAI;QACb,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,IAAW,OAAO;QAChB,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;;;OASG;IACI,SAAS,CAAC,UAA4B;QAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ;YAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAqB,CAAC;QAEnD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;OAKG;IACI,KAAK;QACV,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;SAC3B;QAED,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACF","sourcesContent":["import { Subject, Subscription } from 'rxjs';\n\nimport { Tracker } from '../shared/tracker';\n\nimport { PinLike } from './pin-like';\nimport { Pin } from './pin';\n\n\nexport type PinMapFactory = (label: string) => PinLike;\nexport type PinMapSusbcriber = (label: string, pin: PinLike) => void;\n\n\n/**\n *\n * Represents a map of labelled pins. The labelled pins are created\n * first time they are requested, allowing for possibly huge\n * maps without high memory cost.\n *\n */\nexport class PinMap extends Tracker {\n  private _pins: {[label: string]: PinLike} = {};\n  private _subject: Subject<[string, PinLike]> | undefined;\n\n  /**\n   *\n   * @param factory will be used to create each new pin.\n   *\n   */\n  constructor(\n    readonly factory: PinMapFactory = () => new Pin()\n  ) {\n    super();\n  }\n\n  /**\n   *\n   * Fetches the pin with the given label, and create it if not\n   * created already.\n   *\n   * @param label\n   *\n   */\n  public get(label: string): PinLike {\n    if (!(label in this._pins)) {\n      let _pin = this.factory(label);\n      this._pins[label] = _pin;\n      if (this._subject) this._subject.next([label, _pin]);\n      return _pin;\n    }\n\n    return this._pins[label];\n  }\n\n  /**\n   *\n   * Checks if a pin with given label is created, without\n   * creating the pin.\n   *\n   * @param label\n   *\n   */\n  public instantiated(label: string): boolean {\n    return label in this._pins;\n  }\n\n  /**\n   *\n   * @returns an array of all created pins.\n   *\n   */\n  public get pins(): PinLike[] {\n    return Object.values(this._pins);\n  }\n\n  /**\n   *\n   * @returns an entry list (pairs of `[string, Pin]`) of created pins.\n   *\n   */\n  public get entries(): [string, PinLike][] {\n    return Object.entries(this._pins);\n  }\n\n  /**\n   *\n   * Subscribes to the event of creation of a new pin. The subscriber function\n   * will also be invoked on all of the already created pairs.\n   *\n   * @param subscriber\n   * @returns a [`Subscription`](https://rxjs-dev.firebaseapp.com/guide/subscription) object\n   * that you can later unsubscribe from using `.unsubscribe()`\n   *\n   */\n  public subscribe(subscriber: PinMapSusbcriber): Subscription {\n    if (!this._subject)\n      this._subject = new Subject<[string, PinLike]>();\n\n    this.entries.forEach(entry => subscriber(...entry));\n    return this.track(this._subject.subscribe(entry => subscriber(...entry)));\n  }\n\n  /**\n   *\n   * Clears all the created pins and remove references to them,\n   * also will remove all subscriptions.\n   *\n   */\n  public clear(): this {\n    this.pins.forEach(pin => pin.clear());\n    this._pins = {};\n\n    if (this._subject) {\n      this._subject.complete();\n      this._subject = undefined;\n    }\n\n    return super.clear();\n  }\n}\n"]}