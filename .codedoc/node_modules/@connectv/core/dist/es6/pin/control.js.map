{"version":3,"file":"control.js","sourceRoot":"","sources":["../../../src/pin/control.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,EAAE,EAAc,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAExD,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAGnC,MAAM,MAAM,GAAG,EAAE,CAAC;AAElB;;;;GAIG;AACH,MAAM,OAAO,OAAQ,SAAQ,GAAG;IAC9B,YAAqB,MAAW,MAAM;QAAI,KAAK,EAAE,CAAC;QAA7B,QAAG,GAAH,GAAG,CAAc;IAAa,CAAC;IAEpD;;;;;;;;;;;;;;OAcG;IACO,OAAO,CAAC,OAAkB;QAClC,IAAI,IAAI,CAAC,GAAG,YAAY,MAAM,EAAE;YAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YAChC,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;gBAAE,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YAChD,OAAO,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;iBAChD,IAAI,CAAC,GAAG,CACL,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,CACnD,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBACrB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;gBACxC,OAAO,IAAI,CAAC;YACd,CAAC,EACyB,EAAE,CAAC,CAAC,CACnC,CAAC,CAAC;SACZ;aACI,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACvD;YACH,IAAI,OAAO,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YACzD,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM;gBACrB,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;gBACvE,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACtE;QAAA,CAAC;IACJ,CAAC;CACF;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,OAAO,CAAC,GAAS,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAG/D,eAAe,OAAO,CAAC","sourcesContent":["import { zip, of, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport emission, { Emission } from '../shared/emission';\n\nimport { Pin } from './pin';\nimport { PinLike } from './pin-like';\nimport { PinMap } from './pin-map';\n\n\nconst _UNSET = {};\n\n/**\n *\n * Represents [control](https://connective.dev/docs/control) pins.\n *\n */\nexport class Control extends Pin {\n  constructor(readonly val: any = _UNSET) { super(); }\n\n  /**\n   *\n   * Resolves underlying observable, by\n   * [zipping](https://rxjs-dev.firebaseapp.com/api/index/function/zip)\n   * corresponding observables of inbound pins.\n   *\n   * If a `PinMap` is passed to the constructor, it will instead\n   * resolve to zip of all of the instantiated pins of that `PinMap`.\n   *\n   * If a value is passed to the constructor, and there are no inbound\n   * pins, it will resolve to `of(<passed value>)`.\n   *\n   * @param inbound\n   *\n   */\n  protected resolve(inbound: PinLike[]): Observable<Emission> {\n    if (this.val instanceof PinMap) {\n      let _entries = this.val.entries;\n      if (_entries.length == 0) return of(emission());\n      return zip(..._entries.map(entry => entry[1].observable))\n              .pipe(map(\n                  emissions => Emission.from(emissions, _entries.reduce(\n                    (_map, entry, index) => {\n                      _map[entry[0]] = emissions[index].value;\n                      return _map;\n                    }\n                    , <{[label: string]: any}>{}))\n              ));\n    }\n    else if (inbound.length == 0) return of(emission(this.val));\n    else {\n      let _zipped = zip(...inbound.map(pin => pin.observable));\n      if (this.val !== _UNSET)\n        return _zipped.pipe(map(emissions => Emission.from(emissions, this.val)));\n      else return _zipped.pipe(map(emissions => Emission.from(emissions)));\n    };\n  }\n}\n\n/**\n *\n * Creates a [control](https://connective.dev/docs/control) pin.\n *\n * @param val if provided, the control pin will emit the given value when\n * all pins connected to it emit, otherwise it will emit the array concatenation\n * of received values. If no pins are connected to it, then it will emit the value\n * to any subscriber (or to any pin that this pin is connected to, when a subscription\n * is called somwhere down the chain).\n *\n * If a `PinMap` is given as the value, then after resolution, the control will be\n * connected to all \"realised\" pins of the given pinmap.\n *\n */\nexport function control(val?: any) { return new Control(val); }\n\n\nexport default control;\n"]}