import { ResolveCallback, ErrorCallback, ContextType } from '../shared/types';
import { Pipe } from './pipe';
export declare type FilterFuncSync = (value: any) => boolean;
export declare type FilterFuncAsync = (value: any, callback: ResolveCallback<boolean>, error: ErrorCallback, context: ContextType) => void;
export declare type FilterFunc = FilterFuncSync | FilterFuncAsync;
/**
 *
 * Represents [filter](https://connective.dev/docs/filter) pins.
 *
 */
export declare class Filter extends Pipe {
    /**
     *
     * The predicate of this filter pin.
     *
     */
    readonly filter: FilterFunc;
    constructor(_func: FilterFunc);
}
/**
 *
 * Creates a [filter](https://connective.dev/docs/filter) pin using given predicate.
 * A filter pin will pass some values through and not others based on given predicate.
 * [Checkout the docs](https://connective.dev/docs/filter) for examples and further information.
 *
 * @param filter
 *
 */
export declare function filter(filter: FilterFunc): Filter;
/**
 *
 * Creates a [filter](https://connective.dev/docs/filter) that never allows any value through.
 *
 */
export declare function block(): Filter;
export default filter;
