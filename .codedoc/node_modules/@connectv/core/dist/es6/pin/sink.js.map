{"version":3,"file":"sink.js","sourceRoot":"","sources":["../../../src/pin/sink.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAMrC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAM9B;;;;GAIG;AACH,MAAM,OAAO,IAAK,SAAQ,IAAI;IAG5B,YAAqB,OAAiB,GAAG,EAAE,GAAE,CAAC;QAC5C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAD1D,SAAI,GAAJ,IAAI,CAAqB;QAFtC,WAAM,GAAG,KAAK,CAAC;IAIvB,CAAC;IAED;;;;OAIG;IACH,IAAW,KAAK,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAE1C;;;;;;OAMG;IACH,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;SAC9B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAGD;;;;;;;;;GASG;AACH,MAAM,UAAU,IAAI,CAAC,IAAe,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAGhE,eAAe,IAAI,CAAC","sourcesContent":["import { tap } from 'rxjs/operators';\n\nimport { Emission } from '../shared/emission';\nimport { Bindable } from '../shared/bindable';\nimport { ContextType } from '../shared/types';\n\nimport { Pipe } from './pipe';\n\n\nexport type SinkFunc = (value: any, context: ContextType) => void;\n\n\n/**\n *\n * Represents [sink](https://connective.dev/docs/sink) pins.\n *\n */\nexport class Sink extends Pipe implements Bindable {\n  private _bound = false;\n\n  constructor(readonly func: SinkFunc = () => {}) {\n    super([tap((emission: Emission) => func(emission.value, emission.context))]);\n  }\n\n  /**\n   *\n   * @returns `true` if this sink is already bound.\n   *\n   */\n  public get bound() { return this._bound; }\n\n  /**\n   *\n   * Binds this sink if it is not already bound. Binding\n   * Basically ensures that the pin is subscribed to and that its side-effect\n   * will be enacted.\n   *\n   */\n  bind(): this {\n    if (!this._bound) {\n      this._bound = true;\n      this.track(this.subscribe());\n    }\n\n    return this;\n  }\n}\n\n\n/**\n *\n * Creates a [sink](https://connective.dev/docs/sink) pin.\n * Sink pins can be used to do something with the data of a flow, outside the scope of the flow\n * (like logging them, etc).\n * [Checkout the docs](https://connective.dev/docs/sink) for examples and further information.\n *\n * @param func\n *\n */\nexport function sink(func?: SinkFunc) { return new Sink(func); }\n\n\nexport default sink;\n"]}