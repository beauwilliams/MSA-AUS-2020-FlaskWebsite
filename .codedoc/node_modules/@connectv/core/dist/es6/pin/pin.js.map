{"version":3,"file":"pin.js","sourceRoot":"","sources":["../../../src/pin/pin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,KAAK,EAAE,MAAM,MAAM,CAAC;AAKzC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAG5C;;;;;;;GAOG;AACH,MAAM,OAAO,GAAI,SAAQ,WAAW;IAClC;;;;;;;OAOG;IACO,QAAQ,CAAC,UAA4C;QAC7D,OAAO,UAAU,KAAK,SAAS,CAAC;IAClC,CAAC;IAED;;;;;;;;OAQG;IACO,aAAa,CAAC,CAAY,EAAE,UAA4C;QAChF,OAAO,UAAU,KAAK,SAAS,CAAC;IAClC,CAAC;IAED;;;;;;;;OAQG;IACO,OAAO,CAAC,OAAkB;QAClC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA,CAAC;YAC3B,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA,CAAC;YACtB,KAAK,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACjD,CAAC;CACF;AAGD;;;;;GAKG;AACH,MAAM,UAAU,GAAG,KAAK,OAAO,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;AAG3C,eAAe,GAAG,CAAC","sourcesContent":["import { Observable, merge } from 'rxjs';\n\nimport { Emission } from '../shared/emission';\n\nimport { PinLike } from './pin-like';\nimport { Connectible } from './connectible';\n\n\n/**\n *\n * Represents the basic [pin](https://connective.dev/docs/pin) object.\n * This pin type gets locked when its observable is realized,\n * will resolve only when its observable is not realized and its resolution\n * will be merged observable of all of the incoming pins' observables.\n *\n */\nexport class Pin extends Connectible {\n  /**\n   *\n   * Determines if this pin is locked, based on whether or not its underlying\n   * observable has been resolved or not.\n   *\n   * @param observable\n   *\n   */\n  protected isLocked(observable: Observable<Emission> | undefined) {\n    return observable !== undefined;\n  }\n\n  /**\n   *\n   * Determines whether this pin should resolve its underlying observable,\n   * based on whether or not its underlying observable has been resolved or not.\n   *\n   * @param _\n   * @param observable\n   *\n   */\n  protected shouldResolve(_: PinLike[], observable: Observable<Emission> | undefined) {\n    return observable === undefined;\n  }\n\n  /**\n   *\n   * Resolves its underlying observable, by\n   * [mergeing](https://rxjs-dev.firebaseapp.com/api/index/function/merge)\n   * corresponding observables of inbound pins.\n   *\n   * @param inbound\n   *\n   */\n  protected resolve(inbound: PinLike[]): Observable<Emission> {\n    return (inbound.length == 1)?\n      inbound[0].observable:\n      merge(...inbound.map(pin => pin.observable));\n  }\n}\n\n\n/**\n *\n * Creates a typical [pin](https://connective.dev/docs/pin) object.\n * [Checkout the docs](https://connective.dev/docs/pin) for examples and further information.\n *\n */\nexport function pin() { return new Pin(); }\n\n\nexport default pin;\n"]}