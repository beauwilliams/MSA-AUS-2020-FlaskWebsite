{"version":3,"file":"source.js","sourceRoot":"","sources":["../../../src/pin/source.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAc,MAAM,MAAM,CAAC;AAG3C,OAAO,QAAsB,MAAM,oBAAoB,CAAC;AAGxD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAG5C;;;;GAIG;AACH,MAAM,OAAO,MAAO,SAAQ,WAAW;IACrC,YAAoB,WAAW,IAAI,OAAO,EAAY;QACpD,KAAK,EAAE,CAAC;QADU,aAAQ,GAAR,QAAQ,CAA0B;IAEtD,CAAC;IAED;;;;;;;;OAQG;IACI,IAAI,CAAC,KAAW,EAAE,OAAqB;QAC5C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACI,IAAI,CAAC,QAAkB;QAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACH,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAO,CAAC;QAEnC,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACO,WAAW;QACnB,OAAO,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;IAC9C,CAAC;IAED;;;;;;;OAOG;IACO,OAAO,CAAC,OAAkB;QAClC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACO,QAAQ,KAAK,OAAO,KAAK,CAAC,CAAC,CAAC;IAEtC;;;;;;;OAOG;IACO,aAAa,CAAC,OAAkB,EAAE,UAAuC;QACjF,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3C,CAAC;CACF;AAGD;;;;;;GAMG;AACH,MAAM,UAAU,MAAM,CAAC,GAAuB,IAAI,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAG3E,eAAe,MAAM,CAAC","sourcesContent":["import { Subject, Observable } from 'rxjs';\n\nimport { ContextType } from '../shared/types';\nimport emission, { Emission } from '../shared/emission';\n\nimport { PinLike } from './pin-like';\nimport { Connectible } from './connectible';\n\n\n/**\n *\n * Represents [source](https://connective.dev/docs/source) pins.\n *\n */\nexport class Source extends Connectible {\n  constructor(private _subject = new Subject<Emission>()){\n    super();\n  }\n\n  /**\n   *\n   * This source will send given value, perhaps with given context.\n   * Will create a new [emission](https://connective.dev/docs/emission) object.\n   *\n   * @param value the value to send\n   * @param context the emission context\n   *\n   */\n  public send(value?: any, context?: ContextType) {\n    this.emit(emission(value, context));\n  }\n\n  /**\n   *\n   * Will emit the given emission object.\n   *\n   * @param emission\n   *\n   */\n  public emit(emission: Emission) {\n    this._subject.next(emission);\n  }\n\n  /**\n   *\n   * @note this sends a complete notification through-out the flow.\n   * Pins that are merely reliant on this source will also be unusable\n   * afterwards.\n   *\n   */\n  clear() {\n    this._subject.complete();\n    this._subject = new Subject<any>();\n\n    return super.clear();\n  }\n\n  /**\n   *\n   * Determines if any pin is connected to this pin.\n   *\n   */\n  protected isConnected() {\n    return this.tracking || super.isConnected();\n  }\n\n  /**\n   *\n   * Resolves the underlying observable of this pin by subscribing the\n   * subject of this pin to all inbound pins.\n   *\n   * @param inbound\n   *\n   */\n  protected resolve(inbound: PinLike[]) {\n    inbound.forEach(pin => {\n      this.track(pin.observable.subscribe(this._subject));\n    });\n\n    inbound.length = 0;\n    return this._subject;\n  }\n\n  /**\n   *\n   * Determines whether this pin is locked. A source is never locked.\n   *\n   */\n  protected isLocked() { return false; }\n\n  /**\n   *\n   * Determines whether should resolve the underlying observable.\n   *\n   * @param inbound\n   * @param observable\n   *\n   */\n  protected shouldResolve(inbound: PinLike[], observable: Observable<any> | undefined) {\n    return inbound.length > 0 || !observable;\n  }\n}\n\n\n/**\n *\n * Creates a [source](https://connective.dev/docs/source) pin.\n * A source pin can be used as the starting point of a reactive flow.\n * [Checkout the docs](https://connective.dev/docs/source) for examples and further information.\n *\n */\nexport function source(sub?: Subject<Emission>) { return new Source(sub); }\n\n\nexport default source;\n"]}