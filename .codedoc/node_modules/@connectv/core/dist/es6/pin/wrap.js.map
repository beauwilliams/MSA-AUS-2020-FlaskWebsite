{"version":3,"file":"wrap.js","sourceRoot":"","sources":["../../../src/pin/wrap.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,QAAsB,MAAM,oBAAoB,CAAC;AAExD,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAEvD,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAGjC;;;;GAIG;AACH,MAAM,OAAQ,SAAQ,OAAO;IAE3B,YAAY,UAA2B;QACrC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,OAAO,CAAC,CAAU;QAChB,MAAM,IAAI,cAAc,EAAE,CAAC;IAC7B,CAAC;CACF;AAGD;;;;;;;;;GASG;AACH,MAAM,UAAU,IAAI,CAAC,UAA2B,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAGrF,eAAe,IAAI,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport emission, { Emission } from '../shared/emission';\n\nimport { PinLockedError } from './errors/locked.error';\nimport { PinLike } from './pin-like';\nimport { BasePin } from './base';\n\n\n/**\n *\n * Represents [wrap](https://connective.dev/docs/wrap) pins.\n *\n */\nclass Wrapper extends BasePin {\n  readonly observable: Observable<Emission>;\n  constructor(observable: Observable<any>) {\n    super();\n    this.observable = observable.pipe(map(v => emission(v)));\n  }\n\n  connect(_: PinLike): this {\n    throw new PinLockedError();\n  }\n}\n\n\n/**\n *\n * Creates a [wrap](https://connective.dev/docs/wrap) pin. A wrap pin\n * wraps a given observable so that it can be connected to other pins. Because\n * its observable is already realized, you cannot connect other pins to a wrap pin.\n * [Checkout the docs](https://connective.dev/docs/wrap) for examples and further information.\n *\n * @param observable\n *\n */\nexport function wrap(observable: Observable<any>) { return new Wrapper(observable); }\n\n\nexport default wrap;\n"]}