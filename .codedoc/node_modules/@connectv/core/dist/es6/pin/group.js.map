{"version":3,"file":"group.js","sourceRoot":"","sources":["../../../src/pin/group.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, PartialObserver, Subscription } from 'rxjs';\n\nimport { isBindable, Bindable } from '../shared/bindable';\nimport { Emission } from '../shared/emission';\nimport { ResolveCallback, ErrorCallback, NotifyCallback } from '../shared/types';\n\nimport { GroupObservableError } from './errors/group-subscription';\n\nimport { PinLike } from './pin-like';\nimport { PartialFlow } from './partial-flow';\n\n\n/**\n *\n * Represents [groups of pins](https://connective.dev/docs/group).\n *\n */\nexport class Group implements PinLike, Bindable {\n  /**\n   *\n   * The array of all pins within the group.\n   *\n   */\n  readonly pins: PinLike[];\n\n  constructor(pins: PinLike[]) {\n    this.pins = pins;\n  }\n\n  /**\n   *\n   * @warning accessing this will result in an error since groups do not have\n   * underlying observables of their own.\n   *\n   */\n  get observable(): Observable<Emission> {\n    throw new GroupObservableError();\n  }\n\n  /**\n   *\n   * Connects all given pins to all pins in this group, so\n   * `group(c, d).from(a, b)` means both `a` and `b` will be connected\n   * to both `c` and `d`.\n   *\n   * If any `PartialFlow` is among given pins, all of the exit pins of the partial flow will be\n   * connected to all of the pins of this group\n   * (read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection)).\n   *\n   * @param pins pins to be connected to pins of this group\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its entry pins will be added to the group.\n   *\n   */\n  from(...pins: PinLike[]): PinLike {\n    pins.forEach(pin => this.pins.forEach(p => p.from(pin)));\n    return traverseFrom(...pins);\n  }\n\n  /**\n   *\n   * Connects all pins of this group to all of the given pins, so\n   * `group(a, b).to(c, d)` means both `a` and `b` will be connected to\n   * both `c` and `d`.\n   *\n   * If any `PartialFlow` is among the given pins, all pins of the group will be connected to all of\n   * its entry pins (read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection)).\n   *\n   * @param pins the pins to connect pins of this group to\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its exit pins added to the group.\n   *\n   */\n  to(...pins: PinLike[]): PinLike {\n    pins.forEach(pin => this.pins.forEach(p => p.to(pin)));\n    return traverseTo(...pins);\n  }\n\n  /**\n   *\n   * Connects given pins serially to pins of this group, i.e. the first to the first,\n   * second to the second, etc. If any `PartialFlow` is among the given pins, then\n   * its exit pins will be connected serially to pins of this group\n   * (read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection)).\n   * If a mixture of `PartialFlow`s and normal pins are given, the normal pins will\n   * be connected to pins of this group serially without counting the partial flows, and the\n   * partial flows will each be connected to pins of this group as described.\n   *\n   * @param pins pins to be connected to pins of this group serially.\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its entry pins will be added to the group.\n   *\n   */\n  serialFrom(...pins: PinLike[]): PinLike {\n    (<PartialFlow[]>pins.filter(pin => pin instanceof PartialFlow)).forEach(flow => {\n      for (let i = 0; i < Math.min(this.pins.length, flow.exits.pins.length); i++)\n        this.pins[i].from(flow.exits.pins[i]);\n    });\n\n    let purePins = pins.filter(p => !(p instanceof PartialFlow));\n    for (let i = 0; i < Math.min(this.pins.length, purePins.length); i++)\n      this.pins[i].from(purePins[i]);\n\n    return traverseFrom(...pins);\n  }\n\n  /**\n   *\n   * Connects pins of this group serially to given pins, i.e. first to the first,\n   * second to the second, etc. If any `PartialFlow` is among the given pins, pins of\n   * this group will be connected serially to its entries\n   * (read more about partial flows [here](https://connective.dev/docs/agent#implicit-connection)).\n   * If a mixture of `PartialFlow`s and normal pins are given, pins of this group will\n   * be connected to the normal pins serially without counting the partial flows, and they\n   * will be connected to the partial flows as described.\n   *\n   * @param pins pins that pins of this group should connect to serially.\n   * @returns a [group](https://connective.dev/docs/group) of the given pins. If any `PartialFlow`\n   * was among the given pins, its exit pins added to the group.\n   *\n   */\n  serialTo(...pins: PinLike[]): PinLike {\n    (<PartialFlow[]>pins.filter(pin => pin instanceof PartialFlow)).forEach(flow => {\n      for (let i = 0; i < Math.min(this.pins.length, flow.entries.pins.length); i++)\n        this.pins[i].to(flow.entries.pins[i]);\n    });\n\n    let purePins = pins.filter(p => !(p instanceof PartialFlow));\n    for (let i = 0; i < Math.min(this.pins.length, purePins.length); i++)\n      this.pins[i].to(purePins[i]);\n\n    return traverseTo(...pins);\n  }\n\n  /**\n   *\n   * Calls `.clear()` on all pins of the group\n   *\n   */\n  clear() {\n    this.pins.forEach(pin => pin.clear());\n    return this;\n  }\n\n  /**\n   *\n   * Calls `.bind()` on all pins of the group\n   *\n   */\n  bind() {\n    this.pins.forEach(pin => {\n      if (isBindable(pin)) pin.bind();\n    });\n\n    return this;\n  }\n\n  subscribe(observer?: PartialObserver<any>): Subscription;\n  subscribe(next?: (value: any) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   *\n   * Subscribes given observer (or callback functions) to all pins of the group.\n   *\n   * @returns a composite subscription holding all of the subscriptions made.\n   *\n   */\n  subscribe(\n    _?: PartialObserver<any> | ResolveCallback<any>,\n    __?: ErrorCallback,\n    ___?: NotifyCallback,\n  ): Subscription {\n    return this.pins.reduce((sub, pin) => {\n      sub.add(pin.subscribe(_ as any, __, ___));\n      return sub;\n    }, new Subscription());\n  }\n}\n\n\n/**\n *\n * Creates a [group of pins](https://connective.dev/docs/group) based on given pins.\n *\n * @param pins\n *\n */\nexport function group(...pins: PinLike[]) { return new Group(pins); }\n\n/**\n *\n * Determines which pins should be considered if in a connection chain\n * we are connecting to the given pins. This is typically a `Group` consisting\n * of given pins, but if any `PartialFlow`s are among them, their exit pins are\n * added to the group instead.\n *\n * @param pins\n *\n */\nexport function traverseTo(...pins: PinLike[]): PinLike {\n  if (pins.length == 1) {\n    let pin = pins[0];\n\n    if (pin instanceof PartialFlow) return pin.exits;\n    else return pin;\n  }\n  else return group(...pins.reduce((all, pin) => {\n    if (pin instanceof PartialFlow) return all.concat(pin.exits.pins);\n    else return all.concat([pin]);\n  }, <PinLike[]>[]));\n}\n\n/**\n *\n * Determines which pins should be considered if in a connection chain\n * we are connecting from the given pins. This is typically a `Group` consisting\n * of given pins, but if any `PartialFlow`s are among them, their entry pins are\n * added to the group instead.\n *\n * @param pins\n *\n */\nexport function traverseFrom(...pins: PinLike[]): PinLike {\n  if (pins.length == 1) {\n    let pin = pins[0];\n\n    if (pin instanceof PartialFlow) return pin.entries;\n    else return pin;\n  }\n  else return group(...pins.reduce((all, pin) => {\n    if (pin instanceof PartialFlow) return all.concat(pin.entries.pins);\n    else return all.concat([pin]);\n  }, <PinLike[]>[]));\n}\n\n\nexport default group;\n"]}