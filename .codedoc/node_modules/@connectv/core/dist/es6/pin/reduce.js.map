{"version":3,"file":"reduce.js","sourceRoot":"","sources":["../../../src/pin/reduce.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { map, mergeMap, share } from 'rxjs/operators';\n\nimport { ResolveCallback, ErrorCallback, ContextType } from '../shared/types';\nimport { Emission } from '../shared/emission';\nimport { EmissionError } from '../shared/errors/emission-error';\n\nimport { Pipe } from './pipe';\n\n\nexport type ReduceFuncSync = (acc: any, cur: any) => any;\nexport type ReduceFuncAsync = (acc: any, cur: any,\n                            callback: ResolveCallback<any>,\n                            error: ErrorCallback,\n                            emissionContext: ContextType,\n                            accContext: ContextType) => void;\nexport type ReduceFunc = ReduceFuncSync | ReduceFuncAsync;\n\n\nconst _Unset = {};\n\n//\n// TODO: switch to concat map for async reducers\n//\n/**\n *\n * Represents [reduce](https://connective.dev/docs/reduce) pins.\n *\n */\nexport class Reduce extends Pipe {\n  private _acc: Emission | undefined = undefined;\n\n  /**\n   *\n   * @param reduce is the reduction function\n   * @param start is the start value\n   *\n   */\n  constructor(readonly reduce: ReduceFunc, readonly start: any = _Unset) {\n    super(\n      (reduce.length <= 2)?\n      ([map((emission: Emission) => {\n        if (!this._acc) {\n          this._acc = this._init(emission, start);\n          if (start === _Unset) return this._acc;\n        }\n\n        this._acc = Emission.from([this._acc, emission],\n            (reduce as ReduceFuncSync)(this._acc.value, emission.value));\n        return this._acc;\n      })]):\n      ([\n        mergeMap(emission =>\n          new Observable<Emission>(subscriber => {\n            if (!this._acc) {\n              this._acc = this._init(emission, start);\n\n              if (start === _Unset) {\n                subscriber.next(this._acc);\n                subscriber.complete();\n                return;\n              }\n            }\n\n            reduce(this._acc.value, emission.value,\n              (res: any) => {\n                this._acc = Emission.from([<Emission>this._acc, emission], res);\n                subscriber.next(this._acc);\n                subscriber.complete();\n              },\n              (error: Error | string) => {\n                subscriber.error(new EmissionError(error, emission));\n              },\n              emission.context, this._acc.context);\n          })\n        ),\n        share()])\n    );\n  }\n\n  private _init(emission: Emission, start: any): Emission {\n    if (start !== _Unset) return emission.fork(start);\n    else return emission;\n  }\n}\n\n\n/**\n *\n * Creates a [reduce](https://connective.dev/docs/reduce) pin.\n * A reduce pin can be used to aggregate values over multiple emissions, with an\n * aggregator function updating the aggregate value based on each incoming emission.\n * [Checkout the docs](https://connective.dev/docs/reduce) for examples and further information.\n *\n * @param reduce the reduction function\n * @param start the start value. If not provided, the value of first incoming emission will be used.\n *\n */\nexport function reduce(reduce: ReduceFunc, start: any = _Unset) { return new Reduce(reduce, start); }\n\n\nexport default reduce;\n"]}