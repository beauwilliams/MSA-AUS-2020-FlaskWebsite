{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../src/pin/filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAGzE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAW9B;;;;GAIG;AACH,MAAM,OAAO,MAAO,SAAQ,IAAI;IAQ9B,YAAY,KAAiB;QAC3B,KAAK,CACH,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA,CAAC;YACpB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;oBACnB,IAAI;wBACF,OAAQ,KAAwB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBAClD;oBAAC,OAAM,KAAK,EAAE;wBACb,MAAM,IAAI,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;qBAC1C;gBACH,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;YACL,CAAC;gBACC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAClB,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;oBAC1B,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAY,EAAE,EAAE;wBACrC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACrB,UAAU,CAAC,QAAQ,EAAE,CAAC;oBACxB,CAAC,EACD,CAAC,KAAqB,EAAE,EAAE;wBACxB,UAAU,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;oBACvD,CAAC,EACD,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACpB,CAAC,CAAC;qBACD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAC7C;gBACD,KAAK,EAAE;aACR,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;CACF;AAGD;;;;;;;;GAQG;AACH,MAAM,UAAU,MAAM,CAAC,MAAkB,IAAI,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAEzE;;;;GAIG;AACH,MAAM,UAAU,KAAK,KAAK,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAG3D,eAAe,MAAM,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { filter as _filter, map, mergeMap, share } from 'rxjs/operators';\n\nimport { ResolveCallback, ErrorCallback, ContextType } from '../shared/types';\nimport { EmissionError } from '../shared/errors/emission-error';\n\nimport { Pipe } from './pipe';\n\n\nexport type FilterFuncSync = (value: any) => boolean;\nexport type FilterFuncAsync = (value: any,\n                            callback: ResolveCallback<boolean>,\n                            error: ErrorCallback,\n                            context: ContextType) => void;\nexport type FilterFunc = FilterFuncSync | FilterFuncAsync;\n\n\n/**\n *\n * Represents [filter](https://connective.dev/docs/filter) pins.\n *\n */\nexport class Filter extends Pipe {\n  /**\n   *\n   * The predicate of this filter pin.\n   *\n   */\n  readonly filter: FilterFunc;\n\n  constructor(_func: FilterFunc) {\n    super(\n      (_func.length <= 1)?\n      ([_filter(emission => {\n        try {\n          return (_func as FilterFuncSync)(emission.value);\n        } catch(error) {\n          throw new EmissionError(error, emission);\n        }\n      })]):\n      ([\n        mergeMap(emission =>\n          new Observable(subscriber => {\n            _func(emission.value, (res: boolean) => {\n              subscriber.next(res);\n              subscriber.complete();\n            },\n            (error: Error | string) => {\n              subscriber.error(new EmissionError(error, emission));\n            },\n            emission.context);\n          })\n          .pipe(_filter(_ => !!_), map(_ => emission))\n        ),\n        share()\n      ])\n    );\n\n    this.filter = _func;\n  }\n}\n\n\n/**\n *\n * Creates a [filter](https://connective.dev/docs/filter) pin using given predicate.\n * A filter pin will pass some values through and not others based on given predicate.\n * [Checkout the docs](https://connective.dev/docs/filter) for examples and further information.\n *\n * @param filter\n *\n */\nexport function filter(filter: FilterFunc) { return new Filter(filter); }\n\n/**\n *\n * Creates a [filter](https://connective.dev/docs/filter) that never allows any value through.\n *\n */\nexport function block() { return new Filter(() => false); }\n\n\nexport default filter;\n"]}