{"version":3,"file":"spread.js","sourceRoot":"","sources":["../../../src/pin/spread.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,EAAE,EAAc,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAI1C,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG9B;;;;GAIG;AACH,MAAM,OAAO,MAAO,SAAQ,IAAI;IAC9B;QACE,KAAK,CAAC;YACJ,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAClB,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA,CAAC;gBACC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;gBAC7E,EAAE,CAAC,QAAQ,CAAC,CACb;SACF,CAAC,CAAA;IACJ,CAAC;CACF;AAGD;;;;;;GAMG;AACH,MAAM,UAAU,MAAM,KAAK,OAAO,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC;AAGjD,eAAe,MAAM,CAAC","sourcesContent":["import { from, of, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { Emission } from '../shared/emission';\n\nimport { Pipe } from './pipe';\n\n\n/**\n *\n * Represents [spread](https://connective.dev/docs/spread) pins.\n *\n */\nexport class Spread extends Pipe {\n  constructor() {\n    super([\n      mergeMap(emission =>\n        (emission.value.map)?\n        <Observable<Emission>>from(emission.value.map((v: any) => emission.fork(v))):\n        of(emission)\n      )\n    ])\n  }\n}\n\n\n/**\n *\n * Creates a [spread](https://connective.dev/docs/spread) pin. A spread pin can be used\n * to spread contents of an array over multiple emissions.\n * [Checkout the docs](https://connective.dev/docs/spread) for examples and further information.\n *\n */\nexport function spread() { return new Spread(); }\n\n\nexport default spread;\n"]}