{"version":3,"file":"map.js","sourceRoot":"","sources":["../../../src/pin/map.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAI9D,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAW9B;;;;GAIG;AACH,MAAM,OAAO,GAAI,SAAQ,IAAI;IAQ3B,YAAY,KAAc;QACxB,KAAK,CACH,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA,CAAC;YACpB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBAChB,IAAI;wBACF,OAAO,QAAQ,CAAC,IAAI,CAAE,KAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;qBAC9D;oBAAC,OAAM,KAAK,EAAE;wBACb,MAAM,IAAI,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;qBAC1C;gBACH,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;YACL,CAAC;gBACC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAClB,IAAI,UAAU,CAAW,UAAU,CAAC,EAAE;oBACpC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAQ,EAAE,EAAE;wBACjC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;wBACpC,UAAU,CAAC,QAAQ,EAAE,CAAC;oBACxB,CAAC,EACD,CAAC,KAAqB,EAAE,EAAE;wBACxB,UAAU,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;oBACvD,CAAC,EACD,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACpB,CAAC,CAAC,CACH;gBACD,KAAK,EAAE;aACR,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;IACnB,CAAC;CACF;AAGD;;;;;;;;GAQG;AACH,MAAM,UAAU,GAAG,CAAC,GAAY,IAAI,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAG1D,eAAe,GAAG,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { map as _map, mergeMap, share } from 'rxjs/operators';\n\nimport { ResolveCallback, ErrorCallback, ContextType } from '../shared/types';\nimport { Emission } from '../shared/emission';\nimport { EmissionError } from '../shared/errors/emission-error';\n\nimport { Pipe } from './pipe';\n\n\nexport type MapFuncSync = (value: any) => any;\nexport type MapFuncAsync = (value: any,\n                            callback: ResolveCallback<any>,\n                            error: ErrorCallback,\n                            context: ContextType) => void;\nexport type MapFunc = MapFuncSync | MapFuncAsync;\n\n\n/**\n *\n * Represents [map](https://connective.dev/docs/map) pins.\n *\n */\nexport class Map extends Pipe {\n  /**\n   *\n   * The transformation of this map pin.\n   *\n   */\n  readonly map: MapFunc;\n\n  constructor(_func: MapFunc) {\n    super(\n      (_func.length <= 1)?\n      ([_map(emission => {\n        try {\n          return emission.fork((_func as MapFuncSync)(emission.value));\n        } catch(error) {\n          throw new EmissionError(error, emission);\n        }\n      })]):\n      ([\n        mergeMap(emission =>\n          new Observable<Emission>(subscriber => {\n            _func(emission.value, (res: any) => {\n              subscriber.next(emission.fork(res));\n              subscriber.complete();\n            },\n            (error: Error | string) => {\n              subscriber.error(new EmissionError(error, emission));\n            },\n            emission.context);\n          })\n        ),\n        share()\n      ])\n    );\n\n    this.map = _func;\n  }\n}\n\n\n/**\n *\n * Creates a [map](https://connective.dev/docs/map) pin using given transformation.\n * A map pin will transform incoming values based on given transformation.\n * [Checkout the docs](https://connective.dev/docs/map) for examples and further information.\n *\n * @param map\n *\n */\nexport function map(map: MapFunc) { return new Map(map); }\n\n\nexport default map;\n"]}