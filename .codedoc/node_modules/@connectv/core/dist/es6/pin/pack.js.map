{"version":3,"file":"pack.js","sourceRoot":"","sources":["../../../src/pin/pack.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAExD,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAGnC;;;;GAIG;AACH,MAAM,OAAO,IAAK,SAAQ,GAAG;IAC3B,YAAqB,MAAe;QAClC,KAAK,EAAE,CAAC;QADW,WAAM,GAAN,MAAM,CAAS;QAGlC,IAAI,MAAM;YACR,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAS,EAAE,GAAY,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;;;;;;;OAWG;IACO,OAAO,CAAC,OAAkB;QAClC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACnC,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;gBAAE,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YAChD,OAAO,aAAa,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;iBAC1D,IAAI,CAAC,GAAG,CACL,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,CACnD,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBACrB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;gBACxC,OAAO,IAAI,CAAC;YACd,CAAC,EACyB,EAAE,CAAC,CAAC,CACnC,CAAC,CAAA;SACX;;YAEC,OAAO,aAAa,CAClB,GAAG,OAAO;iBACT,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;iBAC3B,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;CACF;AAGD;;;;;;;;GAQG;AACH,MAAM,UAAU,IAAI,CAAC,GAAG,KAAyB;IAC/C,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,YAAY,MAAM,CAAC,CAAA,CAAC,CAAA,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,CAAA,IAAI,CAAC,CAAC;IAC9E,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC;QAAE,OAAO,IAAI,IAAI,EAAE,CAAC;IAC3C,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC;QAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAA,CAAC,CAAA,OAAO,CAAC,CAAC,CAAC,CAAA,CAAC,CAAA,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IAClG,OAAO,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;AAC1C,CAAC;AAGD,eAAe,IAAI,CAAC","sourcesContent":["import { combineLatest, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport emission, { Emission } from '../shared/emission';\n\nimport group from './group';\nimport { Pin } from './pin';\nimport { PinLike } from './pin-like';\nimport { PinMap } from './pin-map';\n\n\n/**\n *\n * Represents [pack](https://connective.dev/docs/pack) pins.\n *\n */\nexport class Pack extends Pin {\n  constructor(readonly pinmap?: PinMap) {\n    super();\n\n    if (pinmap)\n      this.track(pinmap.subscribe((_: string, pin: PinLike) => pin.to(this)));\n  }\n\n  /**\n   *\n   * Resolves the underlying observable by\n   * [combining the latest values](https://rxjs-dev.firebaseapp.com/api/index/function/combineLatest)\n   * from corresponding observables of inbound pins.\n   *\n   * If a `PinMap` is passed to the constructor, it will instead resolve\n   * by combining the latest values from instantiated pins of the passed `PinMap`.\n   *\n   * @param inbound\n   *\n   */\n  protected resolve(inbound: PinLike[]) {\n    if (this.pinmap) {\n      let _entries = this.pinmap.entries;\n      if (_entries.length == 0) return of(emission());\n      return combineLatest(..._entries.map(entry => entry[1].observable))\n              .pipe(map(\n                  emissions => Emission.from(emissions, _entries.reduce(\n                    (_map, entry, index) => {\n                      _map[entry[0]] = emissions[index].value;\n                      return _map;\n                    }\n                    , <{[label: string]: any}>{}))\n              ))\n    }\n    else\n      return combineLatest(\n        ...inbound\n        .map(pin => pin.observable))\n        .pipe(map(emissions => Emission.from(emissions)));\n  }\n}\n\n\n/**\n *\n * Creates a [pack](https://connective.dev/docs/pack) pin.\n *\n * @param stuff If passed, the pin will be connected to all given pins.\n * If any of the stuff is a `PinMap` instead of a `Pin`, then upon resolution\n * the pack will be connected to all of its realized pins.\n *\n */\nexport function pack(...stuff: (PinMap|PinLike)[]) {\n  let _mapped = stuff.map(each => (each instanceof PinMap)?new Pack(each):each);\n  if (_mapped.length == 0) return new Pack();\n  if (_mapped.length == 1) return (_mapped[0] instanceof Pack)?_mapped[0]:_mapped[0].to(new Pack());\n  return group(..._mapped).to(new Pack());\n}\n\n\nexport default pack;\n"]}