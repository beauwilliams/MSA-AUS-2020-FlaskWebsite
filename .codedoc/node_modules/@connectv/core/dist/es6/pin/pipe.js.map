{"version":3,"file":"pipe.js","sourceRoot":"","sources":["../../../src/pin/pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAoB,MAAM,MAAM,CAAC;AAI/C,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAO5B;;;;GAIG;AACH,MAAM,OAAO,IAAK,SAAQ,GAAG;IAQ3B,YAAY,KAAiB;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;;;;;;;OASG;IACO,OAAO,CAAC,OAAkB;QAClC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CACtB,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EACzC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA,CAAC;YACtB,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA,CAAC;YACtB,KAAK,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAC7C,CAAC;IACN,CAAC;CACF;AAGD;;;;;;;;GAQG;AACH,MAAM,UAAU,IAAI,CAAC,GAAG,KAAiB,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAGtE,eAAe,IAAI,CAAC","sourcesContent":["import { merge, OperatorFunction } from 'rxjs';\n\nimport { Emission } from '../shared/emission';\n\nimport { Pin } from './pin';\nimport { PinLike } from './pin-like';\n\n\nexport type PipeFunc = OperatorFunction<Emission, Emission>;\n\n\n/**\n *\n * Represents [pipe](https://connective.dev/docs/pipe) pins.\n *\n */\nexport class Pipe extends Pin {\n  /**\n   *\n   * The list of pipe functions that constitute this pipe.\n   *\n   */\n  readonly pipes: PipeFunc[];\n\n  constructor(pipes: PipeFunc[]) {\n    super();\n    this.pipes = pipes;\n  }\n\n  /**\n   *\n   * Resolves the underling observable of the pin, by\n   * [mergeing](https://rxjs-dev.firebaseapp.com/api/index/function/merge)\n   * observables of inbound pins and piping them through specified\n   * [pipeable operators](https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md).\n   *\n   * @param inbound\n   *\n   */\n  protected resolve(inbound: PinLike[]) {\n    return this.pipes.reduce(\n      (observable, pipe) => observable.pipe(pipe),\n        (inbound.length == 1)?\n        inbound[0].observable:\n        merge(...inbound.map(pin => pin.observable))\n      );\n  }\n}\n\n\n/**\n *\n * Creates a [pipe](https://connective.dev/docs/pipe) pin using given pipe functions.\n * You can utilize this to use RxJS's pipeable operators in CONNECTIVE flows.\n * [Checkout the docs](https://connective.dev/docs/pipe) for examples and further information.\n *\n * @param pipes\n *\n */\nexport function pipe(...pipes: PipeFunc[]) { return new Pipe(pipes); }\n\n\nexport default pipe;\n"]}