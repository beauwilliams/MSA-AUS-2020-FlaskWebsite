{"version":3,"file":"fork.js","sourceRoot":"","sources":["../../../src/pin/fork.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAE5C,OAAO,QAAQ,MAAM,oBAAoB,CAAC;AAC1C,OAAO,eAAe,MAAM,oBAAoB,CAAC;AAEjD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG9B,MAAM,qBAAqB,GAAG,EAAE,CAAC;AAGjC;;;;GAIG;AACH,MAAM,OAAO,IAAK,SAAQ,IAAI;IAC5B,YAAY,MAAc,qBAAqB;QAC7C,KAAK,CAAC;YACJ,GAAG,CAAC,CAAC,CAAC,EAAE;gBACN,IAAI,MAAM,GAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;gBACzD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxC,OAAO,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACrE,CAAC,CAAC;YACF,KAAK,EAAE;SACR,CAAC,CAAA;IACJ,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,MAAc,qBAAqB;QACjE,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;CACF;AAGD;;;;;;;GAOG;AACH,MAAM,UAAU,IAAI,CAAC,MAAc,qBAAqB,IAAI,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAGnF,eAAe,IAAI,CAAC","sourcesContent":["import { map, share } from 'rxjs/operators';\n\nimport emission from '../shared/emission';\nimport createRandomTag from '../util/random-tag';\n\nimport { Pipe } from './pipe';\n\n\nconst _DefaultForkTagLength = 10;\n\n\n/**\n *\n * Represents [fork](https://connective.dev/docs/fork) pins.\n *\n */\nexport class Fork extends Pipe {\n  constructor(len: number = _DefaultForkTagLength) {\n    super([\n      map(e => {\n        let __fork = <string[]>[].concat(e.context.__fork || []);\n        __fork.push(Fork._create_fork_tag(len));\n        return emission(e.value, Object.assign({}, e.context, { __fork }));\n      }),\n      share(),\n    ])\n  }\n\n  private static _create_fork_tag(len: number = _DefaultForkTagLength): string {\n    return createRandomTag(len);\n  }\n}\n\n\n/**\n *\n * Creates a [fork](https://connective.dev/docs/fork) pin.\n * [Checkout the docs](https://connective.dev/docs/fork) for examples and further information.\n *\n * @param len the length of the fork-tag that will be added to the context of each emission.\n *\n */\nexport function fork(len: number = _DefaultForkTagLength) { return new Fork(len); }\n\n\nexport default fork;\n"]}