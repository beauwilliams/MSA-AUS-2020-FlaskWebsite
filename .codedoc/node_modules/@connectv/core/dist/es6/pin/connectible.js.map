{"version":3,"file":"connectible.js","sourceRoot":"","sources":["../../../src/pin/connectible.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject, defer } from 'rxjs';\n\nimport { Emission } from '../shared/emission';\n\nimport { BasePin } from './base';\nimport { PinLike } from './pin-like';\n\nimport { PinLockedError } from './errors/locked.error';\nimport { UnresolvedPinObservableError } from './errors/unresolved-observable.error';\n\n\n/**\n *\n * Represents pins that you can connect other pins to.\n *\n */\nexport abstract class Connectible extends BasePin {\n  private _inbound: PinLike[];\n  private _observable: Observable<Emission> | undefined;\n  private _resolving = false;\n  private _deferred: Subject<Emission> | undefined;\n  private _deference_connected = false;\n\n  constructor() {\n    super();\n    this._inbound = [];\n  }\n\n  /**\n   *\n   * @note it will throw an error if this pin is already locked.\n   * You can read more about this [here](https://connective.dev/docs/pin#subscribing-and-binding).\n   *\n   */\n  public connect(pin: PinLike) {\n    if (this.locked) throw new PinLockedError();\n    if (!this._inbound.includes(pin))\n      this._inbound.push(pin);\n\n    return this;\n  }\n\n  /**\n   *\n   * @note Accessing this property locks the pin.\n   * You can read more about this [here](https://connective.dev/docs/pin#subscribing-and-binding).\n   *\n   */\n  public get observable(): Observable<Emission> {\n    if (this.shouldResolve(this._inbound, this._observable)) {\n      if (this._resolving) {\n        if (!this._deferred) {\n          this._deferred = new Subject<any>();\n        }\n        return this._deferred;\n      }\n      else {\n        this._resolving = true;\n        this._observable = this.resolve(this._inbound);\n        if (this._deferred) {\n          let _pristine = this._observable;\n          this._observable = defer(() => {\n            if (!this._deference_connected) {\n              this.track(_pristine.subscribe(this._deferred));\n              this._deference_connected = true;\n            }\n\n            return _pristine;\n          });\n        }\n        this._resolving = false;\n      }\n    }\n\n    if (!this._observable) throw new UnresolvedPinObservableError();\n    return this._observable;\n  }\n\n  /**\n   *\n   * @note Calling `.clear()` will unlock the pin and disconnect it from\n   * all the pins its connected to (removing their references). There is no guarantee\n   * that the pin will be usable afterwards.\n   *\n   */\n  public clear() {\n    this._inbound.length = 0;\n    this._observable = undefined;\n    this._deference_connected = false;\n\n    if (this._deferred) {\n      this._deferred.complete();\n      this._deferred = undefined;\n    }\n\n    return super.clear();\n  }\n\n  /**\n   *\n   * @returns `true` if the pin is locked, `false` if not.\n   * You can read more about this [here](https://connective.dev/docs/pin#subscribing-and-binding).\n   *\n   */\n  public get locked(): boolean { return this.isLocked(this._observable); }\n\n  /**\n   *\n   * @returns `true` if any other pin is connected to this pin, `false` if not.\n   *\n   */\n  public get connected(): boolean { return this.isConnected(); }\n\n  /**\n   *\n   * Override this to determine the value of `.connected` through other means.\n   *\n   */\n  protected isConnected(): boolean { return this._inbound.length > 0 }\n\n  /**\n   *\n   * Override this to determine if the pin is locked.\n   * You can read more about this [here](https://connective.dev/docs/pin#subscribing-and-binding).\n   *\n   * @param observable\n   *\n   */\n  protected abstract isLocked(observable: Observable<Emission> | undefined): boolean;\n\n  /**\n   *\n   * Override this to determine if the underlying observable should be resolved, based on\n   * inbound connected pins and the currently resolved observable.\n   *\n   * @param inbound\n   * @param observable\n   *\n   */\n  protected abstract shouldResolve(inbound: PinLike[], observable: Observable<Emission> | undefined): boolean;\n\n  /**\n   *\n   * Override this to determine how the underlying observable should be resolved, based on\n   * pins connected to this pin.\n   *\n   * @param inbound\n   *\n   */\n  protected abstract resolve(inbound: PinLike[]): Observable<Emission>;\n}\n"]}