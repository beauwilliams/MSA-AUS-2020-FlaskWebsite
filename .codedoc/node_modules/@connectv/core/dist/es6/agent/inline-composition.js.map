{"version":3,"file":"inline-composition.js","sourceRoot":"","sources":["../../../src/agent/inline-composition.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAU5C,MAAM,iBAAkB,SAAQ,WAAW;IAIzC,YAAqB,OAA2B,EAAE,SAAoB;QACpE,KAAK,CAAC,SAAS,CAAC,CAAC;QADE,YAAO,GAAP,OAAO,CAAoB;QAE9C,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CACxC,CAAC,GAAG,QAAsB,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,IAAI,KAAI,CAAC;IACT,IAAI,KAAI,CAAC;IACT,KAAK,KAAI,CAAC;IAEV,WAAW,CAAC,KAAa,IAAI,OAAQ,IAAI,CAAC,MAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClE,YAAY,CAAC,KAAa,IAAI,OAAQ,IAAI,CAAC,OAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEpE,aAAa,KAAK,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACtD,WAAW,KAAK,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;CACtD;AAKD;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,WAAW,CAAC,kBAAkD,EAAE,OAA4B;IAC1G,IAAI,SAAoB,CAAC;IACzB,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,kBAAwC,CAAC;QACnD,IAAI,OAAO,GAAiB,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,QAAQ,EAAE,EAAE,GAAG,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,SAAS,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACtE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;KACzC;SACI;QACH,SAAS,GAAG,kBAA+B,CAAC;KAC7C;IAED,IAAI,IAAI,GAAG,GAAG,EAAE,CAAC,IAAI,iBAAiB,CAAC,OAA6B,EAAE,SAAS,CAAC,CAAC;IAChF,IAAY,CAAC,SAAS,GAAG,SAAS,CAAC;IACpC,OAAO,IAAI,CAAC;AACd,CAAC;AAGD,eAAe,WAAW,CAAC","sourcesContent":["import { PinLike } from '../pin/pin-like';\n\nimport { Agent } from './agent';\nimport { Signature } from './signature';\nimport { Composition } from './composition';\n\n\ntype _ChildType = PinLike | Agent;\ntype _PinDict = {[name: string]: PinLike};\n\nexport type TrackFunc = (...children: _ChildType[]) => void;\nexport type CompositionFactory = (track: TrackFunc) => [_PinDict | PinLike[], _PinDict | PinLike[]];\n\n\nclass InlineComposition extends Composition {\n  readonly inpins: _PinDict | PinLike[];\n  readonly outpins: _PinDict | PinLike[];\n\n  constructor(readonly factory: CompositionFactory, signature: Signature) {\n    super(signature);\n    [this.inpins, this.outpins] = this.factory(\n      (...children: _ChildType[]) => children.forEach(child => this.add(child)));\n  }\n\n  init() {}\n  wire() {}\n  build() {}\n\n  createInput(label: string) { return (this.inpins as any)[label]; }\n  createOutput(label: string) { return (this.outpins as any)[label]; }\n\n  createEntries() { return Object.values(this.inpins); }\n  createExits() { return Object.values(this.outpins); }\n}\n\n\nexport function composition(factory: CompositionFactory): () => InlineComposition;\nexport function composition(signature: Signature, factory: CompositionFactory): () => InlineComposition;\n/**\n *\n * Creates a [composition](https://connective.dev/docs/composition) using given factory function.\n * [Checkout the docs](https://connective.dev/docs/composition) for examples and further information.\n *\n * @param factoryOrSignature either the [signature](https://connective.dev/docs/agent#signature) of\n * the composition or the factory function creating it. If signature is not provided, the factory function\n * will be invoked once to deduce the signature.\n * @param factory the factory function for creating the composition. If provided, the first parameter must\n * be a signature.\n *\n */\nexport function composition(factoryOrSignature: CompositionFactory | Signature, factory?: CompositionFactory) {\n  let signature: Signature;\n  if (!factory) {\n    factory = factoryOrSignature as CompositionFactory;\n    let tracked = <_ChildType[]>[];\n    let s = factory((...children) => { tracked = tracked.concat(children); });\n    signature = { inputs: Object.keys(s[0]), outputs: Object.keys(s[1]) };\n    tracked.forEach(thing => thing.clear());\n  }\n  else {\n    signature = factoryOrSignature as Signature;\n  }\n\n  let func = () => new InlineComposition(factory as CompositionFactory, signature);\n  (func as any).signature = signature;\n  return func;\n}\n\n\nexport default composition;"]}