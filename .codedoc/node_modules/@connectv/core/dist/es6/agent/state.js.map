{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../src/agent/state.ts"],"names":[],"mappings":"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","sourcesContent":["import isequal from 'lodash.isequal';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Bindable } from '../shared/bindable';\nimport { emission, Emission } from '../shared/emission';\n\nimport { PinLike } from '../pin/pin-like';\nimport group from '../pin/group';\nimport source, { Source } from '../pin/source';\nimport filter from '../pin/filter';\n\nimport { Agent } from './agent';\n\n\nexport type EqualityFunc = (a: any, b: any) => boolean;\n\nconst _Unset = {};\n\n/**\n *\n * Represents [state](https://connective.dev/docs/state) agents.\n *\n */\nexport class State extends Agent implements Bindable {\n  /**\n   *\n   * The initial value of the agent\n   *\n   */\n  readonly initial: any = _Unset;\n\n  /**\n   *\n   * The equality check function\n   *\n   */\n  readonly compare: EqualityFunc;\n\n  private _subject: BehaviorSubject<Emission>;\n  private _injector: Source;\n\n  constructor();\n  constructor(initialOrCompare: any | EqualityFunc | undefined);\n  constructor(initial: any | undefined, compare: EqualityFunc | undefined);\n  /**\n   *\n   * @param initialOrCompare either initial value or equality function\n   * @param compare the equality function, if provided the first parameter must be the initial value.\n   */\n  constructor(initialOrCompare: EqualityFunc | any = _Unset, compare?: EqualityFunc | undefined) {\n    super({\n      inputs: ['value'],\n      outputs: ['value']\n    });\n\n    if (initialOrCompare == _Unset && !compare) {\n      this.initial = _Unset;\n      this.compare = isequal;\n    }\n    else if (compare) {\n      this.initial = initialOrCompare;\n      this.compare = compare;\n    }\n    else {\n      if (typeof initialOrCompare === 'function')\n        this.compare = initialOrCompare;\n      else {\n        this.initial = initialOrCompare;\n        this.compare = isequal;\n      }\n    }\n\n    this._subject = new BehaviorSubject<Emission>(emission(this.initial));\n    this._injector = source();\n  }\n\n  /**\n   *\n   * Shortcut for `.in('value')`, on which the state receives new values.\n   * [Read this](https://connective.dev/docs/state#signature) for more details.\n   *\n   */\n  get input() { return this.in('value'); }\n\n  /**\n   *\n   * Shortcut for `.out('value')`, on which the state emits new values.\n   * [Read this](https://connective.dev/docs/state#signature) for more details.\n   *\n   */\n  get output() { return this.out('value'); }\n\n  /**\n   *\n   * Allows reading or updating `State`'s value directly. It will be equal\n   * to the latest value emitted by the `State`, and setting it, if the value\n   * has changed truly, will cause the `State` to emit the new value.\n   *\n   */\n  public get value() { return (this._subject.value.value !== _Unset)?(this._subject.value.value):undefined }\n  public set value(v: any) { this._injector.send(v); }\n\n  /**\n   *\n   * Causes the agent to start receiving values even\n   * without any subscribers.\n   *\n   */\n  public bind(): this {\n    this.track(this.output.observable.subscribe());\n    return this;\n  }\n\n  /**\n   *\n   * @note `State`'s `.clear()` also causes a complete\n   * notification to be sent to observers.\n   *\n   */\n  public clear(): this {\n    this._subject.complete();\n    return super.clear();\n  }\n\n  protected createOutput(_: string): PinLike {\n    this.checkOutput(_);\n\n    return group(this.input, this._injector)\n            .to(filter((v: any) => !this.compare(v, this.value)))\n            .to(source(this._subject))\n            .to(filter((v: any) => v !== _Unset));\n  }\n\n  protected createEntries() { return [this.input] }\n  protected createExits() { return [this.output] }\n}\n\n\nexport function state(): State;\nexport function state(initialOrCompare: any | EqualityFunc): State;\nexport function state(initial: any, compare: EqualityFunc): State;\n/**\n *\n * Creates a [state](https://connective.dev/docs/state) agent.\n * State agents can hold state in a reactive flow.\n * [Checkout the docs](https://connective.dev/docs/state) for examples and further information.\n *\n * @param initialOrCompare the initial value or compare function\n * @param compare the equality function to be used to determine state change, in case initial value is provided\n *\n */\nexport function state(initialOrCompare?: any | EqualityFunc | undefined, compare?: EqualityFunc | undefined) {\n    return new State(initialOrCompare, compare);\n}\n\n\nexport default state;\n"]}