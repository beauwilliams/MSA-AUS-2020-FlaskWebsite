{"version":3,"file":"gate.js","sourceRoot":"","sources":["../../../src/agent/gate.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACzC,OAAO,GAAG,MAAM,YAAY,CAAC;AAC7B,OAAO,MAAM,MAAM,eAAe,CAAC;AAEnC,OAAO,KAAK,MAAM,cAAc,CAAC;AAEjC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAIhC;;;;GAIG;AACH,MAAM,OAAO,IAAK,SAAQ,KAAK;IAG7B;QACE,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,IAAW,KAAK,KAAK,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAE/C;;;;;OAKG;IACH,IAAW,MAAM,KAAK,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAEjD;;;;;;OAMG;IACH,IAAW,OAAO,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEpC,YAAY,CAAC,KAAa;QAClC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC;aACnC,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC;aACjB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAe,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aACvE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAa,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,CAAC;IAES,aAAa,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxC,WAAW,KAAK,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEjD,KAAK;QACH,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACF;AAGD;;;;;;;GAOG;AACH,MAAM,UAAU,IAAI,KAAK,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;AAG7C,eAAe,IAAI,CAAC","sourcesContent":["import { Control } from '../pin/control';\nimport map from '../pin/map';\nimport filter from '../pin/filter';\n\nimport group from '../pin/group';\n\nimport { Agent } from './agent';\nimport { NodeLike } from './node-like';\n\n\n/**\n *\n * Represents [gate](https://connective.dev/docs/gate) agents.\n *\n */\nexport class Gate extends Agent implements NodeLike {\n  private _control: Control;\n\n  constructor() {\n    super({inputs: ['value'], outputs: ['value']});\n    this._control = new Control();\n  }\n\n  /**\n   *\n   * Shortcut for `.in('value')`, the input pin receiving values.\n   * [Read this](https://connective.dev/docs/gate#signature) for more details.\n   *\n   */\n  public get input() { return this.in('value'); }\n\n  /**\n   *\n   * Shortcut for `.out('value')`, the output emitting allowed values.\n   * [Read this](https://connective.dev/docs/gate#signature) for more details.\n   *\n   */\n  public get output() { return this.out('value'); }\n\n  /**\n   *\n   * Each pin connected to this pin should emit a boolean value for each\n   * value sent to `.input`, and if all are true, the value is emitted via `.output`.\n   * [Read this](https://connective.dev/docs/gate) for more details.\n   *\n   */\n  public get control() { return this._control; }\n\n  protected createOutput(label: string) {\n    this.checkOutput(label);\n    return group(this.control, this.input)\n      .to(new Control())\n      .to(filter(([ctrl, _]: [any[], any]) => ctrl.every(signal => !!signal)))\n      .to(map(([_, input]: [any, any]) => input));\n  }\n\n  protected createEntries() { return [this.input]; }\n  protected createExits() { return [this.output]; }\n\n  clear() {\n    this.control.clear();\n    return super.clear();\n  }\n}\n\n\n/**\n *\n * Creates a [gate](https://connective.dev/docs/gate) agent.\n * Gate agents await a control signal for each incoming value and either pass it along\n * or drop it based on the boolean value of the control signal.\n * [Checkout the docs](https://connective.dev/docs/gate) for examples and further information.\n *\n */\nexport function gate() { return new Gate(); }\n\n\nexport default gate;\n"]}