{"version":3,"file":"keyed-deep.js","sourceRoot":"","sources":["../../../src/agent/keyed-deep.ts"],"names":[],"mappings":"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","sourcesContent":["import { distinctUntilKeyChanged } from \"rxjs/operators\";\n\nimport { emission } from \"../shared/emission\";\nimport { KeyMap, KeyFunc, ChangeMap as _ChangeMap, diff } from \"../util/keyed-array-diff\";\n\nimport { map } from \"../pin/map\";\nimport { sink } from \"../pin/sink\";\nimport { group } from \"../pin/group\";\nimport { value } from \"../pin/value\";\nimport { pipe } from \"../pin/pipe\";\nimport { PinLike } from \"../pin/pin-like\";\n\nimport { SimpleDeep, DeepAccessor, DeepChildFactory } from \"./simple-deep\";\nimport { State, EqualityFunc } from \"./state\";\nimport { TrackCallback } from \"../shared/types\";\n\n\nexport interface ChangeMap extends _ChangeMap {\n  /**\n   * \n   * Whether this is the first change map being calculated for a state or not.\n   * \n   */\n  initial: boolean;\n}\n\n/**\n *\n * Represents a [keyed deep state](https://connective.dev/docs/deep#keyed-deep).\n *\n */\nexport class KeyedDeep extends SimpleDeep {\n  private _keyMap: KeyMap = {};\n\n  constructor(state: State, keyfunc: KeyFunc);\n  constructor(accessor: DeepAccessor, keyfunc: KeyFunc, compare?: EqualityFunc);\n  constructor(stateOrAccessor: State | DeepAccessor, keyfunc: KeyFunc, compare?: EqualityFunc | undefined);\n  /**\n   *\n   * @param stateOrAccessor underlying state of this deep state or a state tree accessor (for sub-states)\n   * @param keyfunc key function to be used to track entities within the state's value\n   * @param compare equality function used to detect changes. If state is passed as first argument this is ignored.\n   *\n   */\n  constructor(stateOrAccessor: State | DeepAccessor, readonly keyfunc: KeyFunc, compare?: EqualityFunc | undefined) {\n    super(stateOrAccessor, compare, {\n      inputs: ['value'],\n      outputs: ['value', 'changes']\n    });\n  }\n\n  public key(key: string | number): SimpleDeep;\n  public key<T extends SimpleDeep>(key: string | number, factory: DeepChildFactory<T>): T;\n  /**\n   *\n   * Creates a sub-state bound to entity identified by given key. Entity `x` is\n   * said to be identified by key `k` if `state.keyfunc(x) === k`.\n   *\n   * @param key the identifier of the entity to track\n   * @param factory the factory function to be used to construct the sub-state\n   *\n   */\n  public key<T extends SimpleDeep>(key: string | number, factory?: DeepChildFactory<T>): SimpleDeep | T {\n    let initialized = false;\n    let _this = this;\n    let _factory = factory || ((accessor: DeepAccessor, compare: EqualityFunc) => new SimpleDeep(accessor, compare));\n\n    return _factory({\n      initial: (_this._keyMap[key] || {item: undefined}).item\n              || (Object.values(this.value) || []).find((i: any) => this.keyfunc(i) == key),\n      get: group(_this.changes, _this.reemit).to(map(() => (_this._keyMap[key] || {item: undefined}).item)),\n      set: sink((v, context) => {\n        try {\n          let _entry = _this._keyMap[key];\n          if (_entry) {\n            _entry.item = v;\n\n            if (_this.accessor) {\n              _this.value = (Array.isArray(_this.value))?\n                                Object.assign([], _this.value, {[_entry.index]: v}):\n                                Object.assign({}, _this.value, {[_entry.index]: v});\n            }\n            else {\n              _this.value[_entry.index] = v;\n\n              if (initialized) this.reemit.emit(emission(v, context));\n              else initialized = true;\n            }\n          }\n        } catch (err) {}\n      }),\n      bind(track: TrackCallback) { return track(this.set.subscribe()); },\n    }, this.state.compare);\n  }\n\n  /**\n   *\n   * Returns a [pin](https://connective.dev/docs/pin) that reflects the reactive value of\n   * the index of entity identified by given key in the state's value. Entity `x` is said\n   * to be identified by key `k` if `state.keyfunc(x) === k`.\n   *\n   * @param key the key to identify target entity with\n   *\n   */\n  public index(key: string | number) {\n    let initial: string | number;\n\n    if (this._keyMap[key]) initial = this._keyMap[key].index;\n    else initial = ((Object.entries(this.value) || []).find(([index, item]) => this.keyfunc(item) == key)\n                    || [-1, undefined])[0];\n\n    return group(\n      value(initial),\n      group(this.changes, this.reemit).to(map(() => (this._keyMap[key] || {index: -1}).index))\n    ).to(pipe(distinctUntilKeyChanged('value')));\n  }\n\n  /**\n   *\n   * Will bind the underlying state, and cause deep change-detection to happen upon\n   * changes of the state value. [Read this](https://connective.dev/docs/deep#change-detection)\n   * for more information on deep change-detection.\n   *\n   * If this is a sub-state, also enables up-propagation\n   * of state value, causing the parent state to pick up changes made to the value of this\n   * sub-state. [Read this](https://connective.dev/docs/deep#two-way-keyed) for more details\n   * and examples.\n   *\n   */\n  bind() {\n    super.bind();\n    this.track(this.changes.subscribe());\n    return this;\n  }\n\n  /**\n   *\n   * Keys that entities within the value of the state are identified with. Entity\n   * `x` is said to be indetified with key `k` if `state.keyfunc(x) === k`.\n   *\n   * **WARNING** the keys will not be calculcated unless deep change-detection is active.\n   * You can ensure deep change-detection is active by subscribing on `.changes` or\n   * calling `.bind()`. [Read this](https://connective.dev/docs/deep#change-detection)\n   * for more information on deep change-detection.\n   *\n   */\n  public get keys() {\n    return Object.keys(this._keyMap);\n  }\n\n  /**\n   *\n   * A [pin](https://connective.dev/docs/pin) that emits changes to this deep state's list value.\n   * These changes include entities being added to the list, removed from it or moved around in it.\n   * [Read this](https://connective.dev/docs/deep#change-detection) for more information on \n   * deep change-detection.\n   *\n   */\n  public get changes() { return this.out('changes'); }\n\n  protected createOutput(label: string): PinLike {\n    if (label === 'changes') {\n      this.output; // --> wire output before hand\n      let initial = true;\n\n      return this.state.to(map((value: any, done: (_: ChangeMap) => void) => {\n        const result = diff(value, this._keyMap, this.keyfunc);\n        this._keyMap = result.newKeyMap;\n\n        let changes = Object.assign({}, result.changes, { initial });\n        initial = false;\n\n        done(changes);\n      }));\n    }\n    else return super.createOutput(label);\n  }\n}\n"]}