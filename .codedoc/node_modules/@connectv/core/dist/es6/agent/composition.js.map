{"version":3,"file":"composition.js","sourceRoot":"","sources":["../../../src/agent/composition.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bindable, isBindable } from '../shared/bindable';\n\nimport { PinLike } from '../pin/pin-like';\n\nimport { Signature } from './signature';\nimport { Agent } from './agent';\n\nimport { ChildNotDefined } from './errors/child-not-defined.error';\nimport { ChildIsNotPin, ChildIsNotAgent } from './errors/child-type-mismatch.error';\n\n\ntype _ChildType = PinLike | Agent;\n\n/**\n *\n * Represents [compositions](https://connective.dev/docs/composition). This class\n * is to be used directly if you want to create class-based compositions, otherwise\n * utilize [`composition()`](https://connective.dev/docs/composition) method.\n *\n */\nexport abstract class Composition extends Agent implements Bindable {\n  private _bindables: Bindable[] | undefined;\n  private _children: {[name: string]: _ChildType} | undefined;\n\n  /**\n   *\n   * @param signature the signature of the composition\n   *\n   */\n  constructor(signature: Signature) {\n    super(signature);\n    this.init();\n  }\n\n  /**\n   *\n   * Override this to modify the initialization process of a composition.\n   * This function is called by parent's constructor, so if you want to\n   * invoke `.build()` and `.wire()` after some child-class properties have been\n   * initialized as well, you would need to override this function. This is a typical\n   * scenario in case of parametric class-based compositions.\n   *\n   */\n  protected init() {\n    this.build();\n    this.wire();\n  }\n\n  /**\n   *\n   * Override this to define the child pins and agents of your composition,\n   * using `.add()` method:\n   *\n   * ```typescript\n   * build() {\n   *   this.add('myState', state());\n   *   this.add('mySink', sink());\n   *   this.myOtherState = this.add('myOtherState', state()) as State;\n   * }\n   * ```\n   *\n   */\n  protected abstract build(): void;\n\n  /**\n   *\n   * Override this to wire the pins and agents you defined in `.build()` to each other:\n   *\n   * ```typescript\n   * build() {\n   *   this.agent('myState').out('value').to(this.pin('mySink'));\n   *   this.pin('mySink').to(this.myOtherState).to(this.out('myOutput'));\n   * }\n   * ```\n   *\n   */\n  protected abstract wire(): void;\n\n  protected add(child: _ChildType): _ChildType;\n  protected add(name: string, child: _ChildType): _ChildType;\n  /**\n   *\n   * Adds a child (pin or agent) to the composition. You can provide a name. If not,\n   * the child will be named numerically based on the length of the children already added:\n   *\n   * ```typescript\n   * build() {\n   *   this.add('myState', state());\n   *   this.add(expr((x, y) => x * y));\n   * }\n   *\n   * wire() {\n   *   this.agent('myState'); // --> this is the defined state\n   *   this.agent(1);         // --> this is the defined expr\n   * }\n   * ```\n   *\n   * @param nameOrChild\n   * @param child\n   *\n   */\n  protected add(nameOrChild: string | _ChildType, child?: _ChildType): _ChildType {\n    if (!this._children)\n      this._children = {};\n\n    if (!child)\n      return this.add(`${Object.keys(this._children).length}`, nameOrChild as _ChildType);\n\n    let _name = nameOrChild as string;\n    this._children[_name] = child;\n\n    if (isBindable(child))\n      this.toBind(child);\n\n    return child;\n  }\n\n  /**\n   *\n   * @param name\n   * @returns the child with given name.\n   * @throws an error if no child with given name is defined.\n   *\n   */\n  protected child(name: string|number): _ChildType {\n    if (typeof name !== 'string') return this.child(name.toString());\n    if (this._children && name in this._children)\n      return this._children[name];\n\n    throw new ChildNotDefined(name);\n  }\n\n  /**\n   *\n   * @param name\n   * @returns the pin child with given name.\n   * @throws an error if no child with given name is defined or if it is not a pin.\n   *\n   */\n  protected pin(name: string|number): PinLike {\n    let _child = this.child(name);\n    if (_child instanceof Agent) throw new ChildIsNotPin(name.toString());\n    return _child;\n  }\n\n  /**\n   *\n   * @param name\n   * @returns the child agent with given name.\n   * @throws an error if no child with given name is defined or if it is not an agent.\n   *\n   */\n  protected agent(name: string|number): Agent {\n    let _child = this.child(name);\n    if (!(_child instanceof Agent)) throw new ChildIsNotAgent(name.toString());\n    return _child;\n  }\n\n  /**\n   *\n   * Registers a `Bindable` that will be bound when `.bind()` is called on this composition.\n   *\n   * @param bindable\n   *\n   */\n  protected toBind(bindable: Bindable): this {\n    if (!this._bindables) this._bindables = [];\n    this._bindables.push(bindable);\n    return this;\n  }\n\n  /**\n   *\n   * Binds all registered `Bindable`s, including bindable children like\n   * [states](https://connective.dev/docs/state) and\n   * [sinks](https://connective.dev/docs/sink).\n   *\n   */\n  bind(): this {\n    if (this._bindables)\n      this._bindables.forEach(bindable => bindable.bind());\n    return this;\n  }\n\n  /**\n   *\n   * @note `.clear()` on `Composition` also clears all registered children.\n   *\n   */\n  clear(): this {\n    if (this._children) {\n      Object.values(this._children).forEach(child => child.clear());\n      this._children = undefined;\n    }\n\n    if (this._bindables) this._bindables = undefined;\n\n    return super.clear();\n  }\n}\n"]}