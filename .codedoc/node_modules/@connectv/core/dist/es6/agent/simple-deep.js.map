{"version":3,"file":"simple-deep.js","sourceRoot":"","sources":["../../../src/agent/simple-deep.ts"],"names":[],"mappings":"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","sourcesContent":["import createRandomTag from \"../util/random-tag\";\nimport { emission } from \"../shared/emission\";\nimport { TrackCallback } from \"../shared/types\";\n\nimport { map } from \"../pin/map\";\nimport { sink } from \"../pin/sink\";\nimport { group } from \"../pin/group\";\nimport { filter } from \"../pin/filter\";\nimport { Source } from \"../pin/source\";\nimport { PinLike } from \"../pin/pin-like\";\n\nimport { Agent } from \"./agent\";\nimport { State, EqualityFunc } from \"./state\";\nimport { Signature } from \"./signature\";\n\n\nexport interface DeepAccessor {\n  initial: any;\n  set: PinLike;\n  get: PinLike;\n  bind(track: TrackCallback): void;\n}\n\n\nexport type DeepChildFactory<T extends SimpleDeep> = (accessor: DeepAccessor, compare: EqualityFunc) => T;\n\n/**\n *\n * Represents non-keyed (simple) [deep states](https://connective.dev/docs/deep).\n *\n */\nexport class SimpleDeep extends Agent {\n  /**\n   *\n   * can be used to force re-emission of state value.\n   *\n   */\n  readonly reemit: Source;\n\n  /**\n   * \n   * the core state of this simple deep\n   * \n   */\n  readonly state: State;\n\n  protected accessor: DeepAccessor;\n  private downPropageteKey: string;\n  private bound = false;\n\n  constructor(state: State);\n  constructor(accessor: DeepAccessor, compare?: EqualityFunc);\n  constructor(stateOrAccessor: State | DeepAccessor, compare?: EqualityFunc | undefined);\n  constructor(stateOrAccessor: State | DeepAccessor, compare?: EqualityFunc | undefined, signature?: Signature);\n  /**\n   *\n   * @param stateOrAccessor underlying state of this deep state or a state tree accessor (for sub-states)\n   * @param compare equality function used to detect changes. If state is passed as first argument this is ignored.\n   * @param signature the signature of the state, to be overriden by child classes.\n   *\n   */\n  constructor(stateOrAccessor: State | DeepAccessor, compare?: EqualityFunc | undefined, signature?: Signature) {\n    super(signature || {\n      inputs: ['value'],\n      outputs: ['value']\n    });\n\n    this.reemit = new Source();\n    this.downPropageteKey = createRandomTag();\n\n    if (stateOrAccessor instanceof State) this.state = stateOrAccessor;\n    else {\n      this.accessor = stateOrAccessor;\n      this.state = new State(this.accessor.initial, compare);\n      this.accessor.get\n        .to(map((_, done, __, context) => {\n          context[this.downPropageteKey] = true;\n          done(_);\n        }))\n        .to(this)\n        .to(filter((_, done, __, context) => {\n          const downPropagated = context[this.downPropageteKey];\n          delete context[this.downPropageteKey];\n          done(!downPropagated);\n        }))\n        .to(this.accessor.set);\n    }\n  }\n\n  public sub(index: string | number): SimpleDeep;\n  public sub<T extends SimpleDeep>(index: string | number, factory: DeepChildFactory<T>): T;\n  /**\n   *\n   * Creates a sub-state for given index/property.\n   * [Read this](https://connective.dev/docs/deep) for more details\n   *\n   * @param index\n   * @param factory the factory function to be used to construct the sub-state\n   *\n   */\n  public sub<T extends SimpleDeep>(index: string | number, factory?: DeepChildFactory<T>): SimpleDeep | T {\n    let initialized = false;\n    let _this = this;\n    let _factory = factory || ((accessor: DeepAccessor, compare: EqualityFunc) => new SimpleDeep(accessor, compare));\n\n    return _factory({\n      initial: (_this.value || [])[index],\n      get: _this.output.to(map((v: any) => (v || [])[index])),\n      set: sink((v, context) => {\n        try {\n          if (!_this.value) _this.value = [];\n\n          if (this.accessor) {\n            _this.value = (Array.isArray(_this.value))?\n                          Object.assign([], _this.value, {[index]: v}):\n                          Object.assign({}, _this.value, {[index]: v});\n          }\n          else {\n            _this.value[index] = v;\n    \n            if (initialized) this.reemit.emit(emission(v, context));\n            else initialized = true;\n          }\n        } catch(_) {}\n      }),\n      bind(track: TrackCallback) { return track(this.set.subscribe()); },\n    }, this.state.compare);\n  }\n\n  /**\n   *\n   * Allows reading or updating state's value directly.\n   *\n   */\n  public get value(): any { return this.state.value; }\n  public set value(v: any) { this.state.value = v; }\n\n  /**\n   *\n   * The equality function used by this deep state. Is used for change detection.\n   *\n   */\n  public get compare() { return this.state.compare; }\n\n  /**\n   *\n   * Shortcut for `.in('value')`, on which the state receives new values.\n   * [Read this](https://connective.dev/docs/state#signature) for more details.\n   *\n   */\n  get input() { return this.in('value'); }\n\n  /**\n   *\n   * Shortcut for `.out('value')`, on which the state emits new values.\n   * [Read this](https://connective.dev/docs/state#signature) for more details.\n   *\n   */\n  get output() { return this.out('value'); }\n\n  /**\n   *\n   * Binds the underlying state. If this is a sub-state, it will also\n   * allow up-propagation of state value, causing the parent state to pick up\n   * changes made to the value of this sub-state. [Read this](https://connective.dev/docs/deep#two-way-data)\n   * for more details and examples.\n   *\n   */\n  bind() {\n    if (!this.bound) {\n      if (this.accessor) this.accessor.bind(sub => this.track(sub));\n      else this.track(this.output.subscribe());\n      this.bound = true;\n    }\n    return this;\n  }\n\n  protected createOutput(_: string): PinLike {\n    this.checkOutput(_);\n\n    return group(\n      this.input.to(this.state),\n      this.reemit.to(map(() => this.value))\n    );\n  }\n\n  protected createEntries() { return [this.input] }\n  protected createExits() { return [this.output] }\n}\n"]}