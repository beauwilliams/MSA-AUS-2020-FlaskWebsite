{"version":3,"file":"node-wrap.js","sourceRoot":"","sources":["../../../src/agent/node-wrap.ts"],"names":[],"mappings":"AACA,OAAO,OAAoB,MAAM,gBAAgB,CAAC;AAClD,OAAO,IAAI,MAAM,aAAa,CAAC;AAC/B,OAAO,GAAG,MAAM,YAAY,CAAC;AAC7B,OAAO,MAAM,MAAM,eAAe,CAAC;AAEnC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAGhC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG9B;;;;GAIG;AACH,MAAM,OAAO,QAAS,SAAQ,KAAK;IAMjC;;;;OAIG;IACH,YAAqB,IAAe;QAClC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QADH,SAAI,GAAJ,IAAI,CAAW;QAP5B,sBAAiB,GAAG,IAAI,CAAC;QAU/B,IAAI,CAAC,QAAQ,GAAG,OAAO,EAAE,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CACf,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAC5D;aACA,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACzC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE;YACnB,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS;gBACzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAChC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC9C,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC/C,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,IAAW,OAAO,KAAc,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAE7C,WAAW,CAAC,KAAa;QACjC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAES,YAAY,CAAC,KAAa;QAClC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACF;AAGD;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAgB;IACvC,IAAI,KAAK,YAAY,IAAI;QAAE,OAAO,KAAK,CAAC;IACxC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAGD,eAAe,QAAQ,CAAC","sourcesContent":["import { PinLike } from '../pin/pin-like';\nimport control, { Control } from '../pin/control';\nimport pack from '../pin/pack';\nimport map from '../pin/map';\nimport filter from '../pin/filter';\n\nimport { Agent } from './agent';\nimport { AgentLike } from './agent-like';\nimport { NodeLike } from './node-like';\nimport { Node } from './node';\n\n\n/**\n *\n * A class to wrap an agent so that it behaves like a [node](https://connective.dev/docs/node).\n *\n */\nexport class NodeWrap extends Agent implements NodeLike {\n  private _control: Control;\n  private _pack: PinLike;\n\n  private _control_required = true;\n\n  /**\n   *\n   * @param core the original agent to be wrapped.\n   *\n   */\n  constructor(readonly core: AgentLike) {\n    super(core.signature);\n\n    this._control = control();\n    this._pack = pack(\n      this.inputs,\n      this._control.to(map(() => this._control_required = false))\n    )\n    .to(filter(() => !this._control_required))\n    .to(map((all: any) => {\n      if (this._control.connected)\n        this._control_required = true;\n      return all[0];\n    }));\n\n    this.track(core.inputs.subscribe((label, pin) => {\n      this._pack.to(map((all: any) => all[label])).to(pin);\n    }));\n\n    this.track(core.outputs.subscribe((label, pin) => {\n      pin.to(this.out(label));\n    }));\n  }\n\n  public get control(): Control { return this._control; }\n\n  protected createInput(label: string) {\n    this.core.in(label);\n    return super.createInput(label);\n  }\n\n  protected createOutput(label: string) {\n    this.core.out(label);\n    return super.createOutput(label);\n  }\n\n  clear() {\n    this._control.clear();\n    this._pack.clear();\n    this.core.clear();\n    return super.clear();\n  }\n}\n\n\n/**\n *\n * Wraps given agent in a `NodeWrap`, making it behave like a\n * [node](https://connective.dev/docs/node):\n *\n * - It will wait for all of its inputs to emit at least once before first execution\n * - Re-executes any time a new value is emitted from any of the inputs\n * - Waits for its `.control` if its connected before each execution\n * - Responds with the first output of the wrapped agent for each execution\n *\n * @param agent\n *\n */\nexport function nodeWrap(agent: AgentLike): NodeLike {\n  if (agent instanceof Node) return agent;\n  return new NodeWrap(agent);\n}\n\n\nexport default nodeWrap;\n"]}