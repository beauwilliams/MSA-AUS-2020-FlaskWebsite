{"version":3,"file":"node-like.js","sourceRoot":"","sources":["../../../src/agent/node-like.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEzC,OAAO,EAAE,WAAW,EAAa,MAAM,cAAc,CAAC;AAoBtD;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAC,QAAa;IACtC,OAAO,QAAQ,KAAK,SAAS,IAAI,QAAQ,CAAC,OAAO,YAAY,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;AAChG,CAAC","sourcesContent":["import { Control } from '../pin/control';\n\nimport { isAgentLike, AgentLike } from './agent-like';\n\n\n/**\n *\n * Denotes objects that behave like a [node](https://connective.dev/docs/node).\n *\n */\nexport interface NodeLike extends AgentLike{\n  /**\n   *\n   * You can typically control the behavior of a `NodeLike` by emitting\n   * values to its `.control`, for example making it wait for a cue even if all\n   * of its input parameters are ready.\n   *\n   */\n  control: Control;\n}\n\n\n/**\n *\n * @param whatever\n * @returns `true` if `whatever` is `NodeLike`\n *\n */\nexport function isNodeLike(whatever: any): whatever is NodeLike {\n  return whatever !== undefined && whatever.control instanceof Control && isAgentLike(whatever);\n}\n"]}