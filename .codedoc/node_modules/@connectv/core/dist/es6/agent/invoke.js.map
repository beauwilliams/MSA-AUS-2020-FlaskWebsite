{"version":3,"file":"invoke.js","sourceRoot":"","sources":["../../../src/agent/invoke.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscription } from 'rxjs';\n\nimport { PinLike } from '../pin/pin-like';\nimport control, { Control } from '../pin/control';\nimport map from '../pin/map';\nimport filter from '../pin/filter';\nimport pack from '../pin/pack';\n\nimport { Signature } from './signature';\nimport { Agent } from './agent';\nimport { NodeLike } from './node-like';\nimport { exec, AgentFactory, ExecResult } from './call';\n\n\n/**\n *\n * Represents [invoke](https://connective.dev/docs/invoke) agents.\n *\n */\nexport class Invoke extends Agent implements NodeLike {\n  private _relay: PinLike;\n  private _control: Control;\n  private _all_subs: Subscription = new Subscription();\n\n  private _control_required = true;\n\n  /**\n   *\n   * @param ref the agent factory to be used in response to each set of incoming data\n   * @param signature an optional signature denoting the signature of the agents that\n   * are to be created. If not provided and not directly deducable from the factory function itself,\n   * the factory function will be invoked once to deduce the signature.\n   *\n   */\n  constructor(readonly ref: AgentFactory, signature?: Signature) {\n    super(signature || (ref as any).signature || ref().clear().signature);\n\n    this._control = new Control();\n\n    this._relay = pack(control(this.inputs), this._control.to(map(() => this._control_required = false)))\n      .to(filter(() => !this._control_required))\n      .to(map((_: any) => {\n        if (this._control.connected)\n          this._control_required = true;\n        return _[0];\n      }))\n      .to(exec(this.ref, s => this._all_subs.add(s), s => this._all_subs.remove(s),\n        () => this.outputs.entries.map(([label, _]) => label)));\n  }\n\n  protected createOutput(label: string) {\n    this.checkOutput(label);\n    return this._relay\n      .to(filter((data: ExecResult) => data.label == label))\n      .to(map((data: ExecResult) => data.value));\n  }\n\n  protected createEntries() { return (this.signature.inputs || []).map(i => this.in(i)); }\n  protected createExits() { return this.signature.outputs.map(o => this.out(o)); }\n\n  /**\n   *\n   * You can control when the agent creates the inner-agent and runs it on latest set of\n   * incoming values by emitting to `.control`.\n   *\n   */\n  public get control() { return this._control; }\n\n  public clear() {\n    this._relay.clear();\n    this._control.clear();\n    this._all_subs.unsubscribe();\n    return super.clear();\n  }\n}\n\n\n/**\n *\n * Creates an [invoke](https://connective.dev/docs/invoke) agent. Invoke\n * agents create an inner-agent using the given factory in response to each set of incoming inputs\n * and emit the first output of the inner-agent in response.\n * [Checkout the docs](https://connective.dev/docs/invoke) for examples and further information.\n *\n * @param ref the agent factory to be used to create inner-agents\n * @param signature the signature of the inner-agents. If not provided and not deducable from\n * the factory function, the factory function will be invoked once to deduce this.\n *\n */\nexport function invoke(ref: AgentFactory, signature?: Signature) { return new Invoke(ref, signature); }\n\n\nexport default invoke;\n"]}