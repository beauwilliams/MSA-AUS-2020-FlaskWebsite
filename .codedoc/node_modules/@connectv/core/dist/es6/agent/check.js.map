{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../src/agent/check.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAA+C,MAAM,eAAe,CAAC;AACpF,OAAO,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAEjC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAGhC;;;;GAIG;AACH,MAAM,OAAO,KAAM,SAAQ,KAAK;IAG9B;;;;OAIG;IACH,YAAqB,SAAqB;QACxC,KAAK,CAAC;YACJ,MAAM,EAAE,CAAC,OAAO,CAAC;YACjB,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;SAC1B,CAAC,CAAC;QAJgB,cAAS,GAAT,SAAS,CAAY;QAMxC,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAG,SAA4B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAElF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,CAC9D,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;OAKG;IACH,IAAW,KAAK,KAAc,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAExD;;;;;OAKG;IACH,IAAW,IAAI,KAAc,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEvD;;;;;OAKG;IACH,IAAW,IAAI,KAAc,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE7C,YAAY,CAAC,KAAa;QAClC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,KAAK,IAAI,MAAM,EAAE;YACnB,OAAO,IAAI,CAAC,IAAI;iBACb,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;iBACzC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;SAC1C;aACI;YACH,OAAO,IAAI,CAAC,IAAI;iBACf,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC1C,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;SACxC;IACH,CAAC;IAES,aAAa,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxC,WAAW,KAAK,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CAC3D;AAGD;;;;;;;;;GASG;AACH,MAAM,UAAU,KAAK,CAAC,IAAgB,IAAI,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAGnE,eAAe,KAAK,CAAC","sourcesContent":["import { PinLike } from '../pin/pin-like';\nimport { filter, FilterFunc, FilterFuncSync, FilterFuncAsync } from '../pin/filter';\nimport { map } from '../pin/map';\n\nimport { Agent } from './agent';\n\n\n/**\n *\n * Represents [check](https://connective.dev/docs/check) agents.\n *\n */\nexport class Check extends Agent {\n  private core: PinLike;\n\n  /**\n   *\n   * @param predicate the predicate function to pass or fail incoming values against.\n   *\n   */\n  constructor(readonly predicate: FilterFunc) {\n    super({\n      inputs: ['value'],\n      outputs: ['pass', 'fail']\n    });\n\n    if (predicate.length <= 1)\n      this.core = this.input.to(map((v: any) => [v, (predicate as FilterFuncSync)(v)]));\n    else\n      this.core = this.input.to(map((v : any, done, error, context) =>\n        predicate(v, res => done([v, res]), error, context)));\n  }\n\n  /**\n   *\n   * Shortcut for `.in('value')`, the main value input for this check.\n   * [Read this](https://connective.dev/docs/check#signature) for more details.\n   *\n   */\n  public get input(): PinLike { return this.in('value'); }\n\n  /**\n   *\n   * Shortcut for `.out('pass')`, the output for values passing the criteria outline by given predicate.\n   * [Read this](https://connective.dev/docs/check#signature) for more details.\n   *\n   */\n  public get pass(): PinLike { return this.out('pass'); }\n\n  /**\n   *\n   * Shortcut for `.out('fail')`, the output for values failing the criteria outline by given predicate.\n   * [Read this](https://connective.dev/docs/check#signature) for more details.\n   *\n   */\n  public get fail(): PinLike { return this.out('fail'); }\n\n  protected createOutput(label: string): PinLike {\n    this.checkOutput(label);\n    if (label == 'pass') {\n      return this.core\n        .to(filter(([_, v]: [any, boolean]) => v))\n        .to(map(([v, _]: [any, boolean]) => v))\n    }\n    else {\n      return this.core\n      .to(filter(([_, v]: [any, boolean]) => !v))\n      .to(map(([v, _]: [any, boolean]) => v))\n    }\n  }\n\n  protected createEntries() { return [this.input]; }\n  protected createExits() { return [this.pass, this.fail]; }\n}\n\n\n/**\n *\n * Creates a [check](https://connective.dev/docs/check) agent. A check agent\n * will pass or fail incoming values based on given predicate, passing them through\n * the corresponding outputs.\n * [Checkout the docs](https://connective.dev/docs/check) for examples and further information.\n *\n * @param func the predicate to test incoming values against\n *\n */\nexport function check(func: FilterFunc) { return new Check(func); }\n\n\nexport default check;"]}