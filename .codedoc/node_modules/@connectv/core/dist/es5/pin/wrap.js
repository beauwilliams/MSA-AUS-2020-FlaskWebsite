"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var emission_1 = __importDefault(require("../shared/emission"));
var locked_error_1 = require("./errors/locked.error");
var base_1 = require("./base");
/**
 *
 * Represents [wrap](https://connective.dev/docs/wrap) pins.
 *
 */
var Wrapper = /** @class */ (function (_super) {
    __extends(Wrapper, _super);
    function Wrapper(observable) {
        var _this = _super.call(this) || this;
        _this.observable = observable.pipe(operators_1.map(function (v) { return emission_1.default(v); }));
        return _this;
    }
    Wrapper.prototype.connect = function (_) {
        throw new locked_error_1.PinLockedError();
    };
    return Wrapper;
}(base_1.BasePin));
/**
 *
 * Creates a [wrap](https://connective.dev/docs/wrap) pin. A wrap pin
 * wraps a given observable so that it can be connected to other pins. Because
 * its observable is already realized, you cannot connect other pins to a wrap pin.
 * [Checkout the docs](https://connective.dev/docs/wrap) for examples and further information.
 *
 * @param observable
 *
 */
function wrap(observable) { return new Wrapper(observable); }
exports.wrap = wrap;
exports.default = wrap;
//# sourceMappingURL=wrap.js.map