"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * This error is thrown when you connect a pin to a locked pin.
 * [Read this](https://connective.dev/docs/pin#subscribing-and-binding)
 * for more information on when a pin is locked.
 *
 */
var PinLockedError = /** @class */ (function (_super) {
    __extends(PinLockedError, _super);
    function PinLockedError() {
        return _super.call(this, "Attempted to modify pin after it was locked.\nCheck the following link for more info:\nhttps://connective.dev/docs/pin#subscribing-and-binding") || this;
    }
    return PinLockedError;
}(Error));
exports.PinLockedError = PinLockedError;
//# sourceMappingURL=locked.error.js.map