{"version":3,"file":"extract-comp-props.js","sourceRoot":"","sources":["../../../src/util/extract-comp-props.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,CAAC,CAAS;IAC1B,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IACb,IACE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAChC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AAClB,CAAC;AAGD,MAAM,UAAU,gBAAgB,CAAC,UAAkB;IACjD,MAAM,KAAK,GAA4B,EAAE,CAAC;IAC1C,IAAI,IAAI,GAAsB,KAAK,CAAC;IACpC,IAAI,IAAI,GAAuB,SAAS,CAAC;IACzC,IAAI,OAAO,GAAuB,SAAS,CAAC;IAC5C,IAAI,OAAO,GAAuB,SAAS,CAAC;IAE5C,KAAK,IAAI,CAAC,IAAI,UAAU,EAAE;QACxB,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,KAAK,OAAO,EAAE;gBAChB,IAAY,IAAI,CAAC,CAAC;gBACnB,OAAO,GAAG,SAAS,CAAC;aACrB;;gBAAO,IAAY,IAAI,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;gBACvC,OAAO,GAAG,CAAC,CAAC;gBACZ,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;gBAAC,IAAI,IAAI,CAAC,CAAC;aAC9B;iBAAM,IAAI,CAAC,KAAK,GAAG,EAAE;gBACpB,IAAI,IAAI,KAAK,KAAK,EAAE;oBAClB,OAAO,GAAG,IAAI,CAAC;oBAAC,IAAI,GAAG,SAAS,CAAC;oBACjC,IAAI,GAAG,OAAO,CAAC;iBAChB;qBAAM;oBAAE,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBAAC,IAAI,IAAI,CAAC,CAAC;iBAAE;aACzC;iBAAM,IAAI,CAAC,KAAK,GAAG,EAAE;gBACpB,IAAI,IAAI,KAAK,OAAO,EAAE;oBACpB,KAAK,CAAC,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;oBACxD,IAAI,GAAG,SAAS,CAAC;oBAAC,IAAI,GAAG,KAAK,CAAC;iBAChC;qBAAM;oBAAE,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBAAC,IAAI,IAAI,CAAC,CAAC;iBAAE;aACzC;iBAAM;gBAAE,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;gBAAC,IAAI,IAAI,CAAC,CAAC;aAAE;SACzC;KACF;IAED,IAAI,OAAO,EAAE;QACX,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;KACnD;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["function normalize(x: string) {\n  x = x.trim();\n  if (\n    (x.startsWith('\"') && x.endsWith('\"')) ||\n    (x.startsWith('`') && x.endsWith('`')) ||\n    (x.startsWith(\"'\") && x.endsWith(\"'\"))\n  ) x = x.substr(1, x.length - 2);\n  return x.trim();\n}\n\n\nexport function extractCompProps(propString: string) {\n  const props: {[key: string]: string} = {};\n  let mode: ('key' | 'value') = 'key';\n  let curr: string | undefined = undefined;\n  let currkey: string | undefined = undefined;\n  let strmark: string | undefined = undefined;\n\n  for (let c of propString) {\n    if (strmark) {\n      if (c === strmark) {\n        (curr as any) += c;\n        strmark = undefined;\n      } else (curr as any) += c;\n    } else {\n      if (c === '\"' || c === '`' || c === \"'\") {\n        strmark = c;\n        curr = curr || ''; curr += c;\n      } else if (c === '=') {\n        if (mode === 'key') {\n          currkey = curr; curr = undefined;\n          mode = 'value';\n        } else { curr = curr || ''; curr += c; }\n      } else if (c === ',') {\n        if (mode === 'value') {\n          props[normalize(currkey || '')] = normalize(curr || '');\n          curr = undefined; mode = 'key';\n        } else { curr = curr || ''; curr += c; }\n      } else { curr = curr || ''; curr += c; }\n    }\n  }\n\n  if (currkey) {\n    props[normalize(currkey)] = normalize(curr || '');\n  }\n\n  return props;\n}\n"]}