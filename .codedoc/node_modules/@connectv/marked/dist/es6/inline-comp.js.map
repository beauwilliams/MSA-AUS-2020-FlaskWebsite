{"version":3,"file":"inline-comp.js","sourceRoot":"","sources":["../../src/inline-comp.tsx"],"names":[],"mappings":"AAKA,MAAM,SAAS,GAAG,uEAAuE,CAAC;AAS1F,MAAM,OAAO,mBAAmB;IAC9B,YACW,QAAwC,EACxC,GAAiB;QADjB,aAAQ,GAAR,QAAQ,CAAgC;QACxC,QAAG,GAAH,GAAG,CAAc;IACzB,CAAC;IAEJ,OAAO,CAAC,EAAe;QACrB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAChC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;YACrC,IAAI,CAAC,IAAI;gBACP,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAEzE,MAAM,OAAO,GAAW,EAAE,CAAC;YAC3B,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACzF,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,OAAO,CAAC,EAAe;QACrB,MAAM,OAAO,GAAc,EAAE,CAAC;QAC9B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;;YACtC,IAAI,KAAK,CAAC;YACV,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,YAAY,IAAI;mBAC/C,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,EAAE;gBAC7D,GAAG,CAAC,UAAU,CAAC,WAAW,GAAG,OAAA,GAAG,CAAC,UAAU,CAAC,WAAW,0CAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,MAAK,EAAE,CAAC;gBACvF,OAAO,CAAC,IAAI,CAAC;oBACX,CAAC,EAAE,GAAG;oBACN,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;oBACnB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC5B,CAAC,CAAC;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,IAAY;QAChB,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACnD,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YACrD,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;YACjB,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,EAAY,MAAK,EAAE,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { RendererLike } from '@connectv/html';\n\nimport { ComponentMap } from './comp-map';\n\n\nconst compRegex = /^\\[\\:(\\w+)(\\s+(?:\\w+\\s*\\=[^\\,]+\\s*)(?:\\,\\s*\\w+\\s*\\=[^\\,]+\\s*)*)?\\s*\\]/;\n\ntype _Props = { [key: string]: string };\ntype _Marker = {\n  $: HTMLElement;\n  component: string;\n  props: _Props;\n}\n\nexport class InlineCompProcessor {\n  constructor(\n    readonly renderer: RendererLike<unknown, unknown>,\n    readonly map: ComponentMap,\n  ) {}\n\n  process(el: HTMLElement) {\n    this.markers(el).forEach(marker => {\n      let Comp = this.map[marker.component]\n      if (!Comp)\n        throw new Error('Unrecognized Inline Component:: ' + marker.component);\n\n      const content: Node[] = [];\n      marker.$.childNodes.forEach(child => content.push(child));\n      this.renderer.render(this.renderer.create(Comp, marker.props, content)).before(marker.$);\n      marker.$.remove();\n    });\n\n    return el;\n  }\n\n  markers(el: HTMLElement) {\n    const markers: _Marker[] = [];\n    el.querySelectorAll('em').forEach(em$ => {\n      let match;\n      if (em$.firstChild && em$.firstChild instanceof Text\n        && (match = compRegex.exec(em$.firstChild.textContent || ''))) {\n          em$.firstChild.textContent = em$.firstChild.textContent?.substr(match[0].length) || '';\n          markers.push({\n            $: em$,\n            component: match[1],\n            props: this.props(match[2]),\n          });\n        }\n    });\n\n    return markers;\n  }\n\n  props(desc: string) {\n    return desc?.trim().split(',').reduce((props, bit) => {\n      const [key, val] = bit.split('=').map(_ => _.trim());\n      props[key] = val;\n      return props;\n    }, {} as _Props) || {};\n  }\n}\n"]}