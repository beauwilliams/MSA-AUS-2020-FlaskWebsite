{"version":3,"file":"quote-comp.js","sourceRoot":"","sources":["../../src/quote-comp.tsx"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAG7D,MAAM,UAAU,gBAAgB,CAAC,GAAiB;IAChD,OAAO,UAAS,CAAK,EAAE,QAAwC,EAAE,OAAgB;;QAC/E,IAAI,GAAG,GAAG,gCAAS,OAAO,CAAU,CAAC;QACrC,UAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW,0CAAE,UAAU,CAAC,GAAG,GAAG;YAClD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjE,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEtB,IAAI,IAAI,IAAI,GAAG,EAAE;gBACf,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;gBACvB,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACzD,MAAM,QAAQ,GAAW,EAAE,CAAC;gBAC5B,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC;oBAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEpF,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;aAC/C;iBACI;gBACH,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,IAAI,CAAC,CAAC;aAC5D;SACF;aACI;YACH,MAAM,QAAQ,GAAW,EAAE,CAAC;YAC5B,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACtD,OAAO,oCAAa,QAAQ,CAAc,CAAC;SAC5C;IACH,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { RendererLike } from '@connectv/html';\n\nimport { ComponentMap } from './comp-map';\nimport { extractCompProps } from './util/extract-comp-props';\n\n\nexport function quotedComponents(map: ComponentMap) {\n  return function(_: {}, renderer: RendererLike<unknown, unknown>, content: unknown) {\n    let ref = <marker>{content}</marker>;\n    if (ref.childNodes[0].textContent?.startsWith(':')) {\n      const parts = ref.childNodes[0].textContent.substr(1).split(' ');\n      const name = parts[0];\n\n      if (name in map) {\n        const Comp = map[name];\n        const props = extractCompProps(parts.slice(1).join(' '));\n        const children: Node[] = [];\n        ref.childNodes.forEach((child, index) => { if (index >= 1) children.push(child); });\n\n        return renderer.create(Comp, props, children);\n      }\n      else {\n        throw new Error('Unrecognized Quoted Component:: ' + name);\n      }\n    }\n    else {\n      const children: Node[] = [];\n      ref.childNodes.forEach(child => children.push(child));\n      return <blockquote>{children}</blockquote>;\n    }\n  }\n}\n"]}