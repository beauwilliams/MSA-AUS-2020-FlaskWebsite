{"version":3,"file":"inline.js","sourceRoot":"","sources":["../../src/inline.tsx"],"names":[],"mappings":"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","sourcesContent":["import { InlineLexer, TokensList } from 'marked';\nimport { RendererLike } from '@connectv/html';\n\nimport { Options } from './options';\n\n\nexport interface LinkOptions {\n  href: string;\n  title: string;\n}\n\n\nexport interface ImageOptions {\n  src: string;\n  title: string;\n  alt: string;\n}\n\nexport class InlineProcessor<R=unknown, T=unknown> {\n  private lexer: InlineLexer;\n\n  constructor(\n    tokens: TokensList,\n    private renderer: RendererLike<R, T>,\n    readonly options: Options<R, T>,\n  ) {\n    this.lexer = new InlineLexer(tokens.links as any);\n  }\n\n  process(block: string) {\n    const renderer = this.renderer;\n    return this.buildFrom(<span _innerHTML={this.lexer.output(block)}/>);\n  }\n\n  children(src: Node) {\n    const l: Node[] = [];\n    src.childNodes.forEach(node => l.push(node));\n    return l;\n  }\n\n  buildFrom(src: Node) {\n    const renderer = this.renderer;\n    const res = <fragment/>;\n    this.children(src).forEach(node => {\n      if (node instanceof Text && this.options.Text) {\n        renderer.render(<this.options.Text>{node.textContent/* istanbul ignore next */ || ''}</this.options.Text>)\n          .on(res);\n      }\n      else if (node instanceof HTMLAnchorElement && this.options.Link) {\n        const options: Partial<LinkOptions> = {};\n        if (node.hasAttribute('href')) options['href'] = node.getAttribute('href')/* istanbul ignore next */ || '';\n        if (node.hasAttribute('title')) options['title'] = node.getAttribute('title')/* istanbul ignore next */ || '';\n        renderer.render(<this.options.Link  {...options}>{this.buildFrom(node)}</this.options.Link>).on(res);\n      } \n      else if (node instanceof HTMLElement && node.tagName === 'EM' && this.options.Em) {\n        renderer.render(<this.options.Em>\n            {this.buildFrom(node)}\n          </this.options.Em>).on(res);\n      } \n      else if (node instanceof HTMLElement && node.tagName === 'STRONG' && this.options.Strong) {\n        renderer.render(<this.options.Strong>\n          {this.buildFrom(node)}\n        </this.options.Strong>).on(res);\n      }\n      else if (node instanceof HTMLElement && node.tagName === 'DEL' && this.options.Del) {\n        renderer.render(<this.options.Del>\n          {this.buildFrom(node)}\n        </this.options.Del>).on(res);\n      }\n      else if (node instanceof HTMLElement && node.tagName === 'CODE' && this.options.CodeSpan) {\n        renderer.render(<this.options.CodeSpan>\n          {this.buildFrom(node)}\n        </this.options.CodeSpan>).on(res);\n      }\n      else if (node instanceof HTMLImageElement && this.options.Image) {\n        const options: Partial<ImageOptions> = {};\n        if (node.hasAttribute('src')) options['src'] = node.getAttribute('src')/* istanbul ignore next */ || '';\n        if (node.hasAttribute('title')) options['title'] = node.getAttribute('title')/* istanbul ignore next */ || '';\n        if (node.hasAttribute('alt')) options['alt'] = node.getAttribute('alt')/* istanbul ignore next */ || '';\n        renderer.render(<this.options.Image {...options}/>).on(res);\n      }\n      else renderer.render(node).on(res);\n    });\n\n    return res;\n  }\n}\n"]}