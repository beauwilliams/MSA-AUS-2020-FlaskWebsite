"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@connectv/core");
function lifeCycleInfo(node, createIfNonExistent) {
    if (createIfNonExistent === void 0) { createIfNonExistent = false; }
    var _node = node;
    if (node instanceof DocumentFragment) {
        var marker = getLifeCycleMarker(node);
        if (marker)
            return lifeCycleInfo(marker, createIfNonExistent);
        else if (createIfNonExistent) {
            marker = document.createElement('i');
            marker.setAttribute('hidden', '');
            setLifeCycleMarker(node, marker);
            return lifeCycleInfo(marker, true);
        }
    }
    else {
        if (_node.lifecycle)
            return _node.lifecycle;
        else if (createIfNonExistent) {
            _node.lifecycle = { bound: false };
            return _node.lifecycle;
        }
    }
}
exports.lifeCycleInfo = lifeCycleInfo;
function setLifeCycleMarker(fragment, marker) {
    fragment.lifecycleMarker = marker;
    if (!fragment.contains(marker))
        fragment.appendChild(marker);
}
exports.setLifeCycleMarker = setLifeCycleMarker;
function getLifeCycleMarker(fragment) {
    return fragment.lifecycleMarker;
}
exports.getLifeCycleMarker = getLifeCycleMarker;
function bind(node) {
    var lifecycle = lifeCycleInfo(node);
    if (lifecycle) {
        if (lifecycle.bound)
            return;
        lifecycle.bound = true;
        if (lifecycle.bindables)
            lifecycle.bindables.forEach(function (b) { return b.bind(); });
    }
    node.childNodes.forEach(bind);
    if (node.parentNode && !node.parentNode.childObserver) {
        var observer_1 = new MutationObserver(function (changes) {
            changes.forEach(function (change) {
                if (change.removedNodes)
                    change.removedNodes.forEach(function (node) { return setImmediate(function () {
                        if (!document.contains(node))
                            clear(node);
                    }); });
            });
        });
        observer_1.observe(node.parentNode, { childList: true });
        node.parentNode.childObserver = observer_1;
        attach({
            clear: function () { observer_1.disconnect(); }
        }, node.parentNode);
    }
}
exports.bind = bind;
function clear(node) {
    var lifecycle = lifeCycleInfo(node);
    if (lifecycle && lifecycle.clearables)
        lifecycle.clearables.forEach(function (c) { return c.clear(); });
    node.childNodes.forEach(clear);
}
exports.clear = clear;
function attach(thing, node) {
    var lifecycle = lifeCycleInfo(node, true);
    if (core_1.isBindable(thing))
        (lifecycle.bindables || (lifecycle.bindables = [])).push(thing);
    if (core_1.isClearable(thing))
        (lifecycle.clearables || (lifecycle.clearables = [])).push(thing);
}
exports.attach = attach;
function detach(thing, node) {
    var lifecycle = lifeCycleInfo(node);
    if (lifecycle) {
        if (lifecycle.bindables)
            lifecycle.bindables = lifecycle.bindables.filter(function (b) { return b !== thing; });
        if (lifecycle.clearables)
            lifecycle.clearables = lifecycle.clearables.filter(function (b) { return b !== thing; });
    }
}
exports.detach = detach;
exports.LifeCycle = {
    info: lifeCycleInfo,
    getMarker: getLifeCycleMarker,
    setMarker: setLifeCycleMarker,
    bind: bind,
    clear: clear,
    attach: attach,
    detach: detach
};
//# sourceMappingURL=life-cycle.js.map