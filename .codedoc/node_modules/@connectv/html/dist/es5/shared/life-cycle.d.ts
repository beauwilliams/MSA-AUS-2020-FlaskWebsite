import { Bindable, Clearable } from '@connectv/core';
export interface LifeCycleInfo {
    bindables?: Bindable[];
    clearables?: Clearable[];
    bound: boolean;
}
export declare function lifeCycleInfo(node: Node): LifeCycleInfo | undefined;
export declare function lifeCycleInfo(node: Node, createIfNonExistent: boolean): LifeCycleInfo;
export declare function setLifeCycleMarker(fragment: DocumentFragment, marker: Node): void;
export declare function getLifeCycleMarker(fragment: DocumentFragment): any;
export declare function bind(node: Node): void;
export declare function clear(node: Node): void;
export declare function attach(thing: Bindable | Clearable, node: Node): void;
export declare function detach(thing: Bindable | Clearable, node: Node): void;
export declare const LifeCycle: {
    info: typeof lifeCycleInfo;
    getMarker: typeof getLifeCycleMarker;
    setMarker: typeof setLifeCycleMarker;
    bind: typeof bind;
    clear: typeof clear;
    attach: typeof attach;
    detach: typeof detach;
};
