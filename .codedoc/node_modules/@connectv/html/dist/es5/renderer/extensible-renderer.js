"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var renderer_1 = require("./renderer");
var basic_plugins_1 = require("./plugin/basic-plugins");
var ExtensibleRenderer = /** @class */ (function (_super) {
    __extends(ExtensibleRenderer, _super);
    function ExtensibleRenderer() {
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.plugins = [];
        var _loop_1 = function (i) {
            var plugin = plugins[i];
            if (!this_1.plugins.includes(plugin)) {
                if (plugin.unique !== undefined) {
                    var filter_1 = plugin.unique.bind(plugin);
                    this_1.plugins = this_1.plugins.filter(function (p) { return !filter_1(p); });
                }
                this_1.plugins.push(plugin);
            }
        };
        var this_1 = this;
        for (var i = 0; i < plugins.length; i++) {
            _loop_1(i);
        }
        _this.plugins.sort(function (a, b) { return a.priority - b.priority; });
        return _this;
    }
    ExtensibleRenderer.prototype.plug = function () {
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        return new (ExtensibleRenderer.bind.apply(ExtensibleRenderer, __spreadArrays([void 0], [].concat(this.plugins, plugins))))();
    };
    ExtensibleRenderer.prototype.create = function (tag, props) {
        var _this = this;
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var _node;
        this.plugins.some(function (plugin) { return basic_plugins_1.isCreatePlugin(plugin) && !!(_node = plugin.create(tag, props, children, _this)); });
        if (!_node)
            _node = _super.prototype.create.apply(this, __spreadArrays([tag, props], children));
        this.plugins.filter(basic_plugins_1.isPostCreatePlugin).forEach(function (plugin) { return plugin.postCreate(_node, _this); });
        return _node;
    };
    ExtensibleRenderer.prototype.setprop = function (prop, target, host) {
        var _this = this;
        if (this.plugins.some(function (plugin) { return basic_plugins_1.isPropertyPlugin(plugin) && plugin.setprop(prop, target, host, _this); }))
            return;
        _super.prototype.setprop.call(this, prop, target, host);
    };
    ExtensibleRenderer.prototype.append = function (target, host) {
        var _this = this;
        if (Array.isArray(target)) {
            target.forEach(function (_) { return _this.append(_, host); });
        }
        else {
            if (this.plugins.some(function (plugin) { return basic_plugins_1.isAppendPlugin(plugin) && plugin.append(target, host, _this); }))
                return;
            _super.prototype.append.call(this, target, host);
        }
    };
    ExtensibleRenderer.prototype.render = function (node) {
        var _this = this;
        var _res = _super.prototype.render.call(this, node);
        var _postRender = this.plugins.filter(basic_plugins_1.isPostRenderPlugin);
        var _do = function (_fn) {
            var children;
            if (_res.target instanceof DocumentFragment)
                children = Array.from(_res.target.childNodes);
            var _R = _fn();
            if (children)
                children.forEach(function (child) { return _postRender.forEach(function (plugin) { return plugin.postRender(child, _this); }); });
            else
                _postRender.forEach(function (plugin) { return plugin.postRender(_res.target, _this); });
            return _R;
        };
        return {
            target: _res.target,
            on: function (host) { return _do(function () { return _res.on(host); }); },
            before: function (ref) { return _do(function () { return _res.before(ref); }); },
            after: function (ref) { return _do(function () { return _res.after(ref); }); }
        };
    };
    return ExtensibleRenderer;
}(renderer_1.Renderer));
exports.ExtensibleRenderer = ExtensibleRenderer;
//# sourceMappingURL=extensible-renderer.js.map