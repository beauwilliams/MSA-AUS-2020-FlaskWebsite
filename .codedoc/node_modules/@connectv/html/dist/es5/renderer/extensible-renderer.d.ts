import { PropsType } from '../shared/types';
import { Renderer, ChildType } from './renderer';
import { Plugin, PluginHost } from './plugin/plugin';
import { ToBeRendered, RenderableFunction } from './renderer-like';
export declare class ExtensibleRenderer<Renderable = RawValue, Tag = string> extends Renderer<Renderable, Tag> implements PluginHost<Renderable, Tag> {
    readonly plugins: Plugin<Renderable, Tag>[];
    constructor(...plugins: Plugin<Renderable, Tag>[]);
    plug(...plugins: Plugin<Renderable, Tag>[]): ExtensibleRenderer<Renderable, Tag>;
    create(tag: Tag | string, props: PropsType<RawValue | Renderable> | undefined, ...children: ChildType<Renderable>[]): Node;
    setprop(prop: string, target: RawValue | Renderable, host: HTMLElement): void;
    append(target: ChildType<Renderable>, host: Node): void;
    render<T extends Node>(node: T | RenderableFunction<Renderable, Tag, T>): ToBeRendered<T>;
}
