"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var L = __importStar(require("../../../shared/life-cycle"));
var plugin_1 = require("../plugin");
var ObservablePlugin = /** @class */ (function () {
    function ObservablePlugin() {
        this.priority = plugin_1.PluginPriority.Fallback;
    }
    ObservablePlugin.prototype.setprop = function (prop, target, host) {
        if (target instanceof rxjs_1.Observable) {
            var sub_1;
            L.attach({
                bind: function () {
                    sub_1 = target.subscribe(function (v) {
                        if (typeof v === 'boolean') {
                            if (v)
                                host.setAttribute(prop, '');
                            else
                                host.removeAttribute(prop);
                        }
                        else
                            host.setAttribute(prop, (v !== undefined) ? v.toString() : '');
                    });
                },
                clear: function () { sub_1.unsubscribe(); },
            }, host);
            return true;
        }
        else
            return false;
    };
    ObservablePlugin.prototype.append = function (target, host) {
        if (target instanceof rxjs_1.Observable) {
            var node_1 = document.createTextNode('');
            var sub_2;
            L.attach({
                bind: function () { sub_2 = target.subscribe(function (v) { return node_1.textContent = (v !== undefined) ? v.toString() : ''; }); },
                clear: function () { sub_2.unsubscribe(); },
            }, node_1);
            host.appendChild(node_1);
            return true;
        }
        else
            return false;
    };
    return ObservablePlugin;
}());
exports.ObservablePlugin = ObservablePlugin;
//# sourceMappingURL=observable.js.map