"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_1 = require("../plugin");
var basic_plugins_1 = require("./basic-plugins");
var unhandled_signature_prop_error_1 = require("./errors/unhandled-signature-prop.error");
var ExposePlugin = /** @class */ (function () {
    function ExposePlugin() {
        this.priority = plugin_1.PluginPriority.High;
    }
    ExposePlugin.prototype.prepare = function (comp, props, children, extras, pluginHost) {
        var _signature = {
            inputs: {},
            outputs: {},
            states: {}
        };
        var expose = (function (signature) {
            if (signature.inputs)
                Object.assign(_signature.inputs, signature.inputs);
            if (signature.outputs)
                Object.assign(_signature.outputs, signature.outputs);
            if (signature.states)
                Object.assign(_signature.states, signature.states);
        });
        var _plugin = pluginHost.plugins.find(basic_plugins_1.isDefaultReactiveRecipientPlugin);
        var _defaultI = function () { return _plugin ? _plugin.defaultInput() : undefined; };
        var _defaultO = function () { return _plugin ? _plugin.defaultOutput() : undefined; };
        var _defaultS = function () { return _plugin ? _plugin.defaultState() : undefined; };
        expose.in = function (name, i) {
            var _a;
            var _ = i || _defaultI();
            expose({ inputs: (_a = {}, _a[name] = _, _a) });
            return _;
        };
        expose.out = function (name, o) {
            var _a;
            var _ = o || _defaultO();
            expose({ outputs: (_a = {}, _a[name] = _, _a) });
            return _;
        };
        expose.state = function (name, s) {
            var _a;
            var _ = s || _defaultS();
            expose({ states: (_a = {}, _a[name] = _, _a) });
            return _;
        };
        extras.expose = expose;
        return function (node) {
            pluginHost.plugins
                .filter(basic_plugins_1.isCompIOPlugin)
                .forEach(function (plugin) {
                return plugin.wire(node, _signature, props, comp, children, pluginHost);
            });
            var _propPlugins = pluginHost.plugins.filter(basic_plugins_1.isCompPropPlugin);
            Object.entries(props).forEach(function (_a) {
                var name = _a[0], prop = _a[1];
                if (!_propPlugins.find(function (plugin) { return plugin.wireProp(name, prop, node, _signature, pluginHost); })) {
                    if (_signature.inputs && name in _signature.inputs)
                        throw new unhandled_signature_prop_error_1.ComponentInputUnrecognizedError(name, props);
                    else if (_signature.outputs && name in _signature.outputs)
                        throw new unhandled_signature_prop_error_1.ComponentOutputUnrecognizedError(name, props);
                }
            });
        };
    };
    return ExposePlugin;
}());
exports.ExposePlugin = ExposePlugin;
//# sourceMappingURL=expose.js.map