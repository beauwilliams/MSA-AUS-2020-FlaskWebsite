"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var core_1 = require("@connectv/core");
var L = __importStar(require("../../../shared/life-cycle"));
var plugin_1 = require("../plugin");
var CompInputSubject = /** @class */ (function (_super) {
    __extends(CompInputSubject, _super);
    function CompInputSubject(inputOptions) {
        if (inputOptions === void 0) { inputOptions = {}; }
        var _this = _super.call(this) || this;
        _this.inputOptions = inputOptions;
        return _this;
    }
    return CompInputSubject;
}(rxjs_1.Subject));
exports.CompInputSubject = CompInputSubject;
var CompInputSubjectPlugin = /** @class */ (function () {
    function CompInputSubjectPlugin() {
        this.priority = plugin_1.PluginPriority.High;
    }
    CompInputSubjectPlugin.prototype.wireProp = function (name, prop, node, signature) {
        if (signature.inputs && name in signature.inputs && signature.inputs[name] instanceof rxjs_1.Subject) {
            var input_1 = signature.inputs[name];
            if (prop instanceof rxjs_1.Observable)
                prop.subscribe(input_1);
            else if (core_1.isPinLike(prop))
                L.attach(prop.to(core_1.sink(function (v) { return input_1.next(v); })), node);
            else {
                L.attach({
                    bind: function () {
                        setImmediate(function () {
                            input_1.next(prop);
                            input_1.complete();
                        });
                    }
                }, node);
            }
            return true;
        }
        return false;
    };
    return CompInputSubjectPlugin;
}());
exports.CompInputSubjectPlugin = CompInputSubjectPlugin;
//# sourceMappingURL=comp-input-subject.js.map