"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@connectv/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var L = __importStar(require("../../../shared/life-cycle"));
var plugin_1 = require("../plugin");
var trackable_1 = __importDefault(require("./trackable"));
var CompOutputObservablePlugin = /** @class */ (function () {
    function CompOutputObservablePlugin() {
        this.priority = plugin_1.PluginPriority.High;
    }
    CompOutputObservablePlugin.prototype.wireProp = function (name, prop, node, signature) {
        if (signature.outputs && name in signature.outputs && signature.outputs[name] instanceof rxjs_1.Observable) {
            var output = signature.outputs[name];
            if (prop instanceof rxjs_1.Subject) {
                var sub_1 = prop;
                L.attach(trackable_1.default(output.pipe(operators_1.tap(function (v) { return sub_1.next(v); }))), node);
                return true;
            }
            else if (core_1.isPinLike(prop)) {
                var src_1;
                if (prop instanceof core_1.Source)
                    src_1 = prop;
                else
                    src_1 = prop.from(core_1.source());
                L.attach(trackable_1.default(output.pipe(operators_1.tap(function (v) { return src_1.send(v); }))), node);
                return true;
            }
            else if (typeof prop == 'function') {
                var func_1 = prop;
                L.attach(trackable_1.default(output.pipe(operators_1.tap(function (v) { return func_1(v); }))), node);
                return true;
            }
        }
        return false;
    };
    return CompOutputObservablePlugin;
}());
exports.CompOutputObservablePlugin = CompOutputObservablePlugin;
//# sourceMappingURL=comp-output-observable.js.map