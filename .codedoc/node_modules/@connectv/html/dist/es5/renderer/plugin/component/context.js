"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var L = __importStar(require("../../../shared/life-cycle"));
var Context = __importStar(require("../../../shared/context"));
var plugin_1 = require("../plugin");
var basic_plugins_1 = require("./basic-plugins");
var rxjs_1 = require("rxjs");
var unhandled_component_context_error_1 = require("./errors/unhandled-component-context.error");
var ContextPlugin = /** @class */ (function () {
    function ContextPlugin() {
        this.priority = plugin_1.PluginPriority.High;
    }
    ContextPlugin.prototype.prepare = function (_, __, ___, extras, pluginHost) {
        var _plugin = pluginHost.plugins.find(basic_plugins_1.isDefaultReactiveRecipientPlugin);
        var _default = function () { return _plugin ? _plugin.defaultContext() : undefined; };
        var map = {};
        var context = function (key, recipient) { return map[key] = map[key] || recipient || _default(); };
        extras.context = context;
        return function (node) {
            var sub = new rxjs_1.Subscription();
            var _ctxPlugins = pluginHost.plugins.filter(basic_plugins_1.isCompContextPlugin);
            L.attach({
                bind: function () {
                    setImmediate(function () {
                        var _ref = node;
                        if (node instanceof DocumentFragment)
                            _ref = L.getLifeCycleMarker(node);
                        var ctx = Context.resolve(_ref, Object.keys(map));
                        Object.entries(map).forEach(function (_a) {
                            var key = _a[0], recipient = _a[1];
                            var value = ctx[key];
                            if (!_ctxPlugins.find(function (p) { return p.wireContext(key, value, recipient, sub, _ref, pluginHost); }))
                                throw new unhandled_component_context_error_1.UnhandledComponentContextError(key, recipient, value);
                        });
                    });
                },
                clear: function () {
                    sub.unsubscribe();
                }
            }, node);
        };
    };
    return ContextPlugin;
}());
exports.ContextPlugin = ContextPlugin;
//# sourceMappingURL=context.js.map