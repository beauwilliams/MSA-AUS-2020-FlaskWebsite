"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@connectv/core");
var core_2 = require("@connectv/core");
var rxjs_1 = require("rxjs");
var plugin_1 = require("../plugin");
var CompInputPin = /** @class */ (function (_super) {
    __extends(CompInputPin, _super);
    function CompInputPin(inputOptions) {
        if (inputOptions === void 0) { inputOptions = {}; }
        var _this = _super.call(this) || this;
        _this.inputOptions = inputOptions;
        return _this;
    }
    return CompInputPin;
}(core_2.Pin));
exports.CompInputPin = CompInputPin;
var CompInputPinPlugin = /** @class */ (function () {
    function CompInputPinPlugin() {
        this.priority = plugin_1.PluginPriority.High;
    }
    CompInputPinPlugin.prototype.wireProp = function (name, prop, _, signature) {
        if (signature.inputs && name in signature.inputs && core_1.isPinLike(signature.inputs[name])) {
            var input = signature.inputs[name];
            if (core_1.isPinLike(prop))
                prop.to(input);
            else if (prop instanceof rxjs_1.Observable)
                core_1.wrap(prop).to(input);
            else
                core_1.value(prop).to(input);
            return true;
        }
        return false;
    };
    return CompInputPinPlugin;
}());
exports.CompInputPinPlugin = CompInputPinPlugin;
//# sourceMappingURL=comp-input-pin.js.map