import { Renderer } from './renderer';
import { isCreatePlugin, isPostCreatePlugin, isPropertyPlugin, isAppendPlugin, isPostRenderPlugin } from './plugin/basic-plugins';
export class ExtensibleRenderer extends Renderer {
    constructor(...plugins) {
        super();
        this.plugins = [];
        for (let i = 0; i < plugins.length; i++) {
            const plugin = plugins[i];
            if (!this.plugins.includes(plugin)) {
                if (plugin.unique !== undefined) {
                    let filter = plugin.unique.bind(plugin);
                    this.plugins = this.plugins.filter(p => !filter(p));
                }
                this.plugins.push(plugin);
            }
        }
        this.plugins.sort((a, b) => a.priority - b.priority);
    }
    plug(...plugins) {
        return new ExtensibleRenderer(...[].concat(this.plugins, plugins));
    }
    create(tag, props, ...children) {
        let _node;
        this.plugins.some(plugin => isCreatePlugin(plugin) && !!(_node = plugin.create(tag, props, children, this)));
        if (!_node)
            _node = super.create(tag, props, ...children);
        this.plugins.filter(isPostCreatePlugin).forEach(plugin => plugin.postCreate(_node, this));
        return _node;
    }
    setprop(prop, target, host) {
        if (this.plugins.some(plugin => isPropertyPlugin(plugin) && plugin.setprop(prop, target, host, this)))
            return;
        super.setprop(prop, target, host);
    }
    append(target, host) {
        if (Array.isArray(target)) {
            target.forEach(_ => this.append(_, host));
        }
        else {
            if (this.plugins.some(plugin => isAppendPlugin(plugin) && plugin.append(target, host, this)))
                return;
            super.append(target, host);
        }
    }
    render(node) {
        let _res = super.render(node);
        let _postRender = this.plugins.filter(isPostRenderPlugin);
        let _do = (_fn) => {
            let children;
            if (_res.target instanceof DocumentFragment)
                children = Array.from(_res.target.childNodes);
            let _R = _fn();
            if (children)
                children.forEach(child => _postRender.forEach(plugin => plugin.postRender(child, this)));
            else
                _postRender.forEach(plugin => plugin.postRender(_res.target, this));
            return _R;
        };
        return {
            target: _res.target,
            on(host) { return _do(() => _res.on(host)); },
            before(ref) { return _do(() => _res.before(ref)); },
            after(ref) { return _do(() => _res.after(ref)); }
        };
    }
}
//# sourceMappingURL=extensible-renderer.js.map