{"version":3,"file":"extensible-renderer.js","sourceRoot":"","sources":["../../../src/renderer/extensible-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropsType } from '../shared/types';\n\nimport { Renderer, ChildType } from './renderer';\nimport { Plugin, PluginHost } from './plugin/plugin';\nimport { isCreatePlugin, isPostCreatePlugin, isPropertyPlugin, isAppendPlugin, isPostRenderPlugin }\n  from './plugin/basic-plugins';\nimport { ToBeRendered, RenderableFunction } from './renderer-like';\n\n\nexport class ExtensibleRenderer<Renderable=RawValue, Tag=string>\n  extends Renderer<Renderable, Tag>\n  implements PluginHost<Renderable, Tag> {\n  readonly plugins: Plugin<Renderable, Tag>[];\n\n  constructor(...plugins: Plugin<Renderable, Tag>[]) {\n    super();\n    this.plugins = [];\n\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n\n      if (!this.plugins.includes(plugin)) {\n        if (plugin.unique !== undefined) {\n          let filter = plugin.unique.bind(plugin);\n          this.plugins = this.plugins.filter(p => !filter(p));\n        }\n  \n        this.plugins.push(plugin);\n      }\n    }\n\n    this.plugins.sort((a, b) => a.priority - b.priority);\n  }\n\n  public plug(...plugins: Plugin<Renderable, Tag>[]) {\n    return new ExtensibleRenderer<Renderable, Tag>(...(<Plugin<Renderable, Tag>[]>[]).concat(this.plugins, plugins));\n  }\n\n  public create(\n      tag: Tag | string,\n      props: PropsType<RawValue | Renderable> | undefined,\n      ...children: ChildType<Renderable>[]\n  ): Node {\n    let _node: Node | undefined;\n    this.plugins.some(plugin => isCreatePlugin(plugin) && !!(_node = plugin.create(tag, props, children, this)));\n\n    if (!_node) _node = super.create(tag, props, ...children);\n    this.plugins.filter(isPostCreatePlugin).forEach(plugin => plugin.postCreate(_node as Node, this));\n    return _node;\n  }\n\n  public setprop(prop: string, target: RawValue | Renderable, host: HTMLElement) {\n    if (this.plugins.some(plugin => isPropertyPlugin(plugin) && plugin.setprop(prop, target, host, this))) return;\n    super.setprop(prop, target, host);\n  }\n\n  public append(target: ChildType<Renderable>, host: Node) {\n    if (Array.isArray(target)) {\n      target.forEach(_ => this.append(_, host));\n    }\n    else {\n      if (this.plugins.some(plugin => isAppendPlugin(plugin) && plugin.append(target, host, this))) return;\n      super.append(target, host);\n    }\n  }\n\n  public render<T extends Node>(node: T | RenderableFunction<Renderable, Tag, T>): ToBeRendered<T> {\n    let _res = super.render(node);\n    let _postRender = this.plugins.filter(isPostRenderPlugin);\n\n    let _do = (_fn: () => T) => {\n      let children;\n      if (_res.target instanceof DocumentFragment) children = Array.from(_res.target.childNodes);\n\n      let _R = _fn();\n\n      if (children)\n        children.forEach(child => _postRender.forEach(plugin => plugin.postRender(child, this)));\n      else\n        _postRender.forEach(plugin => plugin.postRender(_res.target, this));\n      return _R;\n    };\n\n    return {\n      target: _res.target,\n      on(host: Node) { return _do(() => _res.on(host)); },\n      before(ref: Node) { return _do(() => _res.before(ref)); },\n      after(ref: Node) { return _do(() => _res.after(ref)); }\n    }\n  }\n}\n"]}