{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/component/component.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAc,MAAM,WAAW,CAAC;AAGvD,OAAO,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AACtD,OAAO,EAAY,WAAW,EAAE,MAAM,SAAS,CAAC;AAGhD,MAAM,OAAO,eAAe;IAA5B;QAGE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IAiCjC,CAAC;IA/BC,MAAM,CACJ,GAA6C,EAC7C,KAAmD,EACnD,QAAiC,EACjC,IAAiF;QAEjF,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;YAC7B,IAAI,QAAQ,GAAG,GAA2C,CAAC;YAC3D,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,IAAI,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;YACzB,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO;iBACpB,MAAM,CAAC,mBAAmB,CAAC;iBAC3B,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAE3E,IAAI,IAAU,CAAC;YACf,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE;gBACzB,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAa,CAAC,CAAC;gBACzD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAW,CAAC,CAAC;gBAEhC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI;oBACtB,MAAM,CAAC,IAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACtC;;gBAEC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE1D,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC;gBAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjD,OAAO,IAAI,CAAC;SACb;;YACI,OAAO,SAAS,CAAC;IACxB,CAAC;CACF","sourcesContent":["import { PropsType } from '../../../shared/types';\n\nimport { ChildType } from '../../renderer';\nimport { PluginPriority, PluginHost } from '../plugin';\nimport { CreatePlugin } from '../basic-plugins';\n\nimport { isCompProcessPlugin } from './basic-plugins';\nimport { CompType, isCompClass } from './types';\n\n\nexport class ComponentPlugin<Renderable=RawValue, Tag=CompType<Renderable, string> | string>\n  implements CreatePlugin<Renderable | RawValue, Tag | CompType<Renderable, Tag> | string> {\n\n  priority = PluginPriority.High;\n\n  create(\n    tag: string | CompType<Renderable, Tag> | Tag,\n    props: PropsType<RawValue | Renderable> | undefined,\n    children: ChildType<Renderable>[],\n    host: PluginHost<Renderable | RawValue, Tag | CompType<Renderable, Tag> | string>\n  ): Node | undefined {\n    if (typeof tag === 'function') {\n      let compFunc = tag as CompType<Renderable | RawValue, Tag>;\n      let extras = {};\n      let _props = props || {};\n      let post = host.plugins\n        .filter(isCompProcessPlugin)\n        .map(plugin => plugin.prepare(compFunc, _props, children, extras, host));\n\n      let _res: Node;\n      if (isCompClass(compFunc)) {\n        let comp = new compFunc(_props, children, extras as any);\n        _res = comp.render(host as any);\n\n        if (_props && _props._ref)\n          (_props._ref as any).resolve(comp);\n      }\n      else\n        _res = compFunc.apply(extras, [_props, host, children]);\n\n      post.reverse().forEach(p => { if (p) p(_res); });\n\n      return _res;\n    }\n    else return undefined;\n  }\n}"]}