import { sink, isPinLike } from '@connectv/core';
import * as L from '../../../shared/life-cycle';
import { PluginPriority } from '../plugin';
export class PinPlugin {
    constructor() {
        this.priority = PluginPriority.Fallback;
    }
    setprop(prop, target, host) {
        if (isPinLike(target)) {
            L.attach(target.to(sink(v => {
                if (typeof v === 'boolean') {
                    if (v)
                        host.setAttribute(prop, '');
                    else
                        host.removeAttribute(prop);
                }
                else
                    host.setAttribute(prop, (v !== undefined) ? v.toString() : '');
            })), host);
            return true;
        }
        else
            return false;
    }
    append(target, host) {
        if (isPinLike(target)) {
            let node = document.createTextNode('');
            L.attach(target.to(sink(v => node.textContent = (v !== undefined) ? v.toString() : '')), node);
            host.appendChild(node);
            return true;
        }
        else
            return false;
    }
}
//# sourceMappingURL=pin.js.map