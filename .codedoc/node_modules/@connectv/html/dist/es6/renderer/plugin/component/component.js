import { PluginPriority } from '../plugin';
import { isCompProcessPlugin } from './basic-plugins';
import { isCompClass } from './types';
export class ComponentPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    create(tag, props, children, host) {
        if (typeof tag === 'function') {
            let compFunc = tag;
            let extras = {};
            let _props = props || {};
            let post = host.plugins
                .filter(isCompProcessPlugin)
                .map(plugin => plugin.prepare(compFunc, _props, children, extras, host));
            let _res;
            if (isCompClass(compFunc)) {
                let comp = new compFunc(_props, children, extras);
                _res = comp.render(host);
                if (_props && _props._ref)
                    _props._ref.resolve(comp);
            }
            else
                _res = compFunc.apply(extras, [_props, host, children]);
            post.reverse().forEach(p => { if (p)
                p(_res); });
            return _res;
        }
        else
            return undefined;
    }
}
//# sourceMappingURL=component.js.map