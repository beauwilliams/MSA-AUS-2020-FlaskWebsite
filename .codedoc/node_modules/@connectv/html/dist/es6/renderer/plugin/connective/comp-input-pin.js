import { isPinLike, wrap, value } from "@connectv/core";
import { Pin } from "@connectv/core";
import { Observable } from "rxjs";
import { PluginPriority } from "../plugin";
export class CompInputPin extends Pin {
    constructor(inputOptions = {}) {
        super();
        this.inputOptions = inputOptions;
    }
}
export class CompInputPinPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, _, signature) {
        if (signature.inputs && name in signature.inputs && isPinLike(signature.inputs[name])) {
            let input = signature.inputs[name];
            if (isPinLike(prop))
                prop.to(input);
            else if (prop instanceof Observable)
                wrap(prop).to(input);
            else
                value(prop).to(input);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=comp-input-pin.js.map