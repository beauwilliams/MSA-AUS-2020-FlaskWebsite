import { isPinLike, sink } from '@connectv/core';
import * as L from '../../../shared/life-cycle';
import { polyfillCustomEvent } from '../util/custom-event.polyfill';
import { PluginPriority } from "../plugin";
export class CompOutputPinEventsPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wire(node, signature) {
        if (!(node instanceof DocumentFragment) && signature.outputs) {
            polyfillCustomEvent();
            Object.entries(signature.outputs).forEach(([name, output]) => {
                if (isPinLike(output))
                    L.attach(output.to(sink(value => node.dispatchEvent(new CustomEvent(name, { detail: { value } })))), node);
            });
        }
    }
}
//# sourceMappingURL=comp-output-pin-event.js.map