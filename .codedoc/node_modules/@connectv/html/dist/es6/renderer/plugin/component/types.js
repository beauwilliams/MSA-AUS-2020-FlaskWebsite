import { isBindable, isClearable } from "@connectv/core";
export class Component {
    constructor(props, children, _adapter) {
        this.props = props;
        this.children = children;
        this._adapter = _adapter;
        _adapter.track(this);
        this.init();
        let _signature = this.signature();
        if (_signature)
            _adapter.expose(_signature);
    }
    init() { }
    bind() { }
    clear() { }
    signature() { return undefined; }
    track(sub) {
        if (isBindable(sub) || isClearable(sub))
            this._adapter.track(sub);
        else
            this._adapter.track({
                clear() { sub.unsubscribe(); }
            });
    }
}
Component.__CVH_component_class__ = true;
export function isCompClass(comp) {
    return comp.__CVH_component_class__;
}
export function isCompInputWithOptions(whatever) {
    return whatever && whatever.inputOptions;
}
//# sourceMappingURL=types.js.map