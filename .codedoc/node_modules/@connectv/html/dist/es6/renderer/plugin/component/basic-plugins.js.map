{"version":3,"file":"basic-plugins.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/component/basic-plugins.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsB,cAAc,EAAE,MAAM,WAAW,CAAC;AAmB/D,MAAM,UAAU,mBAAmB,CAAkB,QAAiC;IAEpF,OAAO,QAAQ,IAAK,QAAgB,CAAC,OAAO,IAAI,OAAQ,QAAgB,CAAC,OAAO,IAAI,UAAU,CAAC;AACjG,CAAC;AAcD,MAAM,UAAU,cAAc,CAAkB,QAAiC;IAE/E,OAAO,QAAQ,IAAK,QAAgB,CAAC,IAAI,IAAI,OAAQ,QAAgB,CAAC,IAAI,IAAI,UAAU,CAAC;AAC3F,CAAC;AAeD,MAAM,UAAU,gBAAgB,CAAkB,QAAiC;IAEjF,OAAO,QAAQ,IAAK,QAAgB,CAAC,QAAQ,IAAI,OAAQ,QAAgB,CAAC,QAAQ,IAAI,UAAU,CAAC;AACnG,CAAC;AAgBD,MAAM,UAAU,mBAAmB,CAAkB,QAAiC;IAEpF,OAAO,QAAQ,IAAK,QAAgB,CAAC,WAAW,IAAI,OAAQ,QAAgB,CAAC,WAAW,IAAI,UAAU,CAAC;AACzG,CAAC;AAGD,MAAM,OAAgB,8BAA8B;IAApD;QAWE,aAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;IACrC,CAAC;IAVC,MAAM,CAAC,MAA+B;QACpC,OAAO,MAAM,YAAY,8BAA8B,CAAC;IAC1D,CAAC;CAQF;AAGD,MAAM,UAAU,gCAAgC,CAAkB,QAAiC;IAEjG,OAAO,QAAQ,YAAY,8BAA8B,CAAC;AAC5D,CAAC","sourcesContent":["import { Plugin, PluginHost, PluginPriority } from '../plugin';\nimport { PropsType } from '../../../shared/types';\nimport { ChildType } from '../../renderer';\nimport { CompType, ComponentSignature } from './types';\nimport { Subscription } from 'rxjs';\n\n\nexport interface CompProcessPlugin<Renderable=RawValue, Tag=string>\n  extends Plugin<Renderable | RawValue, Tag | string | CompType<Renderable, Tag>> {\n  prepare(\n    tag: CompType<Renderable | RawValue, Tag>,\n    props: PropsType<RawValue | Renderable> | undefined,\n    children: ChildType<Renderable>[],\n    extra: {[name: string]: any},\n    pluginHost: PluginHost<Renderable, Tag>,\n  ): (result: Node) => void;\n}\n\n\nexport function isCompProcessPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is CompProcessPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).prepare && typeof (whatever as any).prepare == 'function';\n}\n\n\nexport interface CompIOPlugin<Renderable=RawValue, Tag=string>\n  extends Plugin<Renderable | RawValue, Tag | string | CompType<Renderable, Tag>> {\n  wire(node: Node, signature: ComponentSignature,\n      props: PropsType<RawValue | Renderable> | undefined,\n      tag: CompType<Renderable, Tag>,\n      children: (RawValue | Renderable | Node)[],\n      pluginHost: PluginHost<Renderable, Tag>,\n  ): void;\n}\n\n\nexport function isCompIOPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is CompIOPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).wire && typeof (whatever as any).wire == 'function';\n}\n\n\nexport interface CompPropPlugin<Renderable=RawValue, Tag=string>\n  extends Plugin<Renderable | RawValue, Tag | string | CompType<Renderable, Tag>> {\n  wireProp(\n    name: string,\n    prop: any,\n    node: Node,\n    signature: ComponentSignature,\n    pluginHost: PluginHost<Renderable, Tag>,\n  ): boolean;\n}\n\n\nexport function isCompPropPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is CompPropPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).wireProp && typeof (whatever as any).wireProp == 'function';\n}\n\n\nexport interface CompContextPlugin<Renderable=RawValue, Tag=string>\n  extends Plugin<Renderable | RawValue, Tag | string | CompType<Renderable, Tag>> {\n  wireContext(\n    name: string,\n    value: any,\n    recipient: any,\n    subReference: Subscription,\n    node: Node,\n    pluginHost: PluginHost<Renderable, Tag>,\n  ): boolean;\n}\n\n\nexport function isCompContextPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is CompContextPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).wireContext && typeof (whatever as any).wireContext == 'function';\n}\n\n\nexport abstract class DefaultReactiveRecipientPlugin<Renderable=RawValue, Tag=string>\n  implements Plugin<Renderable | RawValue, Tag | string | CompType<Renderable, Tag>> {\n  unique(plugin: Plugin<Renderable, Tag>) {\n    return plugin instanceof DefaultReactiveRecipientPlugin;\n  }\n\n  abstract defaultInput(): any;\n  abstract defaultOutput(): any;\n  abstract defaultState(): any;\n  abstract defaultContext(): any;\n\n  priority = PluginPriority.Fallback;\n}\n\n\nexport function isDefaultReactiveRecipientPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is DefaultReactiveRecipientPlugin<Renderable, Tag> {\n  return whatever instanceof DefaultReactiveRecipientPlugin;\n}"]}