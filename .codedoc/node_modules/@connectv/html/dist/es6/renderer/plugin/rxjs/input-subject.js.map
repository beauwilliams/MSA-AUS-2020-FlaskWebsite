{"version":3,"file":"input-subject.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/rxjs/input-subject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAChE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAGrC,OAAO,KAAK,CAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAE3C,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAGnE,MAAM,OAAO,kBAAkB;IAA/B;QAwBE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IACjC,CAAC;IAxBC,OAAO,CAAC,IAAY,EAAE,MAA2C,EAAE,IAAiB;QAClF,IAAI,IAAI,KAAK,QAAQ,IAAI,CACnB,IAAI,YAAY,gBAAgB;YAChC,IAAI,YAAY,mBAAmB,CACpC,IAAI,MAAM,YAAY,eAAe,EAAE;YAE1C,IAAI,GAAG,GAAG,IAAI,YAAY,EAAE,CAAC;YAE7B,CAAC,CAAC,MAAM,CAAuB;gBAC7B,IAAI;oBACF,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC;yBAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC3D,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzD,CAAC;gBACD,KAAK,KAAK,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;aAC/B,EAAE,IAAI,CAAC,CAAC;YAGT,OAAO,IAAI,CAAC;SACb;;YACI,OAAO,KAAK,CAAC;IACpB,CAAC;CAGF","sourcesContent":["import { BehaviorSubject, fromEvent, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Bindable, Clearable } from '@connectv/core';\n\nimport * as L from '../../../shared/life-cycle';\n\nimport { PluginPriority } from '../plugin';\nimport { PropertyPlugin } from '../basic-plugins';\nimport { setInputValue, getInputValue } from '../util/input-value';\n\n\nexport class InputSubjectPlugin<R, T> implements PropertyPlugin<BehaviorSubject<any> | R, T> {\n  setprop(prop: string, target: RawValue | R | BehaviorSubject<any>, host: HTMLElement): boolean {\n    if (prop === '_state' && (\n          host instanceof HTMLInputElement ||\n          host instanceof HTMLTextAreaElement\n        ) && target instanceof BehaviorSubject) {\n\n      let sub = new Subscription();\n\n      L.attach(<Bindable & Clearable>{\n        bind() {\n          sub.add(fromEvent(host, 'input')\n            .pipe(map(() => getInputValue(host))).subscribe(target));\n          sub.add(target.subscribe(v => setInputValue(host, v)));\n        },\n        clear() { sub.unsubscribe(); },\n      }, host);\n\n\n      return true;\n    }\n    else return false;\n  }\n\n  priority = PluginPriority.High;\n}"]}