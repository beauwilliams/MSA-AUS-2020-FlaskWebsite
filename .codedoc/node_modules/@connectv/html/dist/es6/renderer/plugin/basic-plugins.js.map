{"version":3,"file":"basic-plugins.js","sourceRoot":"","sources":["../../../../src/renderer/plugin/basic-plugins.ts"],"names":[],"mappings":"AAaA,MAAM,UAAU,cAAc,CAAkB,QAAiC;IAE/E,OAAO,QAAQ,IAAK,QAAgB,CAAC,MAAM,IAAI,OAAQ,QAAgB,CAAC,MAAM,IAAI,UAAU,CAAC;AAC/F,CAAC;AAQD,MAAM,UAAU,kBAAkB,CAAkB,QAAiC;IAEnF,OAAO,QAAQ,IAAK,QAAgB,CAAC,UAAU,IAAI,OAAQ,QAAgB,CAAC,UAAU,IAAI,UAAU,CAAC;AACvG,CAAC;AASD,MAAM,UAAU,gBAAgB,CAAkB,QAAiC;IAEjF,OAAO,QAAQ,IAAK,QAAgB,CAAC,OAAO,IAAI,OAAQ,QAAgB,CAAC,OAAO,IAAI,UAAU,CAAC;AACjG,CAAC;AASD,MAAM,UAAU,cAAc,CAAkB,QAAiC;IAE/E,OAAO,QAAQ,IAAK,QAAgB,CAAC,MAAM,IAAI,OAAQ,QAAgB,CAAC,MAAM,IAAI,UAAU,CAAC;AAC/F,CAAC;AAQD,MAAM,UAAU,kBAAkB,CAAkB,QAAiC;IAEnF,OAAO,QAAQ,IAAK,QAAgB,CAAC,UAAU,IAAI,OAAQ,QAAgB,CAAC,UAAU,IAAI,UAAU,CAAC;AACvG,CAAC","sourcesContent":["import { PropsType } from '../../shared/types';\n\nimport { ChildType } from '../renderer';\nimport { Plugin, PluginHost } from './plugin';\n\n\nexport interface CreatePlugin<Renderable=RawValue, Tag=string> extends Plugin<Renderable, Tag> {\n  create(tag: string | Tag, props: PropsType<RawValue | Renderable> | undefined,\n    children: ChildType<Renderable>[],\n    pluginHost: PluginHost<Renderable, Tag>): Node | undefined;\n}\n\n\nexport function isCreatePlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is CreatePlugin<Renderable, Tag> {\n  return whatever && (whatever as any).create && typeof (whatever as any).create == 'function';\n}\n\n\nexport interface PostCreatePlugin<Renderable=RawValue, Tag=string> extends Plugin<Renderable, Tag> {\n  postCreate(node: Node, pluginHost: PluginHost<Renderable, Tag>): void;\n}\n\n\nexport function isPostCreatePlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is PostCreatePlugin<Renderable, Tag> {\n  return whatever && (whatever as any).postCreate && typeof (whatever as any).postCreate == 'function';\n}\n\n\nexport interface PropertyPlugin<Renderable=RawValue, Tag=string> extends Plugin<Renderable, Tag> {\n  setprop(prop: string, target: Renderable | RawValue, host: HTMLElement,\n          pluginHost: PluginHost<Renderable, Tag>): boolean;\n}\n\n\nexport function isPropertyPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is PropertyPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).setprop && typeof (whatever as any).setprop == 'function';\n}\n\n\nexport interface AppendPlugin<Renderable=RawValue, Tag=String> extends Plugin<Renderable, Tag> {\n  append(target: RawValue | Renderable | Node | (RawValue | Renderable | Node)[], host: Node,\n        pluginHost: PluginHost<Renderable, Tag>): boolean;\n}\n\n\nexport function isAppendPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is AppendPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).append && typeof (whatever as any).append == 'function';\n}\n\n\nexport interface PostRenderPlugin<Renderable=RawValue, Tag=string> extends Plugin<Renderable, Tag> {\n  postRender(node: Node, pluginHost: PluginHost<Renderable, Tag>): void;\n}\n\n\nexport function isPostRenderPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>):\n  whatever is PostRenderPlugin<Renderable, Tag> {\n  return whatever && (whatever as any).postRender && typeof (whatever as any).postRender == 'function';\n}\n"]}