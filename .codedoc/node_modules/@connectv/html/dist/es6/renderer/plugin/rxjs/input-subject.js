import { BehaviorSubject, fromEvent, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import * as L from '../../../shared/life-cycle';
import { PluginPriority } from '../plugin';
import { setInputValue, getInputValue } from '../util/input-value';
export class InputSubjectPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    setprop(prop, target, host) {
        if (prop === '_state' && (host instanceof HTMLInputElement ||
            host instanceof HTMLTextAreaElement) && target instanceof BehaviorSubject) {
            let sub = new Subscription();
            L.attach({
                bind() {
                    sub.add(fromEvent(host, 'input')
                        .pipe(map(() => getInputValue(host))).subscribe(target));
                    sub.add(target.subscribe(v => setInputValue(host, v)));
                },
                clear() { sub.unsubscribe(); },
            }, host);
            return true;
        }
        else
            return false;
    }
}
//# sourceMappingURL=input-subject.js.map