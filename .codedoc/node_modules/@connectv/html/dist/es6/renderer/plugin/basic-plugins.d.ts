import { PropsType } from '../../shared/types';
import { ChildType } from '../renderer';
import { Plugin, PluginHost } from './plugin';
export interface CreatePlugin<Renderable = RawValue, Tag = string> extends Plugin<Renderable, Tag> {
    create(tag: string | Tag, props: PropsType<RawValue | Renderable> | undefined, children: ChildType<Renderable>[], pluginHost: PluginHost<Renderable, Tag>): Node | undefined;
}
export declare function isCreatePlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>): whatever is CreatePlugin<Renderable, Tag>;
export interface PostCreatePlugin<Renderable = RawValue, Tag = string> extends Plugin<Renderable, Tag> {
    postCreate(node: Node, pluginHost: PluginHost<Renderable, Tag>): void;
}
export declare function isPostCreatePlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>): whatever is PostCreatePlugin<Renderable, Tag>;
export interface PropertyPlugin<Renderable = RawValue, Tag = string> extends Plugin<Renderable, Tag> {
    setprop(prop: string, target: Renderable | RawValue, host: HTMLElement, pluginHost: PluginHost<Renderable, Tag>): boolean;
}
export declare function isPropertyPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>): whatever is PropertyPlugin<Renderable, Tag>;
export interface AppendPlugin<Renderable = RawValue, Tag = String> extends Plugin<Renderable, Tag> {
    append(target: RawValue | Renderable | Node | (RawValue | Renderable | Node)[], host: Node, pluginHost: PluginHost<Renderable, Tag>): boolean;
}
export declare function isAppendPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>): whatever is AppendPlugin<Renderable, Tag>;
export interface PostRenderPlugin<Renderable = RawValue, Tag = string> extends Plugin<Renderable, Tag> {
    postRender(node: Node, pluginHost: PluginHost<Renderable, Tag>): void;
}
export declare function isPostRenderPlugin<Renderable, Tag>(whatever: Plugin<Renderable, Tag>): whatever is PostRenderPlugin<Renderable, Tag>;
