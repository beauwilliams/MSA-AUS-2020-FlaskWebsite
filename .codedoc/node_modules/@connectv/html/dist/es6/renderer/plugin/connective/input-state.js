import { State, sink, wrap, map } from '@connectv/core';
import { fromEvent } from 'rxjs';
import * as L from '../../../shared/life-cycle';
import { PluginPriority } from '../plugin';
import { setInputValue, getInputValue } from '../util/input-value';
export class InputStatePlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    setprop(prop, target, host) {
        if (prop === '_state' && (host instanceof HTMLInputElement ||
            host instanceof HTMLTextAreaElement ||
            host instanceof HTMLSelectElement) && target instanceof State) {
            L.attach(wrap(fromEvent(host, 'input'))
                .to(map(() => getInputValue(host)))
                .to(target)
                .to(sink(v => setInputValue(host, v))), host);
            return true;
        }
        else
            return false;
    }
}
//# sourceMappingURL=input-state.js.map