import { Observable } from 'rxjs';
import * as L from '../../../shared/life-cycle';
import * as _ClassListFixed from '../../../shared/class-list-fixed';
import { PluginPriority } from '../plugin';
export class ObservableClassPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    setprop(prop, target, host) {
        if (prop === 'class' && target instanceof Observable) {
            let sub;
            L.attach({
                bind() {
                    sub = target.subscribe(v => {
                        let classes = (v !== undefined) ? v.toString() : '';
                        const fixed = _ClassListFixed.get(host);
                        if (fixed.length > 0)
                            classes += ' ' + fixed.join(' ');
                        host.setAttribute('class', classes);
                    });
                },
                clear() { sub.unsubscribe(); },
            }, host);
            return true;
        }
        else
            return false;
    }
}
//# sourceMappingURL=observable-class.js.map