{"version":3,"file":"pin.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/connective/pin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAW,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE1D,OAAO,KAAK,CAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAI3C,MAAM,OAAO,SAAS;IAAtB;QAIE,aAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;IA4BrC,CAAC;IA1BC,OAAO,CAAC,IAAY,EAAE,MAA8B,EAAE,IAAiB;QACrE,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;YACrB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAC1B,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;oBAC1B,IAAI,CAAC;wBAAE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;wBAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;iBACjC;;oBAEC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;YAClE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACX,OAAO,IAAI,CAAC;SACb;;YACI,OAAO,KAAK,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,MAAyE,EAAE,IAAU;QAC1F,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;YACrB,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC/F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEvB,OAAO,IAAI,CAAC;SACb;;YAEC,OAAO,KAAK,CAAC;IACjB,CAAC;CACF","sourcesContent":["import { sink, PinLike, isPinLike } from '@connectv/core';\n\nimport * as L from '../../../shared/life-cycle';\n\nimport { PluginPriority } from '../plugin';\nimport { PropertyPlugin, AppendPlugin } from '../basic-plugins';\n\n\nexport class PinPlugin<R=never, T=string>\n  implements PropertyPlugin<R | PinLike, T>,\n              AppendPlugin<R | PinLike, T> {\n\n  priority = PluginPriority.Fallback;\n\n  setprop(prop: string, target: RawValue | R | PinLike, host: HTMLElement): boolean {\n    if (isPinLike(target)) {\n      L.attach(target.to(sink(v => {\n        if (typeof v === 'boolean') {\n          if (v) host.setAttribute(prop, '');\n          else host.removeAttribute(prop);\n        }\n        else\n          host.setAttribute(prop, (v !== undefined) ? v.toString() : '')\n      })), host);\n      return true;\n    }\n    else return false;\n  }\n\n  append(target: RawValue | R | PinLike | Node | (RawValue | R | PinLike | Node)[], host: Node): boolean {\n    if (isPinLike(target)) {\n      let node = document.createTextNode('');\n      L.attach(target.to(sink(v => node.textContent = (v !== undefined) ? v.toString() : '')), node);\n      host.appendChild(node);\n      \n      return true;\n    }\n    else\n      return false;\n  }\n}\n"]}