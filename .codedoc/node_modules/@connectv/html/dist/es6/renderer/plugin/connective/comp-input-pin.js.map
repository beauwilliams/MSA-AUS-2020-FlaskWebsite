{"version":3,"file":"comp-input-pin.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/connective/comp-input-pin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAW,IAAI,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACjE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAK3C,MAAM,OAAO,YAAa,SAAQ,GAAG;IACnC,YAAqB,eAAsC,EAAE;QAC3D,KAAK,EAAE,CAAC;QADW,iBAAY,GAAZ,YAAY,CAA4B;IAE7D,CAAC;CACF;AAGD,MAAM,OAAO,kBAAkB;IAA/B;QAeE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IACjC,CAAC;IAdC,QAAQ,CAAC,IAAY,EAAE,IAAS,EAAE,CAAO,EAAE,SAA6B;QACtE,IAAI,SAAS,CAAC,MAAM,IAAI,IAAI,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;YACrF,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAY,CAAC;YAC9C,IAAI,SAAS,CAAC,IAAI,CAAC;gBAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;iBAC/B,IAAI,IAAI,YAAY,UAAU;gBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;gBACrD,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YAE3B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAGF","sourcesContent":["import { isPinLike, PinLike, wrap, value } from \"@connectv/core\";\nimport { Pin } from \"@connectv/core\";\nimport { Observable } from \"rxjs\";\n\nimport { PluginPriority } from \"../plugin\";\nimport { CompInputWithOptions, CompInputOptions, CompType, ComponentSignature } from \"../component/types\";\nimport { CompPropPlugin } from \"../component/basic-plugins\";\n\n\nexport class CompInputPin extends Pin implements CompInputWithOptions<any> {\n  constructor(readonly inputOptions: CompInputOptions<any> = {}) {\n    super();\n  }\n}\n\n\nexport class CompInputPinPlugin<Renderable=RawValue, Tag=CompType<Renderable | string> | string>\nimplements CompPropPlugin<Renderable, Tag> {\n  wireProp(name: string, prop: any, _: Node, signature: ComponentSignature) {\n    if (signature.inputs && name in signature.inputs && isPinLike(signature.inputs[name])) {\n      let input = signature.inputs[name] as PinLike;\n      if (isPinLike(prop)) prop.to(input);\n      else if (prop instanceof Observable) wrap(prop).to(input);\n      else value(prop).to(input);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  priority = PluginPriority.High;\n}\n"]}