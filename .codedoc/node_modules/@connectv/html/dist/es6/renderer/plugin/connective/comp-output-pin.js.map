{"version":3,"file":"comp-output-pin.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/connective/comp-output-pin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAW,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAC1E,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE/B,OAAO,KAAK,CAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAK3C,MAAM,OAAO,mBAAmB;IAAhC;QAEE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IAwBjC,CAAC;IAtBC,QAAQ,CAAC,IAAY,EAAE,IAAS,EAAE,IAAU,EAAE,SAA6B;QACzE,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE;YACxF,IAAI,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAY,CAAC;YAChD,IAAI,GAAG,GAAG,CAAC,MAAM,YAAY,MAAM,CAAC,CAAA,CAAC,CAAA,MAAM,CAAA,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAY,CAAC;YAC5E,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAEpB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACnB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gBACb,OAAO,IAAI,CAAC;aACb;iBACI,IAAI,IAAI,YAAY,OAAO,EAAE;gBAChC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC;aACb;iBACI,IAAI,OAAO,IAAI,IAAI,UAAU,EAAE;gBAClC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAC3C,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import { isPinLike, PinLike, Source, source, sink } from \"@connectv/core\";\nimport { Subject } from \"rxjs\";\n\nimport * as L from \"../../../shared/life-cycle\";\n\nimport { PluginPriority } from \"../plugin\";\nimport { CompType, ComponentSignature } from \"../component/types\";\nimport { CompPropPlugin } from \"../component/basic-plugins\";\n\n\nexport class CompOutputPinPlugin<Renderable=RawValue, Tag=CompType<Renderable | string> | string>\nimplements CompPropPlugin<Renderable, Tag> {\n  priority = PluginPriority.High;\n\n  wireProp(name: string, prop: any, node: Node, signature: ComponentSignature) {\n    if (signature.outputs && name in signature.outputs && isPinLike(signature.outputs[name])) {\n      let output = signature.outputs[name] as PinLike;\n      let src = (output instanceof Source)?output:(output.to(source()) as Source);\n      L.attach(src, node);\n\n      if (isPinLike(prop)) {\n        src.to(prop);\n        return true;\n      }\n      else if (prop instanceof Subject) {\n        L.attach(src.to(sink(v => prop.next(v))), node);\n        return true;\n      }\n      else if (typeof prop == 'function') {\n        L.attach(src.to(sink(v => prop(v))), node);\n        return true;\n      }\n    }\n\n    return false;\n  }\n}"]}