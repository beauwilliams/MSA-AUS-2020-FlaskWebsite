{"version":3,"file":"input-value.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/util/input-value.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,aAAa,CAAC,EAA8D;IAC1F,IAAI,EAAE,YAAY,gBAAgB,EAAE;QAClC,IAAI,EAAE,CAAC,IAAI,KAAK,QAAQ;YAAE,OAAO,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;aACjD,IAAI,EAAE,CAAC,IAAI,KAAK,UAAU;YAAE,OAAO,EAAE,CAAC,OAAO,CAAC;aAC9C,IAAI,EAAE,CAAC,IAAI,KAAK,OAAO,IAAK,EAAU,CAAC,MAAM;YAAE,OAAQ,EAAU,CAAC,MAAM,CAAC;;YACzE,OAAO,EAAE,CAAC,KAAK,CAAC;KACtB;SACI,IAAI,EAAE,YAAY,iBAAiB,EAAE;QACxC,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ;gBACrB,IAAI,CAAC,IAAI,CAAE,GAAW,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;SAC3D;QAED,IAAI,CAAC,EAAE,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;;YAC5B,OAAO,IAAI,CAAC;KAClB;;QACI,OAAO,EAAE,CAAC,KAAK,CAAC;AACvB,CAAC;AAGD,MAAM,UAAU,aAAa,CAAC,EAA8D,EAAE,KAAU;IACtG,IAAI,EAAE,YAAY,gBAAgB,EAAE;QAClC,IAAI,EAAE,CAAC,IAAI,KAAK,UAAU;YAAE,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC;aAC5C,IAAI,EAAE,CAAC,IAAI,KAAK,OAAO;YAC1B,EAAE,CAAC,OAAO,GAAG,CAAE,EAAU,CAAC,MAAM,IAAK,EAAU,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC;;YACrF,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;KACvB;SACI,IAAI,EAAE,YAAY,iBAAiB,EAAE;QACxC,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;YAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,GAAG,EAAE;gBACP,GAAG,CAAC,QAAQ,GAAG,CACb,CAAE,GAAW,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAE,GAAW,CAAC,MAAM,CAAC,CAAC;uBACvD,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;uBACtC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAC1C,CAAC;aACH;SACF;KACF;;QACI,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;AACxB,CAAC","sourcesContent":["export function getInputValue(el: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) {\n  if (el instanceof HTMLInputElement) {\n    if (el.type === 'number') return parseFloat(el.value);\n    else if (el.type === 'checkbox') return el.checked;\n    else if (el.type === 'radio' && (el as any)._value) return (el as any)._value;\n    else return el.value;\n  }\n  else if (el instanceof HTMLSelectElement) {\n    let _res = [];\n    for (let i = 0; i < el.options.length; i++) {\n      let opt = el.options.item(i);\n      if (opt && opt.selected)\n        _res.push((opt as any)._value || opt.value || opt.text);\n    }\n\n    if (!el.multiple) return _res[0];\n    else return _res;\n  }\n  else return el.value;\n}\n\n\nexport function setInputValue(el: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement, value: any) {\n  if (el instanceof HTMLInputElement) {\n    if (el.type === 'checkbox') el.checked = !!value;\n    else if (el.type === 'radio')\n      el.checked = ((el as any)._value && (el as any)._value === value) || value === el.value;\n    else el.value = value;\n  }\n  else if (el instanceof HTMLSelectElement) {\n    let val = value;\n    if (!Array.isArray(val)) val = [val];\n\n    for (let i = 0; i < el.options.length; i++) {\n      let opt = el.options.item(i);\n      if (opt) {\n        opt.selected = (\n          ((opt as any)._value && val.includes((opt as any)._value))\n          || (opt.value && val.includes(opt.value))\n          || (!opt.value && val.includes(opt.text))\n        );\n      }\n    }\n  }\n  else el.value = value;\n}"]}