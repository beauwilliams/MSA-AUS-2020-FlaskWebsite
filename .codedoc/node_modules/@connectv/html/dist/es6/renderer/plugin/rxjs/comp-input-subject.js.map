{"version":3,"file":"comp-input-subject.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/rxjs/comp-input-subject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAY,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAE3D,OAAO,KAAK,CAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAK3C,MAAM,OAAO,gBAAoB,SAAQ,OAAU;IACjD,YAAqB,eAAoC,EAAE;QACzD,KAAK,EAAE,CAAC;QADW,iBAAY,GAAZ,YAAY,CAA0B;IAE3D,CAAC;CACF;AAGD,MAAM,OAAO,sBAAsB;IAAnC;QAwBE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IACjC,CAAC;IAvBC,QAAQ,CAAC,IAAY,EAAE,IAAS,EAAE,IAAU,EAAE,SAA6B;QACzE,IAAI,SAAS,CAAC,MAAM,IAAI,IAAI,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,EAAE;YAC7F,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAiB,CAAC;YACnD,IAAI,IAAI,YAAY,UAAU;gBAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBACjD,IAAI,SAAS,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;iBACvE;gBACH,CAAC,CAAC,MAAM,CAAW;oBACjB,IAAI;wBACF,YAAY,CAAC,GAAG,EAAE;4BAChB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACjB,KAAK,CAAC,QAAQ,EAAE,CAAC;wBACnB,CAAC,CAAC,CAAA;oBACJ,CAAC;iBACF,EAAE,IAAI,CAAC,CAAC;aACV;YAED,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAGF","sourcesContent":["import { Subject, Observable } from \"rxjs\";\nimport { isPinLike, Bindable, sink } from \"@connectv/core\";\n\nimport * as L from \"../../../shared/life-cycle\";\n\nimport { PluginPriority } from \"../plugin\";\nimport { CompInputOptions, CompType, ComponentSignature, CompInputWithOptions } from \"../component/types\";\nimport { CompPropPlugin } from \"../component/basic-plugins\";\n\n\nexport class CompInputSubject<T> extends Subject<T> implements CompInputWithOptions<T> {\n  constructor(readonly inputOptions: CompInputOptions<T> = {}) {\n    super();\n  }\n}\n\n\nexport class CompInputSubjectPlugin<Renderable=RawValue, Tag=CompType<Renderable | string> | string>\nimplements CompPropPlugin<Renderable, Tag> {\n  wireProp(name: string, prop: any, node: Node, signature: ComponentSignature) {\n    if (signature.inputs && name in signature.inputs && signature.inputs[name] instanceof Subject) {\n      let input = signature.inputs[name] as Subject<any>;\n      if (prop instanceof Observable) prop.subscribe(input);\n      else if (isPinLike(prop)) L.attach(prop.to(sink(v => input.next(v))), node);\n      else {\n        L.attach(<Bindable>{\n          bind() {\n            setImmediate(() => {\n              input.next(prop);\n              input.complete();\n            })\n          }\n        }, node);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  priority = PluginPriority.High;\n}\n\n"]}