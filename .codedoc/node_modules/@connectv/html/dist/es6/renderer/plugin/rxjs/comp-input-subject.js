import { Subject, Observable } from "rxjs";
import { isPinLike, sink } from "@connectv/core";
import * as L from "../../../shared/life-cycle";
import { PluginPriority } from "../plugin";
export class CompInputSubject extends Subject {
    constructor(inputOptions = {}) {
        super();
        this.inputOptions = inputOptions;
    }
}
export class CompInputSubjectPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, node, signature) {
        if (signature.inputs && name in signature.inputs && signature.inputs[name] instanceof Subject) {
            let input = signature.inputs[name];
            if (prop instanceof Observable)
                prop.subscribe(input);
            else if (isPinLike(prop))
                L.attach(prop.to(sink(v => input.next(v))), node);
            else {
                L.attach({
                    bind() {
                        setImmediate(() => {
                            input.next(prop);
                            input.complete();
                        });
                    }
                }, node);
            }
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=comp-input-subject.js.map