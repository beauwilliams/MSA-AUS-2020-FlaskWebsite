{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/component/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,UAAU,EAAE,WAAW,EAAW,MAAM,gBAAgB,CAAC;AAQvF,MAAM,OAAgB,SAAS;IAG7B,YACY,KAAuC,EACvC,QAAiC,EACnC,QAAuB;QAFrB,UAAK,GAAL,KAAK,CAAkC;QACvC,aAAQ,GAAR,QAAQ,CAAyB;QACnC,aAAQ,GAAR,QAAQ,CAAe;QAE/B,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAClC,IAAI,UAAU;YAAE,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IAES,IAAI,KAAI,CAAC;IACZ,IAAI,KAAI,CAAC;IACT,KAAK,KAAI,CAAC;IACP,SAAS,KAAqC,OAAO,SAAS,CAAC,CAAC,CAAC;IAIjE,KAAK,CAAC,GAA0C;QACxD,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC;YACrC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;YAEzB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAClB,KAAK,KAAK,GAAG,CAAC,WAAW,EAAE,CAAA,CAAC,CAAC;aAC9B,CAAC,CAAC;IACP,CAAC;;AA5BM,iCAAuB,GAAG,IAAI,CAAC;AA+CxC,MAAM,UAAU,WAAW,CAAkB,IAA+B;IAC1E,OAAQ,IAAY,CAAC,uBAAuB,CAAC;AAC/C,CAAC;AA+CD,MAAM,UAAU,sBAAsB,CAAI,QAAa;IAErD,OAAO,QAAQ,IAAI,QAAQ,CAAC,YAAY,CAAC;AAC3C,CAAC","sourcesContent":["import { Bindable, Clearable, isBindable, isClearable, PinLike } from \"@connectv/core\";\nimport { Unsubscribable } from \"rxjs\";\n\nimport { PropsType } from \"../../../shared/types\";\nimport { ChildType } from \"../../renderer\";\nimport { RendererLike } from \"../../renderer-like\";\n\n\nexport abstract class Component<Renderable=RawValue, Tag=string> {\n  static __CVH_component_class__ = true;\n\n  constructor(\n    protected props: PropsType<RawValue | Renderable>,\n    protected children: ChildType<Renderable>[],\n    private _adapter: ComponentThis,\n  ) {\n    _adapter.track(this);\n    this.init();\n\n    let _signature = this.signature();\n    if (_signature) _adapter.expose(_signature);\n  }\n\n  protected init() {}\n  public bind() {}\n  public clear() {}\n  protected signature(): ComponentSignature | undefined { return undefined; }\n  public abstract render(\n    renderer: RendererLike<Renderable | RawValue, Tag | string | CompType<Renderable | RawValue, Tag>>): Node;\n\n  protected track(sub: Unsubscribable | Bindable | Clearable) {\n    if (isBindable(sub) || isClearable(sub))\n      this._adapter.track(sub);\n    else\n      this._adapter.track({\n        clear() { sub.unsubscribe() }\n      });\n  }\n}\n\n\nexport type CompClass<Renderable=RawValue, Tag=string> = {\n  new(\n    props: PropsType<RawValue | Renderable>,\n    children: ChildType<Renderable>[],\n    _adapter: ComponentThis,\n  ): Component<Renderable, Tag>\n};\n\nexport type CompFunc<Renderable=RawValue, Tag=string> = (\n  props: PropsType<RawValue | Renderable>,\n  renderer: RendererLike<Renderable | RawValue, Tag | string | CompType<Renderable, Tag>>,\n  children?: ChildType<Renderable>[]) => Node;\n\nexport type CompType<Renderable=RawValue, Tag=string> = CompClass<Renderable, Tag> | CompFunc<Renderable, Tag>;\n\nexport function isCompClass<Renderable, Tag>(comp: CompType<Renderable, Tag>): comp is CompClass<Renderable, Tag> {\n  return (comp as any).__CVH_component_class__;\n}\n\n\nexport interface CompInSignature {\n  inputs: {[name: string]: any};\n  outputs?: {[name: string]: any};\n  states?: {[name: string]: any};\n}\n\nexport interface CompOutSignature {\n  inputs?: {[name: string]: any};\n  outputs: {[name: string]: any};\n  states?: {[name: string]: any};\n}\n\nexport interface CompStateSignature {\n  inputs?: {[name: string]: any};\n  outputs?: {[name: string]: any};\n  states: {[name: string]: any};\n}\n\nexport type ComponentSignature = CompInSignature | CompOutSignature | CompStateSignature;\n\n\ninterface CompInputOptionsRequired {\n  required: true;\n  default?: never;\n}\n\ninterface CompInputOptionsNotRequired<T> {\n  required: false;\n  default?: T;\n}\n\nexport type CompInputOptionsSpecified<T> = CompInputOptionsNotRequired<T> | CompInputOptionsRequired;\n\ninterface CompInputOptionsNotSpecified<T> {\n  default?: T;\n}\n\nexport type CompInputOptions<T> = CompInputOptionsSpecified<T> | CompInputOptionsNotSpecified<T>;\n\nexport interface CompInputWithOptions<T> {\n  inputOptions: CompInputOptions<T>;\n}\n\n\nexport function isCompInputWithOptions<T>(whatever: any):\n  whatever is CompInputWithOptions<T> {\n  return whatever && whatever.inputOptions;\n}\n\n\nexport type ExposeFunction = {\n  (signature: ComponentSignature): void;\n  in: <T=any>(name: string, input?: T) => T;\n  out: <T=any>(name: string, output?: T) => T;\n  state: <T=any>(name: string, state?: T) => T;\n};\n\n\nexport type TrackFunction = {\n  (whatever: Bindable | Clearable): void;\n  mark: (marker: Node) => void;\n}\n\n\nexport type ContextFunction = <T=PinLike>(key: string, recipient?: T) => T;\n\n\nexport type ComponentThis = {\n  track: TrackFunction;\n  expose: ExposeFunction;\n  context: ContextFunction;\n}\n\n\nexport type SafeComponentThis = {\n  track?: TrackFunction;\n  expose?: ExposeFunction;\n  context?: ContextFunction;\n}"]}