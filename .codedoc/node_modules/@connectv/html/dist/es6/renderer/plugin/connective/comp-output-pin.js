import { isPinLike, Source, source, sink } from "@connectv/core";
import { Subject } from "rxjs";
import * as L from "../../../shared/life-cycle";
import { PluginPriority } from "../plugin";
export class CompOutputPinPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, node, signature) {
        if (signature.outputs && name in signature.outputs && isPinLike(signature.outputs[name])) {
            let output = signature.outputs[name];
            let src = (output instanceof Source) ? output : output.to(source());
            L.attach(src, node);
            if (isPinLike(prop)) {
                src.to(prop);
                return true;
            }
            else if (prop instanceof Subject) {
                L.attach(src.to(sink(v => prop.next(v))), node);
                return true;
            }
            else if (typeof prop == 'function') {
                L.attach(src.to(sink(v => prop(v))), node);
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=comp-output-pin.js.map