import { isPinLike, source, Source } from "@connectv/core";
import { Subject, Observable } from "rxjs";
import { tap } from "rxjs/operators";
import * as L from "../../../shared/life-cycle";
import { PluginPriority } from "../plugin";
import trackable from "./trackable";
export class CompOutputObservablePlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, node, signature) {
        if (signature.outputs && name in signature.outputs && signature.outputs[name] instanceof Observable) {
            let output = signature.outputs[name];
            if (prop instanceof Subject) {
                let sub = prop;
                L.attach(trackable(output.pipe(tap(v => sub.next(v)))), node);
                return true;
            }
            else if (isPinLike(prop)) {
                let src;
                if (prop instanceof Source)
                    src = prop;
                else
                    src = prop.from(source());
                L.attach(trackable(output.pipe(tap(v => src.send(v)))), node);
                return true;
            }
            else if (typeof prop == 'function') {
                let func = prop;
                L.attach(trackable(output.pipe(tap(v => func(v)))), node);
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=comp-output-observable.js.map