{"version":3,"file":"inner-html.js","sourceRoot":"","sources":["../../../../../src/renderer/plugin/connective/inner-html.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,SAAS,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAE1D,OAAO,KAAK,CAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAI3C,MAAM,OAAO,kBAAkB;IAA/B;QACE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IASjC,CAAC;IAPC,OAAO,CAAC,IAAY,EAAE,MAA8B,EAAE,IAAiB;QACrE,IAAI,IAAI,KAAK,YAAY,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;YAC9C,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACzD,OAAO,IAAI,CAAC;SACb;;YACI,OAAO,KAAK,CAAC;IACpB,CAAC;CACF","sourcesContent":["import { PinLike, isPinLike, sink } from '@connectv/core';\n\nimport * as L from '../../../shared/life-cycle';\n\nimport { PluginPriority } from '../plugin';\nimport { PropertyPlugin } from '../basic-plugins';\n\n\nexport class PinInnerHTMLPlugin<R, T> implements PropertyPlugin<PinLike | R, T> {\n  priority = PluginPriority.High;\n\n  setprop(prop: string, target: PinLike | R | RawValue, host: HTMLElement): boolean {\n    if (prop === '_innerHTML' && isPinLike(target)) {\n      L.attach(target.to(sink(v => host.innerHTML = v)), host);\n      return true;\n    }\n    else return false;\n  }\n}\n"]}