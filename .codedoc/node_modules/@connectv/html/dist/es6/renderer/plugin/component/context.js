import * as L from "../../../shared/life-cycle";
import * as Context from "../../../shared/context";
import { PluginPriority } from "../plugin";
import { isCompContextPlugin, isDefaultReactiveRecipientPlugin } from "./basic-plugins";
import { Subscription } from "rxjs";
import { UnhandledComponentContextError } from "./errors/unhandled-component-context.error";
export class ContextPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    prepare(_, __, ___, extras, pluginHost) {
        let _plugin = pluginHost.plugins.find(isDefaultReactiveRecipientPlugin);
        let _default = () => _plugin ? _plugin.defaultContext() : undefined;
        const map = {};
        const context = (key, recipient) => map[key] = map[key] || recipient || _default();
        extras.context = context;
        return (node) => {
            const sub = new Subscription();
            const _ctxPlugins = pluginHost.plugins.filter(isCompContextPlugin);
            L.attach({
                bind() {
                    setImmediate(() => {
                        let _ref = node;
                        if (node instanceof DocumentFragment)
                            _ref = L.getLifeCycleMarker(node);
                        const ctx = Context.resolve(_ref, Object.keys(map));
                        Object.entries(map).forEach(([key, recipient]) => {
                            const value = ctx[key];
                            if (!_ctxPlugins.find(p => p.wireContext(key, value, recipient, sub, _ref, pluginHost)))
                                throw new UnhandledComponentContextError(key, recipient, value);
                        });
                    });
                },
                clear() {
                    sub.unsubscribe();
                }
            }, node);
        };
    }
}
//# sourceMappingURL=context.js.map