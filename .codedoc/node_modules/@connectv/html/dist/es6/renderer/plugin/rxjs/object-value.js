import { Observable } from 'rxjs';
import * as L from '../../../shared/life-cycle';
import { PluginPriority } from '../plugin';
export class ObservableObjectValuePlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    setprop(prop, target, host) {
        if (prop === '_value'
            && (host instanceof HTMLOptionElement || host instanceof HTMLInputElement)
            && target instanceof Observable) {
            let sub;
            L.attach({
                bind() { sub = target.subscribe(v => host._value = v); },
                clear() { sub.unsubscribe(); },
            }, host);
            return true;
        }
        else
            return false;
    }
}
//# sourceMappingURL=object-value.js.map