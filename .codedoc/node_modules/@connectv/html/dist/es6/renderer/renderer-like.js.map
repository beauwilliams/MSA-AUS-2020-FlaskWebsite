{"version":3,"file":"renderer-like.js","sourceRoot":"","sources":["../../../src/renderer/renderer-like.ts"],"names":[],"mappings":"","sourcesContent":["import { PropsType } from '../shared/types';\n\n\n/**\n *\n * Denotes a function that requires a renderer to be able to render a `Node`,\n * hence can be rendered by any renderer like\n *\n */\nexport type RenderableFunction<Renderable, Tag, \n      NodeType extends Node=Node, \n      Renderer extends RendererLike<Renderable, Tag> = RendererLike<Renderable, Tag>> \n      = (renderer: Renderer) => NodeType;\n\n\n/**\n *\n * Wraps a `Node` that is to be rendered on, before or after on another,\n * yet undetermined `Node`. Usage example:\n *\n * ```tsx\n * renderer.render(<Whatever/>)\n *         .on(document.body);\n *\n * renderer.render(<input/>)\n *         .before(X);\n *\n * renderer.render(Y)\n *         .after(someRef.$);\n * ```\n *\n */\nexport interface ToBeRendered<T extends Node> {\n  /**\n   *\n   * Renders its `target` on given `Node`.\n   *\n   * @param host the `Node` on which the `target` should be rendered.\n   *\n   */\n  on(host: Node): T;\n\n  /**\n   *\n   * Renders its `target` after given `Node`.\n   *\n   * @param ref the `Node` after which the `target` should be rendered.\n   *\n   */\n  after(ref: Node): T;\n\n  /**\n   *\n   * Renders its `target` before given `Node`.\n   *\n   * @param ref the `Node` before which the `target` should be rendered.\n   *\n   */\n  before(ref: Node): T;\n\n  /**\n   *\n   * The target `Node` that is to be rendered on, before or after another `Node`.\n   *\n   */\n  target: T;\n}\n\n\n/**\n *\n * Denotes any object that behaves like a JSX-compliant renderer, i.e. with API compatible\n * with JSX factory configuration `renderer.create`.\n *\n */\nexport interface RendererLike<Renderable, Tag> {\n  create(\n    tag: string | Tag,\n    props: PropsType<Renderable | RawValue> | undefined,\n    ...children: (Renderable | RawValue | Node)[]\n  ): Node;\n\n  setprop(prop: string, target: RawValue | Renderable, host: HTMLElement): void;\n  append(target: RawValue | Renderable | Node | (RawValue | Renderable | Node)[], host: Node): void;\n  render<T extends Node>(node: T | RenderableFunction<Renderable, Tag, T>): ToBeRendered<T>;\n}\n"]}