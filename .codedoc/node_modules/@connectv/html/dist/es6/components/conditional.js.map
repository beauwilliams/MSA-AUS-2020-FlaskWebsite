{"version":3,"file":"conditional.js","sourceRoot":"","sources":["../../../src/components/conditional.tsx"],"names":[],"mappings":"AAEA,OAAO,EAAW,IAAI,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAWzC,MAAM,UAAU,WAAW,CAAsB,KAAuB,EAAE,QAA2C;IACnH,IAAI,KAAK,GAAG,gBAAC,MAAM,OAAE,CAAC;IACtB,IAAI,GAAG,GAAG,gBAAC,MAAM,OAAE,CAAC;IACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEvB,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,YAAY,UAAU,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;IACvE,IAAI,MAAqB,CAAC;IAE1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,KAAc,EAAE,EAAE;QACzC,IAAI,KAAK,KAAK,MAAM,EAAE;YACpB,MAAM,GAAG,KAAK,CAAC;YAEf,UAAU,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACvB,IAAI,KAAK;gBAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACjD,IAAI,KAAK,CAAC,IAAI;gBAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACjE;IACH,CAAC,CAAC,CAAC,CAAC,CAAC;IAEL,OAAO;QAAW,KAAK;QAAE,GAAG,CAAY,CAAA;AAC1C,CAAC","sourcesContent":["import { RendererLike } from '../renderer/renderer-like';\nimport { CompType, ComponentThis } from '../renderer/plugin/component/types';\nimport { PinLike, wrap, sink } from '@connectv/core';\nimport { Observable } from 'rxjs';\nimport { Marker } from './marker';\nimport { scanRemove } from './util/scan';\n\n\n\nexport interface ConditionalProps {\n  if: PinLike | Observable<boolean>;\n  then: () => Node;\n  else?: () => Node;\n}\n\n\nexport function Conditional(this: ComponentThis, props: ConditionalProps, renderer: RendererLike<any, any | CompType>) {\n  let start = <Marker/>;\n  let end = <Marker/>;\n  this.track.mark(start);\n\n  let cond = (props.if instanceof Observable)? wrap(props.if) : props.if;\n  let latest: boolean | any;\n\n  this.track(cond.to(sink((value: boolean) => {\n    if (value !== latest) {\n      latest = value;\n\n      scanRemove(start, end);\n      if (value) renderer.render(props.then()).after(start);\n      else if (props.else) renderer.render(props.else()).after(start);\n    }\n  })));\n\n  return <fragment>{start}{end}</fragment>\n}"]}