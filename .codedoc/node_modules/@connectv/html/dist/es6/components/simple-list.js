import { State, SimpleDeep, sink, value, isPinLike, wrap } from '@connectv/core';
import { Marker } from './marker';
import { scanRemove } from './util/scan';
export function SimpleList(props, renderer) {
    let startMark = renderer.create(Marker, null);
    this.track.mark(startMark);
    let markers = [];
    let list;
    if (props.of instanceof SimpleDeep)
        list = props.of;
    else if (props.of instanceof State)
        list = new SimpleDeep(props.of);
    else {
        list = new SimpleDeep(new State());
        if (isPinLike(props.of))
            props.of.to(list);
        else
            wrap(props.of).to(list);
        this.track(list);
    }
    this.track(list.to(sink(_list => {
        if (_list.length > markers.length) {
            let prevMark = markers[markers.length - 1] || startMark;
            for (let index = markers.length; index < _list.length; index++) {
                let marker = renderer.create(Marker, null);
                let sub = list.sub(index);
                renderer.render(renderer.create("fragment", null,
                    props.each(sub, value(index)),
                    marker)).after(prevMark);
                prevMark = marker;
                markers.push(marker);
            }
        }
        else if (_list.length < markers.length) {
            let prevMark = markers[_list.length - 1] || startMark;
            for (let index = _list.length; index < markers.length; index++)
                scanRemove(prevMark, markers[index], {
                    includeEnd: true
                });
            markers.length = _list.length;
        }
    })));
    return renderer.create("fragment", null, startMark);
}
//# sourceMappingURL=simple-list.js.map