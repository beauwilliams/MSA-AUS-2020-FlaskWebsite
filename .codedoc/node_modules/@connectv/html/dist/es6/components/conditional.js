import { wrap, sink } from '@connectv/core';
import { Observable } from 'rxjs';
import { Marker } from './marker';
import { scanRemove } from './util/scan';
export function Conditional(props, renderer) {
    let start = renderer.create(Marker, null);
    let end = renderer.create(Marker, null);
    this.track.mark(start);
    let cond = (props.if instanceof Observable) ? wrap(props.if) : props.if;
    let latest;
    this.track(cond.to(sink((value) => {
        if (value !== latest) {
            latest = value;
            scanRemove(start, end);
            if (value)
                renderer.render(props.then()).after(start);
            else if (props.else)
                renderer.render(props.else()).after(start);
        }
    })));
    return renderer.create("fragment", null,
        start,
        end);
}
//# sourceMappingURL=conditional.js.map