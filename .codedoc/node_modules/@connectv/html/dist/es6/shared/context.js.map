{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/shared/context.ts"],"names":[],"mappings":"AAQA,MAAM,UAAU,GAAG,CAAC,IAAU,EAAE,OAAoB;IACjD,IAAY,CAAC,OAAO,GAAG;QACtB,MAAM,EAAE,OAAO,IAAI,EAAE;QACrB,GAAG,EAAE,IAAI;KACV,CAAC;AACJ,CAAC;AAGD,SAAS,QAAQ,CAAC,IAAU,EAAE,IAAc;IAC1C,MAAM,KAAK,GAAG,IAAW,CAAC;IAC1B,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/D,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;YAC/B,IAAI,IAAI,EAAE;gBACR,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;gBAChC,IAAI,OAAO,EAAE;oBACX,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;oBACvC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iBACrE;aACF;SACF;QAED,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;SAAM;QACL,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,IAAI,OAAO,EAAE;YACX,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACpC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;YACpB,OAAO,GAAG,CAAC;SACZ;;YACI,OAAO;gBACV,MAAM,EAAE,EAAE;gBACV,GAAG,EAAE,IAAI;aACV,CAAA;KACF;AACH,CAAC;AAGD,MAAM,UAAU,OAAO,CAAC,IAAU,EAAE,IAAc;IAChD,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC;AACrC,CAAC;AAGD,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,CAAA","sourcesContent":["export type ContextType = {[key: string]: any};\n\ninterface _InternalContext {\n  values: ContextType;\n  ref: Node;\n}\n\n\nexport function set(node: Node, context: ContextType) {\n  (node as any).context = {\n    values: context || {},\n    ref: node\n  };\n}\n\n\nfunction _resolve(node: Node, keys: string[]): _InternalContext {\n  const _node = node as any;\n  if (_node.context) {\n    const missing = keys.filter(k => !(k in _node.context.values));\n    if (missing.length > 0) {\n      const _ref = _node.context.ref;\n      if (_ref) {\n        const _parent = _ref.parentNode;\n        if (_parent) {\n          const ctx = _resolve(_parent, missing);\n          missing.forEach(key => _node.context.values[key] = ctx.values[key]);\n        }\n      }\n    }\n\n    return _node.context;\n  } else {\n    const _parent = node.parentNode;\n    if (_parent) {\n      const ctx = _resolve(_parent, keys);\n      _node.context = ctx;\n      return ctx;\n    }\n    else return {\n      values: {},\n      ref: node\n    }\n  }\n}\n\n\nexport function resolve(node: Node, keys: string[]): ContextType {\n  return _resolve(node, keys).values;\n}\n\n\nexport const CTX = { set, resolve }"]}