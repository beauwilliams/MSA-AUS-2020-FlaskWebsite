import { isBindable, isClearable } from '@connectv/core';
export function lifeCycleInfo(node, createIfNonExistent = false) {
    let _node = node;
    if (node instanceof DocumentFragment) {
        let marker = getLifeCycleMarker(node);
        if (marker)
            return lifeCycleInfo(marker, createIfNonExistent);
        else if (createIfNonExistent) {
            marker = document.createElement('i');
            marker.setAttribute('hidden', '');
            setLifeCycleMarker(node, marker);
            return lifeCycleInfo(marker, true);
        }
    }
    else {
        if (_node.lifecycle)
            return _node.lifecycle;
        else if (createIfNonExistent) {
            _node.lifecycle = { bound: false };
            return _node.lifecycle;
        }
    }
}
export function setLifeCycleMarker(fragment, marker) {
    fragment.lifecycleMarker = marker;
    if (!fragment.contains(marker))
        fragment.appendChild(marker);
}
export function getLifeCycleMarker(fragment) {
    return fragment.lifecycleMarker;
}
export function bind(node) {
    let lifecycle = lifeCycleInfo(node);
    if (lifecycle) {
        if (lifecycle.bound)
            return;
        lifecycle.bound = true;
        if (lifecycle.bindables)
            lifecycle.bindables.forEach(b => b.bind());
    }
    node.childNodes.forEach(bind);
    if (node.parentNode && !node.parentNode.childObserver) {
        let observer = new MutationObserver(changes => {
            changes.forEach(change => {
                if (change.removedNodes)
                    change.removedNodes.forEach(node => setImmediate(() => {
                        if (!document.contains(node))
                            clear(node);
                    }));
            });
        });
        observer.observe(node.parentNode, { childList: true });
        node.parentNode.childObserver = observer;
        attach({
            clear() { observer.disconnect(); }
        }, node.parentNode);
    }
}
export function clear(node) {
    let lifecycle = lifeCycleInfo(node);
    if (lifecycle && lifecycle.clearables)
        lifecycle.clearables.forEach(c => c.clear());
    node.childNodes.forEach(clear);
}
export function attach(thing, node) {
    let lifecycle = lifeCycleInfo(node, true);
    if (isBindable(thing))
        (lifecycle.bindables || (lifecycle.bindables = [])).push(thing);
    if (isClearable(thing))
        (lifecycle.clearables || (lifecycle.clearables = [])).push(thing);
}
export function detach(thing, node) {
    let lifecycle = lifeCycleInfo(node);
    if (lifecycle) {
        if (lifecycle.bindables)
            lifecycle.bindables = lifecycle.bindables.filter(b => b !== thing);
        if (lifecycle.clearables)
            lifecycle.clearables = lifecycle.clearables.filter(b => b !== thing);
    }
}
export const LifeCycle = {
    info: lifeCycleInfo,
    getMarker: getLifeCycleMarker,
    setMarker: setLifeCycleMarker,
    bind,
    clear,
    attach,
    detach
};
//# sourceMappingURL=life-cycle.js.map