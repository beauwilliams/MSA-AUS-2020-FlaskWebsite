{"version":3,"file":"reactive-literal.js","sourceRoot":"","sources":["../../../src/util/reactive-literal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACnF,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AACrD,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAG7C,MAAM,UAAU,eAAe,CAAC,OAA6B,EAAE,GAAG,MAA2C;IAC3G,OAAO,KAAK,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,SAAS,CAAC,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC;aACtB,IAAI,CAAC,YAAY,UAAU;YAAE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;;YAC5C,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;SACF,EAAE,CAAC,IAAI,EAAE,CAAC;SACV,EAAE,CAAC,GAAG,CAAC,CAAC,MAAa,EAAE,EAAE,CACxB,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAC9F,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,SAAS,CAAC,OAA6B,EAAE,GAAG,MAAyB;IACnF,OAAO,aAAa,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QACnC,IAAI,CAAC,YAAY,UAAU;YAAE,OAAO,CAAC,CAAC;;YACjC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CACrB,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAC9F,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { PinLike, group, wrap, pack, map, isPinLike, value } from \"@connectv/core\";\nimport { Observable, combineLatest, of } from \"rxjs\";\nimport { map as _map } from \"rxjs/operators\";\n\n\nexport function reactiveLiteral(strings: TemplateStringsArray, ...values: (PinLike | Observable<any> | any)[]) {\n  return group(...values.map(v => {\n    if (isPinLike(v)) return v;\n    else if (v instanceof Observable) return wrap(v);\n    else return value(v);\n  }))\n  .to(pack())\n  .to(map((values: any[]) =>\n    strings.reduce((total, piece, index) => total + piece + (values[index] || '').toString(), '')\n  ));\n}\n\n\nexport function rxLiteral(strings: TemplateStringsArray, ...values: Observable<any>[]) {\n  return combineLatest(...values.map(v => {\n      if (v instanceof Observable) return v;\n      else return of(v);\n  })).pipe(_map(values =>\n    strings.reduce((total, piece, index) => total + piece + (values[index] || '').toString(), '')\n  ));\n}\n"]}