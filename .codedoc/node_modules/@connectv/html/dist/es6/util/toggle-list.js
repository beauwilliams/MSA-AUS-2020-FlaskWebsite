import { Observable, combineLatest } from "rxjs";
import { map as _map } from "rxjs/operators";
import { group, wrap, pack, map } from "@connectv/core";
const _DefaultAggregator = (names) => names.join(' ');
export function toggleList(names, aggregator) {
    const _aggregator = aggregator || _DefaultAggregator;
    return group(...Object.entries(names)
        .map(([name, $]) => (($ instanceof Observable) ? wrap($) : $)
        .to(map((v) => [name, v]))))
        .to(pack())
        .to(map((l) => _aggregator(l.filter(([_, v]) => v).map(([n, _]) => n))));
}
export function rxToggleList(names, aggregator) {
    const _aggregator = aggregator || _DefaultAggregator;
    return combineLatest(...Object.entries(names)
        .map(([name, $]) => $.pipe(_map(v => [name, v]))))
        .pipe(_map((l) => _aggregator(l.filter(([_, v]) => v).map(([n, _]) => n))));
}
//# sourceMappingURL=toggle-list.js.map