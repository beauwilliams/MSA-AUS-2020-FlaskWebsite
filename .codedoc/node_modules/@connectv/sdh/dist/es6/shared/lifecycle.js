var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export function attachPromise(host, promise) {
    if (host instanceof DocumentFragment) {
        let marker = getLSMarker(host);
        if (!marker)
            attachPromise(addLSMarker(host), promise);
    }
    else
        (host.__promises = host.__promises || []).push(promise);
}
export function promises(node) {
    let childPromises = [];
    node.childNodes.forEach(child => childPromises = childPromises.concat(promises(child)));
    return (node.__promises || []).concat(childPromises);
}
export function isReady(node) {
    return __awaiter(this, void 0, void 0, function* () {
        yield Promise.all(promises(node));
        return true;
    });
}
export const WRCallbackDefaultPriority = 0;
export const WRCallbackHighPriority = 1000;
export function whenRendered(node, cb, priority = WRCallbackDefaultPriority) {
    if (node instanceof DocumentFragment) {
        let marker = getLSMarker(node);
        if (!marker)
            whenRendered(addLSMarker(node), cb);
    }
    else
        (node.__wr_callbacks = node.__wr_callbacks || []).push({ cb, priority });
}
export function itsRendered(node) {
    (node.__wr_callbacks || [])
        .sort((a, b) => b.priority - a.priority)
        .forEach((w) => w.cb());
    node.childNodes.forEach(itsRendered);
}
export function setLSMarker(fragment, marker) {
    fragment.__ls_marker = marker;
    if (!fragment.contains(marker))
        fragment.appendChild(marker);
}
export function getLSMarker(fragment) {
    return fragment.__ls_marker;
}
export function addLSMarker(fragment) {
    const marker = document.createElement('i');
    marker.setAttribute('hidden', '');
    setLSMarker(fragment, marker);
    return marker;
}
//# sourceMappingURL=lifecycle.js.map