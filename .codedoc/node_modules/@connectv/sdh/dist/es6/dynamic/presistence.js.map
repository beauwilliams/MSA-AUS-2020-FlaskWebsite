{"version":3,"file":"presistence.js","sourceRoot":"","sources":["../../../src/dynamic/presistence.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAG5C;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAgB,UAAU,CAAC,MAAc,EAAE,MAAsB;;QACrE,MAAM,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC3B,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAGD;;;;;;;;;GASG;AACH,MAAM,UAAgB,UAAU,CAAC,IAAY,EAAE,GAAY;;QACzD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,IAAI,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEpC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC;QACtC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAC/B,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;QAEtB,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA","sourcesContent":["import { Configuration } from 'webpack';\n\nimport { Bundle } from './bundle';\nimport { pack } from './pack';\nimport { saveMeta, loadMeta } from './meta';\n\n\n/**\n *\n * Packs and stores given bundle on the file system.\n * Also stores corresponding metadata alongside the bundle.\n *\n * For using your custom programmatic bundler instead of webpack,\n * you can do the following:\n * \n * ```typescript\n * async function mySaveBundle(bundle: Bundle) {\n *   await packWith(myPackFunc)(bundle);\n *   await saveMeta(bundle);\n * }\n * ```\n *\n * @param bundle\n * @param config web-pack configuration override\n * @returns the given bundle after the process is finished.\n *\n */\nexport async function saveBundle(bundle: Bundle, config?: Configuration) {\n  await pack(bundle, config);\n  await saveMeta(bundle);\n\n  return bundle;\n}\n\n\n/**\n *\n * Will load a previously constructed and stored bundle from filesystem.\n *\n * @param path the path to load the bundle from.\n * @param url  the URL that the bundle is to be accessible by clients.\n * @returns the `Bundle` object\n * @throws if the bundle meta data cannot be located.\n *\n */\nexport async function loadBundle(path: string, url?: string) {\n  const bundle = new Bundle(url || path, path);\n  const meta = await loadMeta(bundle);\n\n  bundle.imports = meta.components;\n  bundle.rendererImport = meta.renderer;\n  bundle.initImports = meta.init;\n  bundle.repack = false;\n\n  return bundle;\n}\n"]}