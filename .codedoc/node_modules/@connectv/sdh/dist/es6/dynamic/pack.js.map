{"version":3,"file":"pack.js","sourceRoot":"","sources":["../../../src/dynamic/pack.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC;;;;;;;GAOG;AACH,MAAM,UAAgB,IAAI,CAAC,MAAc,EAAE,MAAsB;;QAC/D,OAAO,QAAQ,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7E,CAAC;CAAA;AAYD;;;;;;;GAOG;AACH,MAAM,UAAU,QAAQ,CAAC,MAAgB;IACvC,OAAO,UAAgB,MAAc;;YACnC,IAAI,MAAM,CAAC,MAAM;gBACf,OAAO,MAAM,CAAC,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC;KAAA,CAAA;AACH,CAAC","sourcesContent":["import { Configuration } from 'webpack';\n\nimport { webPack } from './webpack';\nimport { Bundle } from './bundle';\nimport { bootstrap } from './bootstrap';\n\n\n/**\n *\n * Packs given bundle using **WebPack**.\n *\n * @param bundle\n * @param config Webpack configuration to be used.\n *\n */\nexport async function pack(bundle: Bundle, config?: Configuration) {\n  return packWith((entry, output) => webPack(entry, output, config))(bundle);\n}\n\n\n/**\n *\n * Denotes a function that packs a client side bundle using\n * given entry file, and stores it at given output path.\n *\n */\nexport type PackFunc = (entry: string, output: string) => Promise<any>;\n\n\n/**\n *\n * Returns a function that packs given bundle using given `PackFunc`.\n * Useful for using custom programmatic bundlers.\n *\n * @param packer\n *\n */\nexport function packWith(packer: PackFunc) {\n  return async function (bundle: Bundle) {\n    if (bundle.repack)\n      return packer(await bootstrap(bundle), bundle.path);\n  }\n}\n"]}