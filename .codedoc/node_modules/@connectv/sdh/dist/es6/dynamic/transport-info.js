import { createHash } from 'crypto';
import { getLSMarker } from '../shared/lifecycle';
function hash(x) {
    return createHash('md5').update(x).digest('base64').toString();
}
/**
 *
 * @param name
 * @param trace
 * @returns a `TransportInfo` based on given artifact name and given NodeJS trace.
 *
 */
export function createInfo(name, trace) {
    const filename = trace.getFileName() || '';
    return { name, filename, hash: hash(filename + '::' + name), resolved: false };
}
/**
 *
 * Attaches given `TransportInfo` to given `Node`.
 *
 * @param node
 * @param info
 *
 */
export function attachInfo(node, info) {
    if (node instanceof DocumentFragment)
        attachInfo(getLSMarker(node), info);
    else
        node.__transport_info = info;
}
/**
 *
 * @param node
 * @returns all attached `TransportInfo` on given `Node`
 *
 */
export function fetchInfo(node) {
    if (node instanceof DocumentFragment)
        return fetchInfo(getLSMarker(node));
    else {
        let res = [];
        const info = node.__transport_info;
        if (info)
            res.push(info);
        node.childNodes.forEach(child => res = res.concat(fetchInfo(child)));
        return res;
    }
}
//# sourceMappingURL=transport-info.js.map