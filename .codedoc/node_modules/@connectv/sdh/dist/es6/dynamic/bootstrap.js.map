{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["../../../src/dynamic/bootstrap.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAEnC,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAG1C;;;;;;;;;;GAUG;AACH,MAAM,UAAgB,SAAS,CAAC,MAAc;;QAC5C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,GAAG,WAAW,CAAC,CAAC;QAChD,UAAU,CAAC,MAAM,CAAC,CAAC;QACnB,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAExF,OAAO,SAAS,CAAC;IACnB,CAAC;CAAA","sourcesContent":["import { join, parse } from 'path';\n\nimport { createEntry } from './create-entry';\nimport { Bundle } from './bundle';\nimport { modularize } from './modularize';\n\n\n/**\n *\n * Creates the entry file for given bundle. The entry file will contain all necessary\n * imports and initialization code. You can, among other use cases, use this function\n * to create an entry file for given bundle and then use your own bundler to properly\n * construct the bundle file.\n *\n * @param bundle\n * @returns the address of the created bundle entry file.\n *\n */\nexport async function bootstrap(bundle: Bundle) {\n  const { dir, name } = parse(bundle.path);\n  const entryPath = join(dir, name + '.entry.js');\n  modularize(bundle);\n  await createEntry(entryPath, bundle.imports, bundle.rendererImport, bundle.initImports);\n\n  return entryPath;\n}\n"]}