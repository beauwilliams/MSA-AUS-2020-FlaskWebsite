{"version":3,"file":"modularize.js","sourceRoot":"","sources":["../../../src/dynamic/modularize.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAMrC,SAAS,aAAa,CAAC,OAAsB;IAC3C,MAAM,KAAK,GAAG,qDAAqD,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC3F,IAAI,KAAK;QAAE,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;QACjC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AACnC,CAAC;AAGD,MAAM,UAAU,UAAU,CAAC,MAAc;IACvC,MAAM,OAAO,GAAwC,EAAE,CAAC;IACxD;QACE,GAAG,MAAM,CAAC,OAAO;QACjB,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KAC1D,CAAC,GAAG,CAAC,aAAa,CAAC;SAClB,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;SACvC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,EAAE;QAC9B,MAAM,MAAM,GAAG,OAAiB,CAAC;QACjC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE;QACjD,IAAI;YACF,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC;YAC/C,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,YAAY,IAAI,GAAG,CAAC,YAAY,KAAK,QAAQ,EAAE;gBACtF,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC1C,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAClB,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;wBAC/B,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC3D;gBACH,CAAC,CAAC,CAAA;aACH;SACF;QAAC,OAAO,CAAC,EAAE,GAAE;IAChB,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { join, dirname } from 'path';\n\nimport { Bundle } from './bundle';\nimport { TransportInfo } from './transport';\n\n\nfunction extractModule(_import: TransportInfo): [TransportInfo, string | undefined] {\n  const match = /(^.*\\/node_modules\\/(?:(?:\\w+\\/)|(?:\\@\\w+\\/\\w+\\/)))/.exec(_import.filename);\n  if (match) return [_import, match[1]];\n  else return [_import, undefined];\n}\n\n\nexport function modularize(bundle: Bundle) {\n  const modules: {[module: string]: TransportInfo[]} = {};\n  [\n    ...bundle.imports,\n    ...bundle.initImports,\n    ...(bundle.rendererImport ? [bundle.rendererImport] : [])\n  ].map(extractModule)\n   .filter(([_import, module]) => !!module)\n   .forEach(([_import, _module]) => {\n     const module = _module as string;\n     (modules[module] = modules[module] || []).push(_import);\n   });\n\n  Object.entries(modules).forEach(([mod, imports]) => {\n    try {\n      const pkg = require(join(mod, 'package.json'));\n      if (pkg && pkg.module && pkg.main && pkg.sdhTransport && pkg.sdhTransport === 'module') {\n        const main = dirname(join(mod, pkg.main));\n        const module = dirname(join(mod, pkg.module));\n        imports.forEach(i => {\n          if (i.filename.startsWith(main)) {\n            i.filename = join(module, i.filename.substr(main.length));\n          }\n        })\n      }\n    } catch (_) {}\n  });\n\n  return bundle;\n}\n"]}