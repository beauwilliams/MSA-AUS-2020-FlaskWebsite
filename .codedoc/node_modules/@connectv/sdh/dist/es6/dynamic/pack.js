var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { webPack } from './webpack';
import { bootstrap } from './bootstrap';
/**
 *
 * Packs given bundle using **WebPack**.
 *
 * @param bundle
 * @param config Webpack configuration to be used.
 *
 */
export function pack(bundle, config) {
    return __awaiter(this, void 0, void 0, function* () {
        return packWith((entry, output) => webPack(entry, output, config))(bundle);
    });
}
/**
 *
 * Returns a function that packs given bundle using given `PackFunc`.
 * Useful for using custom programmatic bundlers.
 *
 * @param packer
 *
 */
export function packWith(packer) {
    return function (bundle) {
        return __awaiter(this, void 0, void 0, function* () {
            if (bundle.repack)
                return packer(yield bootstrap(bundle), bundle.path);
        });
    };
}
//# sourceMappingURL=pack.js.map