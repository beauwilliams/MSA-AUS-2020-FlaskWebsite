var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { parse, join } from 'path';
import { writeFile, readFile } from 'rxline/fs';
import { leanInfo } from './transport/transport-info';
/**
 *
 * @param bundle
 * @returns the standard address of the meta file for given bundle.
 * @note that the address might not correspond to an actual file on the filesystem. This
 * can happen if the bundle has never been saved to the filesystem with its current path,
 * storing its meta data was omitted from its saving process, or the metadata file was lost
 * afterwards.
 *
 */
export function metafile(bundle) {
    const { dir, name } = parse(bundle.path);
    return join(dir, name + '.meta.json');
}
/**
 *
 * Saves the meta data of given bundle to filesystem. This meta data contains
 * info about which transport components does the bundle contain and is useful
 * for subsequent reloading the bundle from filesystem.
 *
 * @param bundle
 * @returns a `rxline` file corresponding to the stored meta data file.
 *
 */
export function saveMeta(bundle) {
    const meta = {
        init: bundle.initImports.map(leanInfo),
        components: bundle.imports.map(leanInfo),
    };
    if (bundle.rendererImport)
        meta.renderer = leanInfo(bundle.rendererImport);
    return writeFile()({
        path: metafile(bundle),
        root: '',
        content: JSON.stringify(meta, undefined, 2)
    });
}
/**
 *
 * @param bundle
 * @returns the stored metadata of the given bundle.
 * @throws if the metadata file cannot be found.
 * @see metafile()
 *
 */
export function loadMeta(bundle) {
    return __awaiter(this, void 0, void 0, function* () {
        return JSON.parse((yield readFile()({
            path: metafile(bundle),
            root: '',
            content: undefined
        })).content);
    });
}
//# sourceMappingURL=meta.js.map