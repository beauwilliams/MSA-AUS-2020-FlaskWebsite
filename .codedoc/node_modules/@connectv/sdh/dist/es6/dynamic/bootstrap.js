var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { join, parse } from 'path';
import { createEntry } from './create-entry';
import { modularize } from './modularize';
/**
 *
 * Creates the entry file for given bundle. The entry file will contain all necessary
 * imports and initialization code. You can, among other use cases, use this function
 * to create an entry file for given bundle and then use your own bundler to properly
 * construct the bundle file.
 *
 * @param bundle
 * @returns the address of the created bundle entry file.
 *
 */
export function bootstrap(bundle) {
    return __awaiter(this, void 0, void 0, function* () {
        const { dir, name } = parse(bundle.path);
        const entryPath = join(dir, name + '.entry.js');
        modularize(bundle);
        yield createEntry(entryPath, bundle.imports, bundle.rendererImport, bundle.initImports);
        return entryPath;
    });
}
//# sourceMappingURL=bootstrap.js.map