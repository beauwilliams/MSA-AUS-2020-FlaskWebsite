var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import webpack from 'webpack';
import { parse, resolve } from 'path';
const merge = /*#__PURE__*/ require('webpack-merge');
const _DefaultProdModule = {
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: 'ts-loader',
                exclude: /node_modules/,
            },
        ],
    },
};
const _DefaultDevModule = {
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: [{
                        loader: 'ts-loader',
                        options: {
                            transpileOnly: true
                        }
                    }],
                exclude: /node_modules/,
            },
        ],
    },
};
const _DefaultConfig = {
    resolve: {
        extensions: ['.tsx', '.ts', '.js']
    },
    resolveLoader: {
        modules: [
            'node_modules'
        ]
    }
};
export function webPack(inpath, outpath, config = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { dir, base } = parse(outpath);
        let conf = merge(_DefaultConfig, config, {
            entry: resolve(inpath),
            output: {
                filename: base,
                path: resolve(dir),
            }
        });
        if (conf.mode === 'development')
            conf = merge(conf, _DefaultDevModule);
        else
            conf = merge(conf, _DefaultProdModule);
        return new Promise((resolve, reject) => {
            webpack(conf, (err, res) => {
                if (err)
                    reject(err);
                else {
                    if (res.hasErrors()) {
                        console.log(res.toString());
                        reject(res);
                    }
                    else
                        resolve(res);
                }
            });
        });
    });
}
//# sourceMappingURL=webpack.js.map