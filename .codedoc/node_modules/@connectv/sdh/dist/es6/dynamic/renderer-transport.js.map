{"version":3,"file":"renderer-transport.js","sourceRoot":"","sources":["../../../src/dynamic/renderer-transport.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAW9C;;;;;;;GAOG;AACH,MAAM,UAAU,iBAAiB,CAAO,OAA8B;IACpE,MAAM,KAAK,GAAG,SAAS,EAAE,CAAC;IAC1B,IAAI,CAAC,KAAK;QAAE,OAAO,OAAO,CAAC,CAAC,yDAAyD;IAEpF,OAAe,CAAC,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACpE,OAAO,OAAO,CAAC;AACjB,CAAC;AAGD;;;;;GAKG;AACH,MAAM,UAAU,wBAAwB,CAAO,OAA8B;IAC3E,OAAQ,OAAe,CAAC,gBAAgB,CAAC;AAC3C,CAAC","sourcesContent":["import { RendererLike } from '@connectv/html';\n\nimport { callTrace } from '../shared/trace';\nimport { createInfo } from './transport-info';\n\n\n/**\n *\n * Denotes a function that returns a client-side renderer.\n *\n */\nexport type RendererFactory<R, T> = () => RendererLike<R, T>;\n\n\n/**\n *\n * Attaches necessary transport information to given renderer factory function.\n *\n * @param factory \n * @returns the given factory function\n *\n */\nexport function rendererTransport<R, T>(factory: RendererFactory<R, T>) {\n  const trace = callTrace();\n  if (!trace) return factory; // --> unable to get trace info, perhaps client side code\n\n  (factory as any).__transport_info = createInfo(factory.name, trace);\n  return factory;\n}\n\n\n/**\n *\n * @param factory\n * @returns attached transport information of given renderer factory function, if any.\n *\n */\nexport function getRendererTransportInfo<R, T>(factory: RendererFactory<R, T>) {\n  return (factory as any).__transport_info;\n}\n"]}