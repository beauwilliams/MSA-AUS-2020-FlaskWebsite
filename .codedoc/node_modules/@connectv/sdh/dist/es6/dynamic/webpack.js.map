{"version":3,"file":"webpack.js","sourceRoot":"","sources":["../../../src/dynamic/webpack.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAGtC,MAAM,KAAK,GAAG,aAAa,CAAA,OAAO,CAAC,eAAe,CAAC,CAAC;AAGpD,MAAM,kBAAkB,GAA+B;IACrD,MAAM,EAAE;QACN,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE,WAAW;gBAChB,OAAO,EAAE,cAAc;aACxB;SACF;KACF;CACF,CAAA;AAGD,MAAM,iBAAiB,GAA+B;IACpD,MAAM,EAAE;QACN,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE,CAAC;wBACJ,MAAM,EAAE,WAAW;wBACnB,OAAO,EAAE;4BACP,aAAa,EAAE,IAAI;yBACpB;qBACF,CAAC;gBACF,OAAO,EAAE,cAAc;aACxB;SACF;KACF;CACF,CAAA;AAGD,MAAM,cAAc,GAA+B;IACjD,OAAO,EAAE;QACP,UAAU,EAAE,CAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAE;KACrC;IACD,aAAa,EAAE;QACb,OAAO,EAAE;YACP,cAAc;SACf;KACF;CACF,CAAA;AAGD,MAAM,UAAgB,OAAO,CAAC,MAAc,EAAE,OAAe,EAAE,SAAwB,EAAE;;QACvF,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,IAAI,GAAG,KAAK,CAAC,cAAc,EAAE,MAAM,EAAE;YACvC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC;YACtB,MAAM,EAAE;gBACN,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC;aACnB;SACF,CAAkB,CAAC;QAEpB,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa;YAAE,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,iBAAiB,CAAkB,CAAC;;YACnF,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,kBAAkB,CAAkB,CAAC;QAE7D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACzB,IAAI,GAAG;oBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;qBAChB;oBACH,IAAI,GAAG,CAAC,SAAS,EAAE,EAAE;wBACnB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb;;wBAEC,OAAO,CAAC,GAAG,CAAC,CAAC;iBAChB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA","sourcesContent":["import webpack from 'webpack';\nimport { Configuration } from 'webpack';\nimport { parse, resolve } from 'path';\n\n\nconst merge = /*#__PURE__*/require('webpack-merge');\n\n\nconst _DefaultProdModule: Configuration = /*#__PURE__*/{\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n}\n\n\nconst _DefaultDevModule: Configuration = /*#__PURE__*/{\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: [{\n          loader: 'ts-loader',\n          options: {\n            transpileOnly: true\n          }\n        }],\n        exclude: /node_modules/,\n      },\n    ],\n  },\n}\n\n\nconst _DefaultConfig: Configuration = /*#__PURE__*/{\n  resolve: {\n    extensions: [ '.tsx', '.ts', '.js' ]\n  },\n  resolveLoader: {\n    modules: [\n      'node_modules'\n    ]\n  }\n}\n\n\nexport async function webPack(inpath: string, outpath: string, config: Configuration = {}) {\n  const { dir, base } = parse(outpath);\n  let conf = merge(_DefaultConfig, config, {\n    entry: resolve(inpath),\n    output: {\n      filename: base,\n      path: resolve(dir),\n    }\n  }) as Configuration;\n\n  if (conf.mode === 'development') conf = merge(conf, _DefaultDevModule) as Configuration;\n  else conf = merge(conf, _DefaultProdModule) as Configuration;\n\n  return new Promise((resolve, reject) => {\n    webpack(conf, (err, res) => {\n      if (err) reject(err);\n      else {\n        if (res.hasErrors()) {\n          console.log(res.toString());\n          reject(res);\n        }\n        else\n          resolve(res);\n      }\n    });\n  });\n}\n"]}