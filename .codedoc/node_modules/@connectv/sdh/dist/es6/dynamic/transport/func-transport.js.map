{"version":3,"file":"func-transport.js","sourceRoot":"","sources":["../../../../src/dynamic/transport/func-transport.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAiB,MAAM,kBAAkB,CAAC;AAmB7D;;;;;;;GAOG;AACH,MAAM,UAAU,aAAa,CAAI,IAA0B;IACzD,MAAM,KAAK,GAAG,SAAS,EAAE,CAAC;IAC1B,IAAI,CAAC,KAAK;QAAE,OAAO,IAAW,CAAC,CAAC,yDAAyD;IAExF,IAAY,CAAC,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9D,OAAO,IAA0B,CAAC;AACpC,CAAC;AAGD;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAI,IAAwB;IAC9D,OAAO,IAAI,CAAC,gBAAgB,CAAC;AAC/B,CAAC","sourcesContent":["import { callTrace } from '../../shared/trace';\nimport { createInfo, TransportInfo } from './transport-info';\n\n\n/**\n *\n * Denotes a function that can be transported to the client-side.\n *\n */\nexport type TransportableFunc<T> = () => T;\n\n/**\n *\n * Denotes a function that is to be transported to the client-side.\n *\n */\nexport type TransportedFunc<T> = TransportableFunc<T> & {\n  __transport_info: TransportInfo;\n}\n\n/**\n *\n * Attaches necessary transport information to given transportable function.\n *\n * @param func\n * @returns the same function (with transport info attached)\n *\n */\nexport function funcTransport<T>(func: TransportableFunc<T>): TransportedFunc<T> {\n  const trace = callTrace();\n  if (!trace) return func as any; // --> unable to get trace info, perhaps client side code\n\n  (func as any).__transport_info = createInfo(func.name, trace);\n  return func as TransportedFunc<T>;\n}\n\n\n/**\n *\n * @param func\n * @returns attached transport information of given transported function, if any.\n *\n */\nexport function getFuncTransportInfo<T>(func: TransportedFunc<T>) {\n  return func.__transport_info;\n}\n"]}