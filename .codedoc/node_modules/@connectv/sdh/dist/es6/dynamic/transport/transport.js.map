{"version":3,"file":"transport.js","sourceRoot":"","sources":["../../../../src/dynamic/transport/transport.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAY,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAElD,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,wCAAwC,CAAC;AAE1E,OAAO,EAAE,UAAU,EAAE,UAAU,EAAiB,MAAM,kBAAkB,CAAC;AAGzE;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAC,SAA6B;IAChE,OAAQ,SAAiB,CAAC,gBAAgB,CAAC;AAC7C,CAAC;AAGD;;;;;;;GAOG;AACH,MAAM,UAAU,uBAAuB,CAAC,SAA6B,EAAE,IAAmB;IACvF,SAAiB,CAAC,gBAAgB,mCAAQ,IAAI,KAAE,QAAQ,EAAE,KAAK,GAAE,CAAC;AACrE,CAAC;AAGD;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,UAAU,YAAY,KAAK,OAAO,MAAM,EAAE,CAAC,CAAC,CAAC;AAGnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,UAAU,SAAS,CAAC,SAAc;IACtC,MAAM,KAAK,GAAG,SAAS,EAAE,CAAC;IAC1B,IAAI,CAAC,KAAK;QAAE,OAAO,SAAS,CAAC,CAAG,2DAA2D;IAE3F,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAE/C,MAAM,IAAI,GAAG,UAA8B,KAAU,EAAE,QAAa;QAClE,MAAM,EAAE,GAAG,KAAK,CAAC,UAAU,IAAI,YAAY,EAAE,CAAC;QAC9C,MAAM,MAAM,GAAG,4BAAQ,EAAE,EAAE,EAAE;;YACrB,GAAG;;YACG,GAAG;;YACW,GAAG;;YACJ,EAAE;;YAAM,IAAI,CAAC,IAAI;;YACtC,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,YAAY,CAAC,CAAC,GAAG,CACxD,CAAM,GAAG,EAAC,EAAE,gDAAC,OAAA,CAAC,GAAG,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,gBAAgB,EAAY,CAAC,CAAC,CAAA,GAAA,CAC5E,CACF;iBACA,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;gBACpD,GAAG,CAAC,GAAU,CAAC,GAAG,KAAK,CAAC;gBACxB,OAAO,GAAG,CAAC;YACb,CAAC,EAAE,EAAS,CAAC,CAAC;iBACb,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;;YAGvB,KAAK,CAAC,UAAU,CAAA,CAAC;gBACjB,+CAA+C,KAAK,CAAC,UAAU,8CAA8C;gBAC7G,CAAC,CAAA,EAAE;mHAQE,CAAC;QACV,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACzB,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IAEF,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACpC,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { CompType, autoId } from '@connectv/html';\n\nimport { callTrace } from '../../shared/trace';\nimport { ComponentThis } from '../../static';\nimport { recipientPromise } from '../../static/promise/recipient-promise';\n\nimport { createInfo, attachInfo, TransportInfo } from './transport-info';\n\n\n/**\n *\n * @param component\n * @returns all attached `TransportInfo` on the given component, if any.\n *\n */\nexport function getCompTransportInfo(component: CompType<any, any>) {\n  return (component as any).__transport_info;\n}\n\n\n/**\n *\n * Attaches given `TransportInfo` on given component.\n *\n * @param component\n * @param info\n *\n */\nexport function attachCompTransportInfo(component: CompType<any, any>, info: TransportInfo) {\n  (component as any).__transport_info = { ...info, resolved: false };\n}\n\n\n/**\n *\n * Creates a _transport reference_. A _transport reference_ can be used to conduct\n * **broad transport**, i.e. you can have the content that is supposed to be rendered\n * on the client side also replace some server-side-rendered content:\n *\n * ```tsx\n * function myComp(_, renderer) {\n *   const tr = transportRef();\n * \n *   return <fragment>\n *     <StaticComponent _transport={tr}/>       // --> rendered on server-side\n *     <div data-transport={tr}/>               // --> rendered on server-side\n *     <TransportComponent _transport={tr}/>    // --> rendered on client-side, replaces the others.\n *   </fragment>\n * }\n * ```\n * \n * @returns a _transport reference_\n * \n *\n */\nexport function transportRef() { return autoId(); }\n\n\n/**\n *\n * Creates a transport component based on given (original) component.\n * On the server-side, the transport component ensures _CLIENT-SIDE_ rendering\n * of original component on the same spot in the DOM tree with same properties.\n * On the client-side, the transport component is identical to the original component.\n *\n * example:\n * \n * ```tsx\n * import { state } from '@connectv/core';\n * import { transport } from '@connectv/sdh/transport';\n * \n * export function Counter(_, renderer) {\n *   const count = state(0);\n *   return <div onclick={() => count.value++}>You clicked {count} times!</div>;\n * }\n *\n * export const $Counter = transport(Counter);\n * ```\n *\n * In this example, you cannot use `Counter` component on server-side rendering since it needs\n * to bind to user clicks (trying to render it actually results in an error). However, you can\n * utilize `$Counter` instead, and it will ensure that `Counter` is rendered on the same locations\n * on the DOM tree that you rendered `$Counter` on, on the client-side.\n *\n * @note You MUST export both the original component and the transport component, from the same file.\n * This is how the original component is then imported (alongside with any possible dependencies)\n * into client bundles.\n *\n * @note Any properties passed to the transport component will be used in rendering of the original\n * component. However, you CANNOT pass any child elements to the transport component.\n *\n */\nexport function transport(component: any) {\n  const trace = callTrace();\n  if (!trace) return component;   // --> unable to get trace info, perhaps running on client.\n\n  const info = createInfo(component.name, trace);\n\n  const comp = function(this: ComponentThis, props: any, renderer: any) {\n    const id = props._transport || transportRef();\n    const script = <script id={id}>\n(function(){'{'}\n  function load(){'{'}\n    if (window.__sdh_transport){'{'}\n      window.__sdh_transport(\"{id}\", \"{info.hash}\", {\n          Promise.all(\n            Object.keys(props).filter(key => key !== '_transport').map(\n              async key => [key, await this.expose.in(key, recipientPromise<RawValue>())]\n            )\n          )\n          .then(entries => entries.reduce((obj, [key, value]) => {\n            obj[key as any] = value;\n            return obj;\n          }, {} as any))\n          .then(JSON.stringify)\n      });\n      {\n        props._transport?\n        `document.querySelectorAll('[data-transport=\"${props._transport}\"]').forEach(function(node){node.remove()});`\n        :''\n      }\n    }\n  };\n\n  if (document.readyState == 'complete') load();\n  else window.addEventListener('load', load);\n})()\n    </script>;\n    attachInfo(script, info);\n    return script;\n  };\n\n  attachCompTransportInfo(comp, info);\n  return comp;\n}\n"]}