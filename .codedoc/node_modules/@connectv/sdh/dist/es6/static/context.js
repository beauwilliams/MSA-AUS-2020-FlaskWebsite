import { CTX, PluginPriority, isCompContextPlugin, isDefaultReactiveRecipientPlugin, UnhandledComponentContextError } from '@connectv/html';
import { Subscription } from 'rxjs';
import { whenRendered, getLSMarker, WRCallbackHighPriority } from '../shared/lifecycle';
export class ContextPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    prepare(_, __, ___, extras, pluginHost) {
        let _plugin = pluginHost.plugins.find(isDefaultReactiveRecipientPlugin);
        let _default = () => _plugin ? _plugin.defaultContext() : undefined;
        const map = {};
        const context = (key, recipient) => map[key] = map[key] || recipient || _default();
        extras.context = context;
        return (node) => {
            const sub = new Subscription();
            const _ctxPlugins = pluginHost.plugins.filter(isCompContextPlugin);
            if (Object.keys(map).length > 0) {
                whenRendered(node, () => {
                    let _ref = node;
                    if (node instanceof DocumentFragment)
                        _ref = getLSMarker(node);
                    const ctx = CTX.resolve(_ref, Object.keys(map));
                    Object.entries(map).forEach(([key, recipient]) => {
                        const value = ctx[key];
                        if (!_ctxPlugins.find(p => p.wireContext(key, value, recipient, sub, _ref, pluginHost)))
                            throw new UnhandledComponentContextError(key, recipient, value);
                    });
                }, WRCallbackHighPriority);
            }
        };
    }
}
//# sourceMappingURL=context.js.map