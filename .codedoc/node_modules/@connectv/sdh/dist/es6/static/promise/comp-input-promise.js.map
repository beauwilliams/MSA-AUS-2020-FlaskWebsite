{"version":3,"file":"comp-input-promise.js","sourceRoot":"","sources":["../../../../src/static/promise/comp-input-promise.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAkB,cAAc,EACT,MAAM,gBAAgB,CAAC;AAErD,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAoB,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AAI3E,MAAM,OAAO,sBAAsB;IAAnC;QACE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IAgBjC,CAAC;IAdC,QAAQ,CAAC,IAAY,EAAE,IAAS,EAAE,IAAU,EAAE,SAA6B;QACzE,IAAI,SAAS,CAAC,MAAM,IAAI,IAAI,IAAI,SAAS,CAAC,MAAM,IAAI,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;YAC9F,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAA0B,CAAC;YAE9D,IAAI,IAAI,YAAY,UAAU;gBAAE,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClG,IAAI,SAAS,CAAC,IAAI,CAAC;gBAAE,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC7G,IAAI,IAAI,YAAY,OAAO;gBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;gBAC9D,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEzB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import { Observable } from 'rxjs';\nimport { isPinLike } from '@connectv/core';\nimport { CompPropPlugin, PluginPriority, \n          ComponentSignature } from '@connectv/html';\n\nimport { whenRendered } from '../../shared/lifecycle';\nimport { RecipientPromise, isRecipientPromise } from './recipient-promise';\n\n\n\nexport class CompInputPromisePlugin<R, T> implements CompPropPlugin<R, T> {\n  priority = PluginPriority.High;\n\n  wireProp(name: string, prop: any, host: Node, signature: ComponentSignature) {\n    if (signature.inputs && name in signature.inputs && isRecipientPromise(signature.inputs[name])) {\n      const input = signature.inputs[name] as RecipientPromise<any>;\n\n      if (prop instanceof Observable) whenRendered(host, () => prop.toPromise().then(v => input.recieve(v)));\n      else if (isPinLike(prop)) whenRendered(host, () => prop.observable.toPromise().then(v => input.recieve(v.value)));\n      else if (prop instanceof Promise) prop.then(v => input.recieve(v));\n      else input.recieve(prop);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}