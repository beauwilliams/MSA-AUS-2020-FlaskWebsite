import { Observable } from 'rxjs';
import { isPinLike } from '@connectv/core';
import { PluginPriority } from '@connectv/html';
import { isRecipientPromise } from './recipient-promise';
export class CompContextPromisePlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireContext(_, value, recipient, __) {
        if (isRecipientPromise(recipient)) {
            if (isPinLike(value))
                value.observable.toPromise().then(v => recipient.recieve(v.value));
            else if (value instanceof Observable)
                value.toPromise().then(v => recipient.recieve(v));
            else if (value instanceof Promise)
                value.then(v => recipient.recieve(v));
            else
                recipient.recieve(value);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=comp-context-promise.js.map