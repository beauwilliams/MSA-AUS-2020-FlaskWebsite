import { Observable } from 'rxjs';
import { isPinLike } from '@connectv/core';
import { PluginPriority } from '@connectv/html';
import { whenRendered } from '../../shared/lifecycle';
import { isRecipientPromise } from './recipient-promise';
export class CompInputPromisePlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, host, signature) {
        if (signature.inputs && name in signature.inputs && isRecipientPromise(signature.inputs[name])) {
            const input = signature.inputs[name];
            if (prop instanceof Observable)
                whenRendered(host, () => prop.toPromise().then(v => input.recieve(v)));
            else if (isPinLike(prop))
                whenRendered(host, () => prop.observable.toPromise().then(v => input.recieve(v.value)));
            else if (prop instanceof Promise)
                prop.then(v => input.recieve(v));
            else
                input.recieve(prop);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=comp-input-promise.js.map