import { PluginPriority, Marker } from '@connectv/html';
import { attachPromise } from '../../shared/lifecycle';
export class PromisePlugin {
    constructor() {
        this.priority = PluginPriority.Fallback;
    }
    setprop(prop, target, host) {
        if (target instanceof Promise) {
            attachPromise(host, target.then(v => {
                if (typeof v === 'boolean') {
                    if (v)
                        host.setAttribute(prop, '');
                    else
                        host.removeAttribute(prop);
                }
                else
                    host.setAttribute(prop, (v !== undefined) ? v.toString() : '');
            }));
            return true;
        }
        return false;
    }
    append(target, host, renderer) {
        if (target instanceof Promise) {
            const marker = renderer.create(Marker, null);
            host.appendChild(marker);
            attachPromise(host, target.then(v => {
                let _target;
                if (v instanceof Node)
                    _target = v;
                else
                    _target = document.createTextNode((v !== undefined) ? v.toString() : '');
                host.insertBefore(_target, marker);
                marker.remove();
            }));
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=promise.js.map