{"version":3,"file":"recipient-promise.js","sourceRoot":"","sources":["../../../../src/static/promise/recipient-promise.ts"],"names":[],"mappings":"AAQA,MAAM,UAAU,kBAAkB,CAAI,QAAoB;IACxD,OAAO,QAAQ,IAAI,QAAQ,YAAY,OAAO,IAAK,QAAgB,CAAC,YAAY,IAAK,QAAgB,CAAC,OAAO;WACpG,OAAQ,QAAgB,CAAC,OAAO,KAAK,UAAU,CAAC;AAC3D,CAAC;AAGD,MAAM,UAAU,gBAAgB,CAAI,OAA6B;IAC/D,IAAI,QAAQ,GAAoC,GAAG,EAAE,GAAE,CAAC,CAAC;IACzD,MAAM,OAAO,GAAwB,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAQ,CAAC;IAC9F,OAAO,CAAC,YAAY,GAAG,OAAO,IAAI,EAAE,CAAC;IACrC,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC3B,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { CompInputWithOptions, CompInputOptions } from '@connectv/html';\n\n\nexport interface RecipientPromise<T> extends Promise<T>, CompInputWithOptions<T> {\n  recieve: (t: T | PromiseLike<T>) => void;\n}\n\n\nexport function isRecipientPromise<T>(whatever: Promise<T>): whatever is RecipientPromise<T> {\n  return whatever && whatever instanceof Promise && (whatever as any).inputOptions && (whatever as any).recieve\n        && typeof (whatever as any).recieve === 'function';\n}\n\n\nexport function recipientPromise<T>(options?: CompInputOptions<T>): RecipientPromise<T> {\n  let _Resolve: (t: T | PromiseLike<T>) => void = () => {};\n  const promise: RecipientPromise<T> = new Promise((resolve) => { _Resolve = resolve; }) as any;\n  promise.inputOptions = options || {};\n  promise.recieve = _Resolve;\n  return promise;\n}\n"]}