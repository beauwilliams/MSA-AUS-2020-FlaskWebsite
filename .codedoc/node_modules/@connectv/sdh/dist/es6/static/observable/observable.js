import { Observable } from 'rxjs';
import { PluginPriority } from '@connectv/html';
import { attachPromise, whenRendered } from '../../shared/lifecycle';
export class ObservablePlugin {
    constructor() {
        this.priority = PluginPriority.Fallback;
    }
    setprop(prop, target, host) {
        if (target instanceof Observable) {
            whenRendered(host, () => {
                attachPromise(host, target.toPromise().then(v => {
                    if (typeof v === 'boolean') {
                        if (v)
                            host.setAttribute(prop, '');
                        else
                            host.removeAttribute(prop);
                    }
                    else
                        host.setAttribute(prop, (v !== undefined) ? v.toString() : '');
                }));
            });
            return true;
        }
        return false;
    }
    append(target, host) {
        if (target instanceof Observable) {
            let _target = document.createTextNode('');
            whenRendered(host, () => {
                attachPromise(host, target.toPromise().then(v => {
                    _target.textContent = (v !== undefined) ? v.toString() : '';
                }));
            });
            host.appendChild(_target);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=observable.js.map