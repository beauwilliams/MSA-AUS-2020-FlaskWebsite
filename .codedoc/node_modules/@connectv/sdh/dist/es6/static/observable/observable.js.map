{"version":3,"file":"observable.js","sourceRoot":"","sources":["../../../../src/static/observable/observable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAgC,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAE9E,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AAGrE,MAAM,OAAO,gBAAgB;IAA7B;QAIE,aAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;IAsCrC,CAAC;IApCC,OAAO,CAAC,IAAY,EAAE,MAAgC,EAAE,IAAiB;QACvE,IAAI,MAAM,YAAY,UAAU,EAAE;YAChC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE;gBACtB,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAC9C,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;wBAC1B,IAAI,CAAC;4BAAE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;4BAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;qBACjC;;wBAEC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;gBAClE,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,MAAuC,EAAE,IAAU;QACxD,IAAI,MAAM,YAAY,UAAU,EAAE;YAChC,IAAI,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAE1C,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE;gBACtB,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAC9C,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC9D,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAE1B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { PropertyPlugin, AppendPlugin, PluginPriority } from '@connectv/html';\n\nimport { attachPromise, whenRendered } from '../../shared/lifecycle';\n\n\nexport class ObservablePlugin<R, T> implements \n  PropertyPlugin<R | Observable<RawValue>, T>, \n  AppendPlugin<R | Observable<RawValue>, T> {\n\n  priority = PluginPriority.Fallback;\n\n  setprop(prop: string, target: R | Observable<RawValue>, host: HTMLElement) {\n    if (target instanceof Observable) {\n      whenRendered(host, () => {\n        attachPromise(host, target.toPromise().then(v => {\n          if (typeof v === 'boolean') {\n            if (v) host.setAttribute(prop, '');\n            else host.removeAttribute(prop);\n          }\n          else\n            host.setAttribute(prop, (v !== undefined) ? v.toString() : '')\n        }));\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  append(target: R | Node | Observable<RawValue>, host: Node) {\n    if (target instanceof Observable) {\n      let _target = document.createTextNode('');\n\n      whenRendered(host, () => {\n        attachPromise(host, target.toPromise().then(v => {\n          _target.textContent = (v !== undefined) ? v.toString() : '';\n        }));\n      });\n\n      host.appendChild(_target);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}