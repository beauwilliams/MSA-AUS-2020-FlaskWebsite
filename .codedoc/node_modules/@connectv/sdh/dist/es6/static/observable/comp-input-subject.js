import { Subject, Observable, from, of } from 'rxjs';
import { isPinLike } from '@connectv/core';
import { PluginPriority } from '@connectv/html';
import { whenRendered } from '../../shared/lifecycle';
export class CompInputSubjectPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, host, signature) {
        if (signature.inputs && name in signature.inputs && signature.inputs[name] instanceof Subject) {
            const input = signature.inputs[name];
            if (prop instanceof Observable)
                whenRendered(host, () => prop.subscribe(input));
            else if (isPinLike(prop))
                whenRendered(host, () => prop.subscribe(input));
            else if (prop instanceof Promise)
                whenRendered(host, () => from(prop).subscribe(input));
            else
                whenRendered(host, () => of(prop).subscribe(input));
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=comp-input-subject.js.map