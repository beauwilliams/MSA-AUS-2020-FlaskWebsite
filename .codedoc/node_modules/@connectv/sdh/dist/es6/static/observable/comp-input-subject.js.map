{"version":3,"file":"comp-input-subject.js","sourceRoot":"","sources":["../../../../src/static/observable/comp-input-subject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAErD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAsC,MAAM,gBAAgB,CAAC;AAEpF,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AAGtD,MAAM,OAAO,sBAAsB;IAAnC;QAgBE,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;IACjC,CAAC;IAhBC,QAAQ,CAAC,IAAY,EAAE,IAAS,EAAE,IAAU,EAAE,SAA6B;QACzE,IAAI,SAAS,CAAC,MAAM,IAAI,IAAI,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,EAAE;YAC7F,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAiB,CAAC;YAErD,IAAI,IAAI,YAAY,UAAU;gBAAE,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC3E,IAAI,SAAS,CAAC,IAAI,CAAC;gBAAE,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;iBACrE,IAAI,IAAI,YAAY,OAAO;gBAAE,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;;gBACnF,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YAEzD,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAGF","sourcesContent":["import { Subject, Observable, from, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { isPinLike } from '@connectv/core';\nimport { PluginPriority, ComponentSignature, CompPropPlugin } from '@connectv/html';\n\nimport { whenRendered } from '../../shared/lifecycle';\n\n\nexport class CompInputSubjectPlugin<R, T> implements CompPropPlugin<R, T> {\n  wireProp(name: string, prop: any, host: Node, signature: ComponentSignature) {\n    if (signature.inputs && name in signature.inputs && signature.inputs[name] instanceof Subject) {\n      const input = signature.inputs[name] as Subject<any>;\n\n      if (prop instanceof Observable) whenRendered(host, () => prop.subscribe(input));\n      else if (isPinLike(prop)) whenRendered(host, () => prop.subscribe(input));\n      else if (prop instanceof Promise) whenRendered(host, () => from(prop).subscribe(input));\n      else whenRendered(host, () => of(prop).subscribe(input));\n\n      return true;\n    }\n\n    return false;\n  }\n\n  priority = PluginPriority.High;\n}\n"]}