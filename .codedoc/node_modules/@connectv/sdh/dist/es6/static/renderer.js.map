{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../../src/static/renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAC9B,SAAS,EACT,eAAe,EACf,eAAe,EACf,YAAY,EACZ,qBAAqB,EAEL,MAAM,gBAAgB,CAAC;AAG/C,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAC1C,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAG9C;;;;;;;GAOG;AACH,MAAM,OAAO,cAAe,SAAQ,kBAA6C;IAC/E;QACE,KAAK,CACH,IAAI,SAAS,EAA6B,EAC1C,IAAI,eAAe,EAA6B,EAChD,IAAI,eAAe,EAA6B,EAChD,IAAI,eAAe,EAA6B,EAChD,IAAI,YAAY,EAA6B,EAC7C,IAAI,qBAAqB,EAA6B,EACtD,IAAI,aAAa,EAA6B,EAC9C,GAAG,iBAAiB,EAA6B,EACjD,GAAG,cAAc,EAA6B,EAC9C,GAAG,UAAU,EAA6B,CAC3C,CAAC;IACJ,CAAC;CACF;AAGD;;;;GAIG;AACH,MAAM,OAAgB,eAAgB,SAAQ,SAAoC;CAAG","sourcesContent":["import { ExtensibleRenderer, Component,\n        RefPlugin, \n        InnerHTMLPlugin, \n        ComponentPlugin, \n        ExposePlugin, \n        CheckCompInputsPlugin, \n        ExposeFunction,\n        ContextFunction} from '@connectv/html';\n\nimport { Renderable, ComponentType } from './types';\nimport { observablePlugins } from './observable';\nimport { pinPlugins } from './pin';\nimport { promisePlugins } from './promise';\nimport { ContextPlugin } from './context';\nimport { TransportPlugin } from './transport';\n\n\n/**\n * \n * A renderer (child of `ExtensibleRenderer` class from `@connectv/html`)\n * specifically equipped to handle server-side rendering. Instances of this class\n * will be equipped with specialized plugins for SSR `Pin` (`@connectv/core`) or `Observable` (`rxjs`)\n * objects, alongside plugins for enabling rendering `Promise` objects on the DOM.\n * \n */\nexport class StaticRenderer extends ExtensibleRenderer<Renderable, ComponentType> {\n  constructor() {\n    super(\n      new RefPlugin<Renderable, ComponentType>(),\n      new InnerHTMLPlugin<Renderable, ComponentType>(),\n      new ComponentPlugin<Renderable, ComponentType>(),\n      new TransportPlugin<Renderable, ComponentType>(),\n      new ExposePlugin<Renderable, ComponentType>(),\n      new CheckCompInputsPlugin<Renderable, ComponentType>(),\n      new ContextPlugin<Renderable, ComponentType>(),\n      ...observablePlugins<Renderable, ComponentType>(),\n      ...promisePlugins<Renderable, ComponentType>(),\n      ...pinPlugins<Renderable, ComponentType>(),\n    );\n  }\n}\n\n\n/**\n * \n * The base class for SSR-compatible class-based components.\n * \n */\nexport abstract class StaticComponent extends Component<Renderable, ComponentType> {}\n\n\n/**\n * \n * `this` type for SSR-compatible functional components.\n * \n */\nexport type ComponentThis = {\n  expose: ExposeFunction;\n  context: ContextFunction;\n}\n\n\n/**\n * \n * _safe_ `this` type for SSR-compatible functional components.\n * It is _safe_ since it takes into consideration possibility of\n * component functions not being provided by renderer plugins, and is\n * the safer option to use in contexts where custom renderers with\n * unknown specifications and capabilities might be utilizied to render \n * a particular component.\n * \n */\nexport type SafeComponentThis = {\n  expose?: ExposeFunction;\n  context?: ContextFunction;\n}\n"]}