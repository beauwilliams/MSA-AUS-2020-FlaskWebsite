{"version":3,"file":"compile.js","sourceRoot":"","sources":["../../../src/static/compile.ts"],"names":[],"mappings":"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","sourcesContent":["import { JSDOM } from 'jsdom';\nconst registerGlobalDom = require('jsdom-global');\nimport { Plugin } from '@connectv/html';\n\nimport { StaticRenderer } from './renderer';\nimport { Compiled } from './compiled';\nimport { itsRendered } from '../shared/lifecycle';\nimport { isPostProcessPlugin } from './types';\n\n\n/**\n *\n * Denotes a function that renders some HTML content (in form of an HTML Node)\n * using given renderer and document objects.\n *\n */\nexport type RenderFunc = (\n    renderer: StaticRenderer, \n    document: Document,\n  ) => Node | Promise<Node>;\n\n\nfunction _render(el: Node | Node[] | null, target: HTMLElement, renderer: StaticRenderer) {\n  if (!el) return;\n\n  let nodes = <Node[]>[];\n  if (el instanceof HTMLElement) el.childNodes.forEach(n => nodes.push(n));\n  else if (el instanceof Node) return;\n  else nodes = el;\n\n  nodes.forEach(n => renderer.render(n).on(target));\n}\n\n\nfunction _copy_attrs(el: Node | null, target: HTMLElement) {\n  if (!el || !(el instanceof HTMLElement)) return;\n\n  for (let i = 0; i < el.attributes.length; i++) {\n    const attr = el.attributes.item(i);\n    if (attr) target.setAttribute(attr.name, attr.value);\n  }\n}\n\n\n/**\n *\n * Will create a `Compiled` object from given render function. A render function\n * is any function that returns an HTML Node (or a promise of one), given the proper\n * renderer and document objects.\n *\n * It will also apply any post processors to the `Compiled` object from plugins\n * that are `PostProcessPlugins`, allowing given renderer plugins to do some post processing\n * on the final document.\n *\n * @param render the render function\n * @param plugins a list of renderer plugins to be attached to the renderer\n *\n */\nexport function compile(render: RenderFunc, ...plugins: Plugin<any, any>[]) {\n  try { document } catch(_) { registerGlobalDom(); }\n\n  const dom = new JSDOM('<!DOCTYPE html>');\n  const renderer = new StaticRenderer().plug(...plugins);\n\n  const compiled = new Compiled(dom, (async() => {\n    const node = await render(\n      renderer,\n      dom.window.document\n    );\n\n    if (node instanceof HTMLHtmlElement) {\n      _render(node.firstChild, dom.window.document.head, renderer);\n      _render(node.lastChild, dom.window.document.body, renderer);\n      _copy_attrs(node.lastChild, dom.window.document.body);\n    }\n    else if (node instanceof HTMLHeadElement) {\n      _render(node, dom.window.document.head, renderer);\n    }\n    else if (node instanceof HTMLBodyElement) {\n      _render(node, dom.window.document.body, renderer);\n      _copy_attrs(node, dom.window.document.body);\n    }\n    else {\n      _render([node], dom.window.document.body, renderer);\n    }\n\n    itsRendered(dom.window.document);\n  })());\n\n  renderer.plugins.filter(isPostProcessPlugin).forEach(plugin => compiled.post(doc => plugin.post(doc)));\n  return compiled;\n}\n"]}