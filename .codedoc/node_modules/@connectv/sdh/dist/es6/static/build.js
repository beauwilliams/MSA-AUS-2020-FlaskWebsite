var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { compile } from './compile';
export function build(builder, ...plugins) {
    let pluginBuilder;
    if (plugins && plugins.length > 0) {
        pluginBuilder = (f) => plugins.map(p => (typeof p === 'function') ? p(f) : p);
    }
    return function (f) {
        const plugins = pluginBuilder ? pluginBuilder(f) : [];
        return Object.assign(Object.assign({}, f), { content: compile((renderer, document) => builder(f.content, renderer, f, document), ...plugins) });
    };
}
/**
 *
 * Convenience function for rxline files. Returns a transform that queues the
 * given `PostProcessor` function to be applied on contents of given file,
 * assuming the contents are some compiled document model.
 *
 * @param processor
 *
 */
export function post(processor) {
    return function (f) {
        f.content.post(processor);
        return f;
    };
}
/**
 *
 * Convenience function for rxline files. Returns a transform that serializes
 * contents of given file, assuming the contents are some compiled document model.
 *
 */
export function serialize() {
    return function (f) {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.assign(Object.assign({}, f), { content: yield f.content.serialize() });
        });
    };
}
/**
 *
 * Convenience function for rxline files. Returns a transform that
 * saves the contents of the given file, assuming the contents are some
 * compiled document model, to the address of the file itself.
 *
 */
export function saveCompiledFile() {
    return function (f) {
        return __awaiter(this, void 0, void 0, function* () {
            return f.content.save(f.path, f.root);
        });
    };
}
//# sourceMappingURL=build.js.map