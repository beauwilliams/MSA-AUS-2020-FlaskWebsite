{"version":3,"file":"compiled.js","sourceRoot":"","sources":["../../../src/static/compiled.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEtC,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAY9C;;;;;;;GAOG;AACH,MAAM,OAAO,QAAQ;IAInB;;;;;;;OAOG;IACH,YAAqB,GAAU,EAAW,KAAoB;QAAzC,QAAG,GAAH,GAAG,CAAO;QAAW,UAAK,GAAL,KAAK,CAAe;QAXtD,oBAAe,GAAoB,EAAE,CAAC;IAWmB,CAAC;IAElE;;;;;;;;;OASG;IACH,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,CAAC,GAAQ,EAAE;gBAC9B,MAAM,IAAI,CAAC,KAAK,CAAC;gBACjB,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC7C,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAE7C,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,eAAe,EAAE;oBAC1C,MAAM,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC3C;gBAED,OAAO,IAAI,CAAC;YACd,CAAC,CAAA,CAAC,EAAE,CAAC;SACN;QAED,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACG,SAAS;;YACb,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;QAC9B,CAAC;KAAA;IAED;;;;;;;;OAQG;IACG,IAAI,CAAC,IAAY,EAAE,IAAa;;YACpC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,OAAO,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,EAAG,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACjF,CAAC;KAAA;IAED;;;;;;;;;OASG;IACH,IAAI,CAAC,SAAwB;QAC3B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { JSDOM } from 'jsdom';\nimport { writeFile } from 'rxline/fs';\n\nimport { isReady } from '../shared/lifecycle';\n\n\n/**\n * \n * denotes a post processor function, which executes some logic\n * on some compiled and ready for serialization html document.\n * \n */\nexport type PostProcessor = (html: HTMLDocument) => void | Promise<void>;\n\n\n/**\n * \n * Represents a compiled HTML Document. A compiled HTML Document is one\n * whose structure is determined (typically via some render function),\n * perhaps should wait on some data (denoted by some promises),\n * and then can be rendered either to a string or to a file.\n * \n */\nexport class Compiled {\n  private _postProcessors: PostProcessor[] = [];\n  private _readyPromise: Promise<boolean>;\n\n  /**\n   * \n   * @param dom   the document model object\n   * @param ready a general promise to wait for before this compiled document can be\n   *              serialized / saved to a file. This is typically used to render all necessary\n   *              DOM structure to the given document model object.\n   * \n   */\n  constructor(readonly dom: JSDOM, readonly ready: Promise<void>) {}\n\n  /**\n   * \n   * @returns `true` when the document model is fully rendered and all necessary data\n   *           are also fetched. DOES NOT RETURN FALSE, waits for readiness of the document\n   *           instead. also runs all post processing passed via `.post()` method.\n   * \n   * @note this method is idempotent, i.e. it will construct one singular promise\n   *       and will return that promise on subsequent calls.\n   * \n   */\n  isReady() {\n    if (!this._readyPromise) {\n      this._readyPromise = (async() => {\n        await this.ready;\n        await isReady(this.dom.window.document.head);\n        await isReady(this.dom.window.document.body);\n  \n        for (let processor of this._postProcessors) {\n          await processor(this.dom.window.document);\n        }\n  \n        return true;\n      })();\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * \n   * @returns a string representation of the compiled document model.\n   * \n   */\n  async serialize() {\n    await this.isReady();\n    return this.dom.serialize();\n  }\n\n  /**\n   * \n   * saves the compiled document model to a file at given path (and given root).\n   * \n   * @param path the path of the saved file\n   * @param root the root of the saved file\n   * @returns a `rxline.File<string>` object representing stored string content and file address.\n   * \n   */\n  async save(path: string, root?: string) {\n    await this.isReady();\n    return writeFile()({ path, root: root || '',  content: this.dom.serialize() });\n  }\n\n  /**\n   * \n   * queues up given post processor. the processor will be executed\n   * on the document model after it finishes compilation and all of its\n   * required data are ready.\n   * \n   * @param processor\n   * @returns `this` for chaining convenience.\n   * \n   */\n  post(processor: PostProcessor) {\n    this._postProcessors.push(processor);\n    return this;\n  }\n}\n"]}