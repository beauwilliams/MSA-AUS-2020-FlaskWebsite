{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/static/types.ts"],"names":[],"mappings":"AAmBA;;;;;GAKG;AACH,MAAM,UAAU,mBAAmB,CAAO,MAAoB;IAC5D,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,CAAE,MAAc,CAAC,IAAI,IAAI,OAAQ,MAAc,CAAC,IAAI,KAAK,UAAU,CAAC;AAC1F,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { PinLike } from '@connectv/core';\nimport { CompType, Plugin } from '@connectv/html';\n\n\nexport type Renderable = RawValue | Promise<RawValue> | Promise<Node> | Observable<RawValue> | PinLike;\nexport type ComponentType = string | CompType<Renderable, string>;\n\n\n/**\n *\n * Denotes a plugin that conducts post-processing on the final HTML document.\n *\n */\nexport interface PostProcessPlugin<R, T> extends Plugin<R, T> {\n  post(html: HTMLDocument): void | Promise<void>;\n}\n\n\n/**\n *\n * @param plugin\n * @returns `true` if given plugin is a `PostProcessPlugin`, `false` otherwise.\n *\n */\nexport function isPostProcessPlugin<R, T>(plugin: Plugin<R, T>): plugin is PostProcessPlugin<R, T> {\n  return !!plugin && !!(plugin as any).post && typeof (plugin as any).post === 'function';\n}\n"]}