import { Observable, from } from 'rxjs';
import { wrap, value, isPinLike } from '@connectv/core';
import { PluginPriority } from '@connectv/html';
export class CompInputPinPlugin {
    constructor() {
        this.priority = PluginPriority.High;
    }
    wireProp(name, prop, _, signature) {
        if (signature.inputs && name in signature.inputs && isPinLike(signature.inputs[name])) {
            const input = signature.inputs[name];
            if (prop instanceof Observable)
                wrap(prop).to(input);
            else if (isPinLike(prop))
                prop.to(input);
            else if (prop instanceof Promise)
                wrap(from(prop)).to(input);
            else
                value(prop).to(input);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=comp-input-pin.js.map