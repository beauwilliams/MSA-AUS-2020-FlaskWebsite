{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAEA,cAAc,UAAU,CAAC;AACzB,cAAc,UAAU,CAAC;AACzB,cAAc,WAAW,CAAC;AAG1B,OAAO,EAAE,gBAAgB,EAAY,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,UAAU,EAAS,MAAM,WAAW,CAAC;AAmC9C,MAAM,UAAU,IAAI,CAAC,MAAe,EAAE,MAAsB;IAC1D,IAAI,MAAM;QAAE,OAAO,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;QACzC,OAAO,gBAAgB,EAAE,CAAC;AACjC,CAAC;AAED,OAAO,EAAE,UAAU,IAAI,IAAI,EAAE,MAAM,WAAW,CAAC","sourcesContent":["import { Configuration } from 'webpack';\n\nexport * from './shared';\nexport * from './static';\nexport * from './dynamic';\n\n\nimport { saveCompiledFile, Compiled } from './static';\nimport { saveBundle, Bundle} from './dynamic';\nimport { Function } from 'rxline';\nimport { File } from 'rxline/fs';\n\n\n/**\n * \n * Convenience function for rxline files. Returns a transform that\n * saves the contents of the given file, assuming the contents are some\n * compiled document model, to the address of the file itself.\n * \n */\nexport function save(): Function<File<Compiled>, File<string>>;\n\n/**\n *\n * Packs and stores given bundle on the file system.\n * Also stores corresponding metadata alongside the bundle.\n *\n * For using your custom programmatic bundler instead of webpack,\n * you can do the following:\n * \n * ```typescript\n * async function mySaveBundle(bundle: Bundle) {\n *   await packWith(myPackFunc)(bundle);\n *   await saveMeta(bundle);\n * }\n * ```\n *\n * @param bundle\n * @param config web-pack configuration override\n * @returns the given bundle after the process is finished.\n *\n */\nexport function save(bundle: Bundle, config?: Configuration): Promise<Bundle>;\nexport function save(bundle?: Bundle, config?: Configuration) {\n  if (bundle) return saveBundle(bundle, config);\n  else return saveCompiledFile();\n}\n\nexport { loadBundle as load } from './dynamic';\n"]}