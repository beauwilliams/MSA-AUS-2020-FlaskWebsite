"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var fs_1 = require("rxline/fs");
var transport_info_1 = require("./transport/transport-info");
/**
 *
 * @param bundle
 * @returns the standard address of the meta file for given bundle.
 * @note that the address might not correspond to an actual file on the filesystem. This
 * can happen if the bundle has never been saved to the filesystem with its current path,
 * storing its meta data was omitted from its saving process, or the metadata file was lost
 * afterwards.
 *
 */
function metafile(bundle) {
    var _a = path_1.parse(bundle.path), dir = _a.dir, name = _a.name;
    return path_1.join(dir, name + '.meta.json');
}
exports.metafile = metafile;
/**
 *
 * Saves the meta data of given bundle to filesystem. This meta data contains
 * info about which transport components does the bundle contain and is useful
 * for subsequent reloading the bundle from filesystem.
 *
 * @param bundle
 * @returns a `rxline` file corresponding to the stored meta data file.
 *
 */
function saveMeta(bundle) {
    var meta = {
        init: bundle.initImports.map(transport_info_1.leanInfo),
        components: bundle.imports.map(transport_info_1.leanInfo),
    };
    if (bundle.rendererImport)
        meta.renderer = transport_info_1.leanInfo(bundle.rendererImport);
    return fs_1.writeFile()({
        path: metafile(bundle),
        root: '',
        content: JSON.stringify(meta, undefined, 2)
    });
}
exports.saveMeta = saveMeta;
/**
 *
 * @param bundle
 * @returns the stored metadata of the given bundle.
 * @throws if the metadata file cannot be found.
 * @see metafile()
 *
 */
function loadMeta(bundle) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, fs_1.readFile()({
                            path: metafile(bundle),
                            root: '',
                            content: undefined
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).content])];
            }
        });
    });
}
exports.loadMeta = loadMeta;
//# sourceMappingURL=meta.js.map