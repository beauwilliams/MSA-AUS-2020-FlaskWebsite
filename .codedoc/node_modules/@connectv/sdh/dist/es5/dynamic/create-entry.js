"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("rxline/fs");
function normalize(imports) {
    var nameCounter = {};
    var res = [];
    imports.forEach(function (i) {
        var ni = __assign(__assign({}, i), { ogname: i.name });
        if (ni.name in nameCounter)
            ni.name = ni.name + nameCounter[ni.name];
        nameCounter[ni.name] = (nameCounter[ni.name] || 0) + 1;
        res.push(ni);
    });
    return res;
}
function normalImport(info) {
    return "import { " + ((info.ogname !== info.name) ? info.ogname + " as " + info.name : info.name) + " } from '" + info.filename + "';";
}
function createEntry(path, imports, rendererImport, initImports) {
    var normal = normalize(imports);
    var initNormal = normalize(initImports || []);
    var factory = {
        _import: {
            _artifact: 'Renderer',
            _ref: '@connectv/html'
        },
        _code: 'const renderer = new Renderer();',
    };
    if (rendererImport) {
        factory._import = {
            _artifact: rendererImport.name,
            _ref: rendererImport.filename,
        };
        factory._code = "const renderer = " + factory._import._artifact + "();";
    }
    return fs_1.writeFile()({ root: '', path: path, content: "import { " + factory._import._artifact + " } from '" + factory._import._ref + "';\n" + initNormal.map(function (info) { return normalImport(info) + (info.name + "();"); }).join('\n') + "\n" + normal.map(normalImport).join('\n') + "\n\nconst components = {\n" + normal.map(function (info) { return "  '" + info.hash + "': " + info.name; }).join(',\n') + "\n};\n\n" + factory._code + "\nconst ogtransport = window.__sdh_transport;\nwindow.__sdh_transport = function(id, hash, props) {\n  if (hash in components) {\n    const target = document.getElementById(id);\n    renderer.render(renderer.create(components[hash], props)).after(target);\n    target.remove();\n  }\n  else if (ogtransport) ogtransport(id, hash, props);\n}\n"
    });
}
exports.createEntry = createEntry;
//# sourceMappingURL=create-entry.js.map