"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var crypto_1 = require("crypto");
var lifecycle_1 = require("../../shared/lifecycle");
function hash(x) {
    return crypto_1.createHash('md5').update(x).digest('base64').toString();
}
/**
 *
 * @param name
 * @param trace
 * @returns a `TransportInfo` based on given artifact name and given NodeJS trace.
 *
 */
function createInfo(name, trace) {
    var filename = (trace.getFileName() || '').split(path_1.sep).join('/');
    return { name: name, filename: filename, hash: hash(filename + '::' + name), resolved: false };
}
exports.createInfo = createInfo;
/**
 *
 * Attaches given `TransportInfo` to given `Node`.
 *
 * @param node
 * @param info
 *
 */
function attachInfo(node, info) {
    if (node instanceof DocumentFragment)
        attachInfo(lifecycle_1.getLSMarker(node), info);
    else
        node.__transport_info = info;
}
exports.attachInfo = attachInfo;
/**
 *
 * @param node
 * @returns all attached `TransportInfo` on given `Node`
 *
 */
function fetchInfo(node) {
    if (node instanceof DocumentFragment)
        return fetchInfo(lifecycle_1.getLSMarker(node));
    else {
        var res_1 = [];
        var info = node.__transport_info;
        if (info)
            res_1.push(info);
        node.childNodes.forEach(function (child) { return res_1 = res_1.concat(fetchInfo(child)); });
        return res_1;
    }
}
exports.fetchInfo = fetchInfo;
/**
 *
 * @param info
 * @returns a lean version of the transport info, omitting runtime-data.
 *
 */
function leanInfo(info) {
    return {
        name: info.name,
        filename: info.filename,
        hash: info.hash
    };
}
exports.leanInfo = leanInfo;
//# sourceMappingURL=transport-info.js.map