"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = require("@connectv/html");
var trace_1 = require("../../shared/trace");
var recipient_promise_1 = require("../../static/promise/recipient-promise");
var transport_info_1 = require("./transport-info");
/**
 *
 * @param component
 * @returns all attached `TransportInfo` on the given component, if any.
 *
 */
function getCompTransportInfo(component) {
    return component.__transport_info;
}
exports.getCompTransportInfo = getCompTransportInfo;
/**
 *
 * Attaches given `TransportInfo` on given component.
 *
 * @param component
 * @param info
 *
 */
function attachCompTransportInfo(component, info) {
    component.__transport_info = __assign(__assign({}, info), { resolved: false });
}
exports.attachCompTransportInfo = attachCompTransportInfo;
/**
 *
 * Creates a _transport reference_. A _transport reference_ can be used to conduct
 * **broad transport**, i.e. you can have the content that is supposed to be rendered
 * on the client side also replace some server-side-rendered content:
 *
 * ```tsx
 * function myComp(_, renderer) {
 *   const tr = transportRef();
 *
 *   return <fragment>
 *     <StaticComponent _transport={tr}/>       // --> rendered on server-side
 *     <div data-transport={tr}/>               // --> rendered on server-side
 *     <TransportComponent _transport={tr}/>    // --> rendered on client-side, replaces the others.
 *   </fragment>
 * }
 * ```
 *
 * @returns a _transport reference_
 *
 *
 */
function transportRef() { return html_1.autoId(); }
exports.transportRef = transportRef;
/**
 *
 * Creates a transport component based on given (original) component.
 * On the server-side, the transport component ensures _CLIENT-SIDE_ rendering
 * of original component on the same spot in the DOM tree with same properties.
 * On the client-side, the transport component is identical to the original component.
 *
 * example:
 *
 * ```tsx
 * import { state } from '@connectv/core';
 * import { transport } from '@connectv/sdh/transport';
 *
 * export function Counter(_, renderer) {
 *   const count = state(0);
 *   return <div onclick={() => count.value++}>You clicked {count} times!</div>;
 * }
 *
 * export const $Counter = transport(Counter);
 * ```
 *
 * In this example, you cannot use `Counter` component on server-side rendering since it needs
 * to bind to user clicks (trying to render it actually results in an error). However, you can
 * utilize `$Counter` instead, and it will ensure that `Counter` is rendered on the same locations
 * on the DOM tree that you rendered `$Counter` on, on the client-side.
 *
 * @note You MUST export both the original component and the transport component, from the same file.
 * This is how the original component is then imported (alongside with any possible dependencies)
 * into client bundles.
 *
 * @note Any properties passed to the transport component will be used in rendering of the original
 * component. However, you CANNOT pass any child elements to the transport component.
 *
 */
function transport(component) {
    var trace = trace_1.callTrace();
    if (!trace)
        return component; // --> unable to get trace info, perhaps running on client.
    var info = transport_info_1.createInfo(component.name, trace);
    var comp = function (props, renderer) {
        var _this = this;
        var id = props._transport || transportRef();
        var script = renderer.create("script", { id: id },
            "(function()",
            '{',
            "function load()",
            '{',
            "if (window.__sdh_transport)",
            '{',
            "window.__sdh_transport(\"",
            id,
            "\", \"",
            info.hash,
            "\", ",
            Promise.all(Object.keys(props).filter(function (key) { return key !== '_transport'; }).map(function (key) { return __awaiter(_this, void 0, void 0, function () { var _a; return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = [key];
                        return [4 /*yield*/, this.expose.in(key, recipient_promise_1.recipientPromise())];
                    case 1: return [2 /*return*/, _a.concat([_b.sent()])];
                }
            }); }); }))
                .then(function (entries) { return entries.reduce(function (obj, _a) {
                var key = _a[0], value = _a[1];
                obj[key] = value;
                return obj;
            }, {}); })
                .then(JSON.stringify),
            ");",
            props._transport ?
                "document.querySelectorAll('[data-transport=\"" + props._transport + "\"]').forEach(function(node){node.remove()});"
                : '',
            "} }; if (document.readyState == 'complete') load(); else window.addEventListener('load', load); })()");
        transport_info_1.attachInfo(script, info);
        return script;
    };
    attachCompTransportInfo(comp, info);
    return comp;
}
exports.transport = transport;
//# sourceMappingURL=transport.js.map