"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsdom_1 = require("jsdom");
var registerGlobalDom = require('jsdom-global');
var renderer_1 = require("./renderer");
var compiled_1 = require("./compiled");
var lifecycle_1 = require("../shared/lifecycle");
var types_1 = require("./types");
function _render(el, target, renderer) {
    if (!el)
        return;
    var nodes = [];
    if (el instanceof HTMLElement)
        el.childNodes.forEach(function (n) { return nodes.push(n); });
    else if (el instanceof Node)
        return;
    else
        nodes = el;
    nodes.forEach(function (n) { return renderer.render(n).on(target); });
}
function _copy_attrs(el, target) {
    if (!el || !(el instanceof HTMLElement))
        return;
    for (var i = 0; i < el.attributes.length; i++) {
        var attr = el.attributes.item(i);
        if (attr)
            target.setAttribute(attr.name, attr.value);
    }
}
/**
 *
 * Will create a `Compiled` object from given render function. A render function
 * is any function that returns an HTML Node (or a promise of one), given the proper
 * renderer and document objects.
 *
 * It will also apply any post processors to the `Compiled` object from plugins
 * that are `PostProcessPlugins`, allowing given renderer plugins to do some post processing
 * on the final document.
 *
 * @param render the render function
 * @param plugins a list of renderer plugins to be attached to the renderer
 *
 */
function compile(render) {
    var _a;
    var _this = this;
    var plugins = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        plugins[_i - 1] = arguments[_i];
    }
    try {
        document;
    }
    catch (_) {
        registerGlobalDom();
    }
    var dom = new jsdom_1.JSDOM('<!DOCTYPE html>');
    var renderer = (_a = new renderer_1.StaticRenderer()).plug.apply(_a, plugins);
    var compiled = new compiled_1.Compiled(dom, (function () { return __awaiter(_this, void 0, void 0, function () {
        var node;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(renderer, dom.window.document)];
                case 1:
                    node = _a.sent();
                    if (node instanceof HTMLHtmlElement) {
                        _render(node.firstChild, dom.window.document.head, renderer);
                        _render(node.lastChild, dom.window.document.body, renderer);
                        _copy_attrs(node.lastChild, dom.window.document.body);
                    }
                    else if (node instanceof HTMLHeadElement) {
                        _render(node, dom.window.document.head, renderer);
                    }
                    else if (node instanceof HTMLBodyElement) {
                        _render(node, dom.window.document.body, renderer);
                        _copy_attrs(node, dom.window.document.body);
                    }
                    else {
                        _render([node], dom.window.document.body, renderer);
                    }
                    lifecycle_1.itsRendered(dom.window.document);
                    return [2 /*return*/];
            }
        });
    }); })());
    renderer.plugins.filter(types_1.isPostProcessPlugin).forEach(function (plugin) { return compiled.post(function (doc) { return plugin.post(doc); }); });
    return compiled;
}
exports.compile = compile;
//# sourceMappingURL=compile.js.map