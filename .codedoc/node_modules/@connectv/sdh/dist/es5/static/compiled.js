"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("rxline/fs");
var lifecycle_1 = require("../shared/lifecycle");
/**
 *
 * Represents a compiled HTML Document. A compiled HTML Document is one
 * whose structure is determined (typically via some render function),
 * perhaps should wait on some data (denoted by some promises),
 * and then can be rendered either to a string or to a file.
 *
 */
var Compiled = /** @class */ (function () {
    /**
     *
     * @param dom   the document model object
     * @param ready a general promise to wait for before this compiled document can be
     *              serialized / saved to a file. This is typically used to render all necessary
     *              DOM structure to the given document model object.
     *
     */
    function Compiled(dom, ready) {
        this.dom = dom;
        this.ready = ready;
        this._postProcessors = [];
    }
    /**
     *
     * @returns `true` when the document model is fully rendered and all necessary data
     *           are also fetched. DOES NOT RETURN FALSE, waits for readiness of the document
     *           instead. also runs all post processing passed via `.post()` method.
     *
     * @note this method is idempotent, i.e. it will construct one singular promise
     *       and will return that promise on subsequent calls.
     *
     */
    Compiled.prototype.isReady = function () {
        var _this = this;
        if (!this._readyPromise) {
            this._readyPromise = (function () { return __awaiter(_this, void 0, void 0, function () {
                var _i, _a, processor;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.ready];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, lifecycle_1.isReady(this.dom.window.document.head)];
                        case 2:
                            _b.sent();
                            return [4 /*yield*/, lifecycle_1.isReady(this.dom.window.document.body)];
                        case 3:
                            _b.sent();
                            _i = 0, _a = this._postProcessors;
                            _b.label = 4;
                        case 4:
                            if (!(_i < _a.length)) return [3 /*break*/, 7];
                            processor = _a[_i];
                            return [4 /*yield*/, processor(this.dom.window.document)];
                        case 5:
                            _b.sent();
                            _b.label = 6;
                        case 6:
                            _i++;
                            return [3 /*break*/, 4];
                        case 7: return [2 /*return*/, true];
                    }
                });
            }); })();
        }
        return this._readyPromise;
    };
    /**
     *
     * @returns a string representation of the compiled document model.
     *
     */
    Compiled.prototype.serialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isReady()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.dom.serialize()];
                }
            });
        });
    };
    /**
     *
     * saves the compiled document model to a file at given path (and given root).
     *
     * @param path the path of the saved file
     * @param root the root of the saved file
     * @returns a `rxline.File<string>` object representing stored string content and file address.
     *
     */
    Compiled.prototype.save = function (path, root) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isReady()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, fs_1.writeFile()({ path: path, root: root || '', content: this.dom.serialize() })];
                }
            });
        });
    };
    /**
     *
     * queues up given post processor. the processor will be executed
     * on the document model after it finishes compilation and all of its
     * required data are ready.
     *
     * @param processor
     * @returns `this` for chaining convenience.
     *
     */
    Compiled.prototype.post = function (processor) {
        this._postProcessors.push(processor);
        return this;
    };
    return Compiled;
}());
exports.Compiled = Compiled;
//# sourceMappingURL=compiled.js.map