"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("rxline/fs");
var sdh_1 = require("@connectv/sdh");
/**
 *
 * A rendering plugin representing an external stylesheet containing styles of a given theme.
 * Wraps a `ThemePlugin` object, adding an external stylesheet reference to a given HTML document
 * in post-processing and providing a method for saving the external stylesheet file.
 *
 * @note This class is designed to be used ON SERVER-SIDE ONLY, since you cannot create external stylesheets
 * on the client-side. Be careful not to accidentally import it in your client-side bundles.
 *
 */
var ExternalSheet = /** @class */ (function () {
    /**
     *
     * @param theme the wrapped theme plugin
     * @param url   the url on which the external stylesheet should be accessible
     * @param path  the path on which the external stylesheet should be stored
     *
     */
    function ExternalSheet(theme, url, path) {
        this.theme = theme;
        this.url = url;
        this.path = path || this.url;
    }
    /**
     *
     * Will add a link to the external stylesheet to the `head` of given html.
     *
     * @param html
     *
     */
    ExternalSheet.prototype.post = function (html) {
        var renderer = new sdh_1.StaticRenderer();
        renderer.render(renderer.create("link", { href: this.url, rel: "stylesheet" })).on(html.head);
    };
    /**
     *
     * Will save the external stylesheet to the filesystem.
     *
     * @returns a Promise resolving to the saved `File`.
     *
     */
    ExternalSheet.prototype.save = function () {
        return fs_1.writeFile()({
            path: this.path,
            root: '',
            content: this.theme.registry.toString()
        });
    };
    Object.defineProperty(ExternalSheet.prototype, "priority", {
        get: function () { return this.theme.priority; },
        enumerable: true,
        configurable: true
    });
    ExternalSheet.prototype.prepare = function (_, __, ___, ____) {
        return this.theme.prepare(_, __, ___, ____);
    };
    return ExternalSheet;
}());
exports.ExternalSheet = ExternalSheet;
/**
 *
 * Creates an external stylesheet wrapper around given theme plugin. This plugin
 * can be plugged into a `StaticRenderer` to ensure components have access to the theme
 * and can use it to register their themed styles, and to ensure that the external
 * stylesheet is linked on the final HTML document. Note that you would need to save
 * the stylesheet yourself independently.
 *
 * Example:
 * ```tsx
 * import { compile } from '@connectv/sdh';
 *
 * const styles = externalSheet(theme({
 *   background: 'black',
 *   text: 'white',
 *   primary: 'red'
 * }));
 *
 * compile(renderer => ..., styles)
 * .save()
 * .then(() => styles.save());
 * ```
 *
 * @param theme the theme plugin to be contained within the stylesheet
 * @param url   the url on which the stylesheet is to be accessible
 * @param path  the filesystem path on which the stylesheet is to be stored. defaults to `url`.
 *
 */
function externalSheet(theme, url, path) {
    return new ExternalSheet(theme, url, path);
}
exports.externalSheet = externalSheet;
//# sourceMappingURL=external-sheet.js.map