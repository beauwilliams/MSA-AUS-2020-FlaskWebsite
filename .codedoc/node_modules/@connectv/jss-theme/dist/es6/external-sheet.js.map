{"version":3,"file":"external-sheet.js","sourceRoot":"","sources":["../../src/external-sheet.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAO/C;;;;;;;;;GASG;AACH,MAAM,OAAO,aAAa;IAQxB;;;;;;OAMG;IACH,YACW,KAAmC,EACnC,GAAW,EAAE,IAAa;QAD1B,UAAK,GAAL,KAAK,CAA8B;QACnC,QAAG,GAAH,GAAG,CAAQ;QAEpB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAC,IAAkB;QACrB,MAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QACtC,QAAQ,CAAC,MAAM,CAAC,0BAAM,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAC,YAAY,GAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;;OAMG;IACH,IAAI;QACF,OAAO,SAAS,EAAE,CAAC;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACxC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA,CAAC,CAAC;IAE7C,OAAO,CAAC,CAAM,EAAE,EAAO,EAAE,GAAQ,EAAE,IAAS;QAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;CACF;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,UAAU,aAAa,CAC3B,KAAmC,EACnC,GAAW,EACX,IAAa;IAEb,OAAO,IAAI,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["import { writeFile } from 'rxline/fs';\nimport { StaticRenderer } from '@connectv/sdh';\nimport { PostProcessPlugin } from '@connectv/sdh/transport';\nimport { CompProcessPlugin } from '@connectv/html';\n\nimport { ThemePlugin } from './theme';\n\n\n/**\n *\n * A rendering plugin representing an external stylesheet containing styles of a given theme.\n * Wraps a `ThemePlugin` object, adding an external stylesheet reference to a given HTML document\n * in post-processing and providing a method for saving the external stylesheet file.\n *\n * @note This class is designed to be used ON SERVER-SIDE ONLY, since you cannot create external stylesheets\n * on the client-side. Be careful not to accidentally import it in your client-side bundles.\n *\n */\nexport class ExternalSheet<ThemeType, R, T> implements PostProcessPlugin<R, T>, CompProcessPlugin<R, T> {\n  /**\n   *\n   * the path that the external stylesheet should be stored on on the filesystem.\n   *\n   */\n  path: string;\n\n  /**\n   *\n   * @param theme the wrapped theme plugin\n   * @param url   the url on which the external stylesheet should be accessible\n   * @param path  the path on which the external stylesheet should be stored\n   *\n   */\n  constructor(\n    readonly theme: ThemePlugin<ThemeType, R, T>,\n    readonly url: string, path?: string\n  ) {\n    this.path = path || this.url;\n  }\n\n  /**\n   *\n   * Will add a link to the external stylesheet to the `head` of given html.\n   *\n   * @param html\n   *\n   */\n  post(html: HTMLDocument): void | Promise<void> {\n    const renderer = new StaticRenderer();\n    renderer.render(<link href={this.url} rel=\"stylesheet\"/>).on(html.head);\n  }\n\n  /**\n   *\n   * Will save the external stylesheet to the filesystem.\n   *\n   * @returns a Promise resolving to the saved `File`.\n   *\n   */\n  save() {\n    return writeFile()({\n      path: this.path,\n      root: '',\n      content: this.theme.registry.toString()\n    });\n  }\n\n  get priority() { return this.theme.priority }\n\n  prepare(_: any, __: any, ___: any, ____: any): (result: Node) => void {\n    return this.theme.prepare(_, __, ___, ____);\n  }\n}\n\n\n/**\n *\n * Creates an external stylesheet wrapper around given theme plugin. This plugin\n * can be plugged into a `StaticRenderer` to ensure components have access to the theme\n * and can use it to register their themed styles, and to ensure that the external\n * stylesheet is linked on the final HTML document. Note that you would need to save\n * the stylesheet yourself independently.\n *\n * Example:\n * ```tsx\n * import { compile } from '@connectv/sdh';\n * \n * const styles = externalSheet(theme({\n *   background: 'black',\n *   text: 'white',\n *   primary: 'red'\n * }));\n *\n * compile(renderer => ..., styles)\n * .save()\n * .then(() => styles.save());\n * ```\n *\n * @param theme the theme plugin to be contained within the stylesheet\n * @param url   the url on which the stylesheet is to be accessible\n * @param path  the filesystem path on which the stylesheet is to be stored. defaults to `url`.\n *\n */\nexport function externalSheet<ThemeType=any, R=any, T=any>(\n  theme: ThemePlugin<ThemeType, R, T>, \n  url: string, \n  path?: string\n) {\n  return new ExternalSheet(theme, url, path);\n}\n"]}