{"version":3,"file":"themed-style.js","sourceRoot":"","sources":["../../src/themed-style.ts"],"names":[],"mappings":"AAAA,OAAO,GAA2B,MAAM,KAAK,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAYxC;;;;;GAKG;AACH,MAAM,OAAO,WAAW;IAQtB;;;;;OAKG;IACH,YAAqB,OAAsC;QAAtC,YAAO,GAAP,OAAO,CAA+B;QACzD,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,KAAU;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACH,UAAU,CAAC,KAAU;QACnB,OAAO,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACjD,CAAC;CACF;AAGD;;;;;;;;GAQG;AACH,MAAM,UAAU,WAAW,CAAgB,OAAsC;IAC/E,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import jss, { Styles, StyleSheet } from 'jss';\nimport { autoId } from '@connectv/html';\n\n\n/**\n * \n * Denotes a function that returns a JSS style based on given\n * theme object.\n * \n */\nexport type ThemedStyleFactory<ThemeType> = (theme: ThemeType) => Partial<Styles>;\n\n\n/**\n *\n * Represents a themed style. A themed style can be resolved into\n * JSS stylesheets using a theme object.\n *\n */\nexport class ThemedStyle<ThemeType> {\n  /**\n   *\n   * Uniquely identifies this themed style.\n   *\n   */\n  readonly id: string;\n\n  /**\n   *\n   * @param factory the `ThemedStyleFactory` function to be used for resolving this themed style\n   *                to JSS stylesheets\n   *\n   */\n  constructor(readonly factory: ThemedStyleFactory<ThemeType>) {\n    this.id = autoId();\n  }\n\n  /**\n   *\n   * @param theme\n   * @returns a resolved style object based on given theme\n   *\n   */\n  style(theme: any) {\n    return this.factory(theme);\n  }\n\n  /**\n   *\n   * @param theme\n   * @returns a JSS stylesheet based on given theme\n   *\n   */\n  styleSheet(theme: any): StyleSheet {\n    return jss.createStyleSheet(this.style(theme));\n  }\n}\n\n\n/**\n *\n * Creates a `ThemedStyle` object from given `ThemedStyleFactory`. The given\n * function will be utilized to resolve the themed style to JSS stylesheets\n * from given theme objects.\n *\n * @param factory \n *\n */\nexport function themedStyle<ThemeType=any>(factory: ThemedStyleFactory<ThemeType>) {\n  return new ThemedStyle(factory);\n}\n"]}