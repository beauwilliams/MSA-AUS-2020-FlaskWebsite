import { PostProcessPlugin } from '@connectv/sdh/transport';
import { CompProcessPlugin } from '@connectv/html';
import { ThemePlugin } from './theme';
/**
 *
 * A rendering plugin representing an external stylesheet containing styles of a given theme.
 * Wraps a `ThemePlugin` object, adding an external stylesheet reference to a given HTML document
 * in post-processing and providing a method for saving the external stylesheet file.
 *
 * @note This class is designed to be used ON SERVER-SIDE ONLY, since you cannot create external stylesheets
 * on the client-side. Be careful not to accidentally import it in your client-side bundles.
 *
 */
export declare class ExternalSheet<ThemeType, R, T> implements PostProcessPlugin<R, T>, CompProcessPlugin<R, T> {
    readonly theme: ThemePlugin<ThemeType, R, T>;
    readonly url: string;
    /**
     *
     * the path that the external stylesheet should be stored on on the filesystem.
     *
     */
    path: string;
    /**
     *
     * @param theme the wrapped theme plugin
     * @param url   the url on which the external stylesheet should be accessible
     * @param path  the path on which the external stylesheet should be stored
     *
     */
    constructor(theme: ThemePlugin<ThemeType, R, T>, url: string, path?: string);
    /**
     *
     * Will add a link to the external stylesheet to the `head` of given html.
     *
     * @param html
     *
     */
    post(html: HTMLDocument): void | Promise<void>;
    /**
     *
     * Will save the external stylesheet to the filesystem.
     *
     * @returns a Promise resolving to the saved `File`.
     *
     */
    save(): Promise<import("rxline/fs").File<string>>;
    get priority(): import("@connectv/html").PluginPriority;
    prepare(_: any, __: any, ___: any, ____: any): (result: Node) => void;
}
/**
 *
 * Creates an external stylesheet wrapper around given theme plugin. This plugin
 * can be plugged into a `StaticRenderer` to ensure components have access to the theme
 * and can use it to register their themed styles, and to ensure that the external
 * stylesheet is linked on the final HTML document. Note that you would need to save
 * the stylesheet yourself independently.
 *
 * Example:
 * ```tsx
 * import { compile } from '@connectv/sdh';
 *
 * const styles = externalSheet(theme({
 *   background: 'black',
 *   text: 'white',
 *   primary: 'red'
 * }));
 *
 * compile(renderer => ..., styles)
 * .save()
 * .then(() => styles.save());
 * ```
 *
 * @param theme the theme plugin to be contained within the stylesheet
 * @param url   the url on which the stylesheet is to be accessible
 * @param path  the filesystem path on which the stylesheet is to be stored. defaults to `url`.
 *
 */
export declare function externalSheet<ThemeType = any, R = any, T = any>(theme: ThemePlugin<ThemeType, R, T>, url: string, path?: string): ExternalSheet<ThemeType, R, T>;
