{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../src/theme.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAc,MAAM,KAAK,CAAC;AAEjD,OAAO,EAAqB,cAAc,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAK3E;;;;;;;GAOG;AACH,MAAM,OAAO,WAAW;IAOtB;;;;OAIG;IACH,YAAqB,KAAgB;QAAhB,UAAK,GAAL,KAAK,CAAW;QAXrC,aAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;QAEvB,iBAAY,GAA2C,EAAE,CAAC;QAC1D,WAAM,GAA+B,EAAE,CAAC;QACvC,aAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;IAOD,CAAC;IAEzC;;;;;;;;;;;;;;OAcG;IACH,GAAG,CAAC,WAAmC;QACrC,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;YAC1C,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;YAChD,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE/E,KAAK,CAAC,MAAM,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,WAAmC;QACvC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACH,OAAO,CAAC,WAAmC;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,MAAM,CAAC,WAAmC;QACxC,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;;;OASG;IACH,IAAI,CAAC,IAAkB;QACrB,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACvC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC;IAED,OAAO,CACL,CAAU,EACV,EAAW,EACX,GAAY,EACZ,KAA+B;QAE/B,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;QAEnB,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC;CACF;AAGD;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,UAAU,KAAK,CAA8B,KAAgB;IACjE,OAAO,IAAI,WAAW,CAAkB,KAAK,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import { SheetsRegistry, StyleSheet } from 'jss';\nimport { PostProcessPlugin } from '@connectv/sdh/transport';\nimport { CompProcessPlugin, PluginPriority, styled } from '@connectv/html';\n\nimport { ThemedStyle } from './themed-style';\n\n\n/**\n *\n * A rendering plugin representing a theme. Provides access to the theme to\n * components. Resolves given `ThemedStyle` objects with the specified theme,\n * attaches them to the document on the client side or stores them and attaches them all\n * to the final document in server-side rendering.\n *\n */\nexport class ThemePlugin<ThemeType, R, T> implements PostProcessPlugin<R, T>, CompProcessPlugin<R, T> {\n  priority = PluginPriority.High;\n\n  private themedStyles: {[id: string]: ThemedStyle<ThemeType>} = {};\n  private sheets: {[id: string]: StyleSheet} = {};\n  readonly registry = new SheetsRegistry();\n\n  /**\n   *\n   * @param theme the underlying theme object\n   *\n   */\n  constructor(readonly theme: ThemeType) {}\n\n  /**\n   *\n   * Adds given `ThemedStyle` object to the list of styles managed by this plugin.\n   * Will attach resolved stylesheet of the style to the document on the client side\n   * or stores the resolved stylesheets and renders them to given documents in case of\n   * server side rendering, if the style is not added before.\n   *\n   * If you want to prefetch your component styles, simply call this function on your\n   * styles. This will ensure that they are attached to the document and will not be dynamically\n   * re-attached when accessed by a component.\n   *\n   * @param themedStyle\n   * @returns `this` for chaining convenience.\n   *\n   */\n  add(themedStyle: ThemedStyle<ThemeType>) {\n    if (!(themedStyle.id in this.themedStyles)) {\n      this.themedStyles[themedStyle.id] = themedStyle;\n      const sheet = this.sheets[themedStyle.id] = themedStyle.styleSheet(this.theme);\n\n      sheet.attach();\n      this.registry.add(sheet);\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * Will add given style to managed styles (if not added before) and\n   * return the resolved JSS stylesheet.\n   *\n   * @param themedStyle\n   *\n   */\n  sheet(themedStyle: ThemedStyle<ThemeType>) {\n    this.add(themedStyle);\n    return this.sheets[themedStyle.id];\n  }\n\n  /**\n   *\n   * Will add given style to managed styles (if not added before) and\n   * return the class map of the resolved JSS stylesheet.\n   *\n   * @param themedStyle\n   *\n   */\n  classes(themedStyle: ThemedStyle<ThemeType>) {\n    return this.sheet(themedStyle).classes;\n  }\n\n  /**\n   *\n   * Will add given style to managed styles (if not added before) and\n   * return a rendering plugin that automatically adds classes to rendered elements\n   * based on their tag name.\n   *\n   * Example:\n   * ```tsx\n   * const style = themedStyle(theme => ({\n   *   div: {\n   *      background: 'red',\n   *      color: theme.primary,\n   *   }\n   * }));\n   *\n   * export function Comp(_, renderer) {\n   *   renderer = renderer.plug(this.theme.styled(style));\n   *   return <div>Hellow</div>         // --> the div will automatically get the styles.\n   * }\n   * ```\n   *\n   * @param themedStyle \n   *\n   */\n  styled(themedStyle: ThemedStyle<ThemeType>) {\n    return styled(this.classes(themedStyle));\n  }\n\n  /**\n   *\n   * Will render all stored styles on the given document. This is particularly\n   * useful for server-side rendering. DO NOT CALL THIS ON CLIENT SIDE, as on the\n   * client side all styles are attached upon being added and this will only cause\n   * duplicate styles to be attached to the document.\n   *\n   * @param html \n   *\n   */\n  post(html: HTMLDocument): void | Promise<void> {\n    const el = html.createElement('style');\n    el.innerHTML = this.registry.toString();\n    html.head.append(el);\n  }\n\n  prepare(\n    _: unknown, \n    __: unknown, \n    ___: unknown, \n    extra: { [name: string]: any; }): (result: Node) => void {\n\n    extra.theme = this;\n\n    return () => {};\n  }\n}\n\n\n/**\n *\n * Creates a theme plugin based on given theme object. This plugin then can be\n * plugged into a renderer.\n *\n * Example:\n * ```tsx\n * import { Renderer } from '@connectv/html';\n *\n * const myTheme = theme({\n *   primary: '#ff00ff'\n * });\n *\n * const renderer = new Renderer().plug(myTheme);\n * ```\n *\n * @param theme \n *\n */\nexport function theme<ThemeType=any, R=any, T=any>(theme: ThemeType) {\n  return new ThemePlugin<ThemeType, R, T>(theme);\n}\n"]}