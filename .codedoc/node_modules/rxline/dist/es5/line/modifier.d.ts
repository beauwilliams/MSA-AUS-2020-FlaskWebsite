import { OperatorFunction } from 'rxjs';
import { Transform } from './transform';
export declare type ModifierFunc<A, B, C, D> = (t: Transform<A, B>) => Transform<C, D>;
export declare class Modifier<A, B, C, D> {
    private func;
    constructor(func: ModifierFunc<A, B, C, D>);
    modify(transform: Transform<A, B>): Transform<C, D>;
}
export interface LinearModifier<I, O> extends Modifier<any, I, any, O> {
    modify<X>(transform: Transform<X, I>): Transform<X, O>;
}
export interface IdModVarOutput<I> extends Modifier<I, any, I, any> {
    modify<O>(transform: Transform<I, O>): Transform<I, O>;
}
export interface IdModVarInput<O> extends ModifierFunc<any, O, any, O> {
    modify<I>(transform: Transform<I, O>): Transform<I, O>;
}
export declare function mod<A, B, C, D>(func: ModifierFunc<A, B, C, D>): Modifier<A, B, C, D>;
export declare function mod$<I, O>(op$: OperatorFunction<I, O>): LinearModifier<I, O>;
