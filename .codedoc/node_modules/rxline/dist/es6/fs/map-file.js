var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function _map(f, key, value, opts = { overwrite: false }) {
    if (opts.overwrite) {
        f[key] = value;
        return f;
    }
    else
        return Object.assign(Object.assign({}, f), { [key]: value });
}
export function mapContent(map, options) {
    return function (f) {
        return __awaiter(this, void 0, void 0, function* () {
            return _map(f, 'content', yield map(f.content, f.path, f.root), options);
        });
    };
}
export function mapPath(map, options) {
    return function (f) {
        return __awaiter(this, void 0, void 0, function* () {
            return _map(f, 'path', yield map(f.path, f.root, f.content), options);
        });
    };
}
export function mapRoot(map, options) {
    return function (f) {
        return __awaiter(this, void 0, void 0, function* () {
            return _map(f, 'root', yield map(f.root, f.path, f.content), options);
        });
    };
}
//# sourceMappingURL=map-file.js.map