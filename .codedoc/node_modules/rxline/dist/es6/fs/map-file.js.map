{"version":3,"file":"map-file.js","sourceRoot":"","sources":["../../../src/fs/map-file.ts"],"names":[],"mappings":";;;;;;;;;AAKA,SAAS,IAAI,CAA0B,CAAI,EAAE,GAAM,EAAE,KAAQ,EACzD,OAAgC,EAAE,SAAS,EAAE,KAAK,EAAE;IACtD,IAAI,IAAI,CAAC,SAAS,EAAE;QAClB,CAAC,CAAC,GAAG,CAAC,GAAG,KAAY,CAAC;QACtB,OAAO,CAAQ,CAAC;KACjB;;QACI,OAAO,gCAAK,CAAC,KAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAS,CAAC;AAC5C,CAAC;AAKD,MAAM,UAAU,UAAU,CAAqB,GAAwB,EAAE,OAAiC;IAExG,OAAO,UAAe,CAAU;;YAC9B,OAAO,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,CAAY,CAAC;QACtF,CAAC;KAAA,CAAA;AACH,CAAC;AAKD,MAAM,UAAU,OAAO,CAAI,GAAkB,EAAE,OAAiC;IAC9E,OAAO,UAAmC,CAAc;;YACtD,OAAO,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAG,CAAa,CAAC,IAAI,EAAG,CAAa,CAAC,OAAO,CAAC,EAAE,OAAO,CAAY,CAAC;QAC7G,CAAC;KAAA,CAAA;AACH,CAAC;AAKD,MAAM,UAAU,OAAO,CAAI,GAAkB,EAAE,OAAiC;IAC9E,OAAO,UAAe,CAAU;;YAC9B,OAAO,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,OAAO,CAAY,CAAC;QACnF,CAAC;KAAA,CAAA;AACH,CAAC","sourcesContent":["import { Function } from '../line/transform';\n\nimport { PathFull, File, FileModificationOptions } from './types';\n\n\nfunction _map<F, K extends keyof F, V>(f: F, key: K, value: V, \n    opts: FileModificationOptions = { overwrite: false }) {\n  if (opts.overwrite) {\n    f[key] = value as any;\n    return f as any;\n  }\n  else return { ...f, [key]: value } as any;\n}\n\n\nexport type ContentMapper<I, O> = (content: I, path: string, root: string) => O | Promise<O>;\n\nexport function mapContent<I=string, O=string>(map: ContentMapper<I, O>, options?: FileModificationOptions):\n  (f: File<I>) => Promise<File<O>> {\n  return async function(f: File<I>) {\n    return _map(f, 'content', await map(f.content, f.path, f.root), options) as File<O>;\n  }\n}\n\n\nexport type PathMapper<I> = (path: string, root: string, content: I) => string | Promise<string>;\n\nexport function mapPath<I>(map: PathMapper<I>, options?: FileModificationOptions) {\n  return async function<T extends PathFull>(f: T | File<I>) {\n    return _map(f, 'path', await map(f.path, (f as File<I>).root, (f as File<I>).content), options) as File<I>;\n  }\n}\n\n\nexport type RootMapper<I> = <I>(root: string, path: string, content: I) => string | Promise<string>;\n\nexport function mapRoot<I>(map: RootMapper<I>, options?: FileModificationOptions) {\n  return async function(f: File<I>) {\n    return _map(f, 'root', await map(f.root, f.path, f.content), options) as File<I>;\n  }\n}\n"]}