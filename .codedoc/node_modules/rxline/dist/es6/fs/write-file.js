var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { writeFile as writef } from 'fs';
import { join } from 'path';
import { ensurePath } from './ensure-path';
export function writeFile(options = {}) {
    const _root = options.root || '';
    return function (f) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = f.path;
            const root = _root || f.root;
            const abspath = join(root, path);
            yield ensurePath(abspath);
            return new Promise((resolve, reject) => {
                writef(abspath, f.content, err => {
                    /* istanbul ignore if */
                    if (err)
                        reject(err);
                    else
                        resolve(f);
                });
            });
        });
    };
}
//# sourceMappingURL=write-file.js.map