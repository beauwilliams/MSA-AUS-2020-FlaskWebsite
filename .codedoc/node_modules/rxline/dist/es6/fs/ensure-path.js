var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { dirname, join } from 'path';
import { mkdir, exists } from 'fs';
function _ensurePath(path) {
    const dir = dirname(path);
    return new Promise((resolve, reject) => {
        exists(dir, (exists) => __awaiter(this, void 0, void 0, function* () {
            if (exists)
                resolve();
            else {
                if (dirname(dir) !== '.')
                    yield _ensurePath(dir);
                mkdir(dir, err => {
                    /* istanbul ignore if */
                    if (err)
                        reject(err);
                    else
                        resolve();
                });
            }
        }));
    });
}
export function ensurePath(f) {
    if (typeof f === 'string')
        return _ensurePath(f);
    else
        return _ensurePath(join(f.root || '', f.path));
}
//# sourceMappingURL=ensure-path.js.map