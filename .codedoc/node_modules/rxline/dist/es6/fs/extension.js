var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { parse, join } from 'path';
import { mapPath } from './map-file';
export function _dropExt(path) {
    const { dir, name } = parse(path);
    return join(dir, name);
}
export function dropExt(options) {
    return function (f) {
        return mapPath(_dropExt, options)(f);
    };
}
export function mapExt(map, options) {
    function _(f) {
        return __awaiter(this, void 0, void 0, function* () {
            const corrected = (ext) => ext.startsWith('.') ? ext : '.' + ext;
            const ext = (path) => { const { ext } = parse(path); return ext; };
            return mapPath((path, root, content) => __awaiter(this, void 0, void 0, function* () { return _dropExt(path) + corrected(yield map(ext(path), path, root, content)); }), options)(f);
        });
    }
    return _;
}
//# sourceMappingURL=extension.js.map