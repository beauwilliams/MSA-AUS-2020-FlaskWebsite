{"version":3,"file":"files.js","sourceRoot":"","sources":["../../../src/fs/files.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAY,KAAK,EAAE,MAAM,MAAM,CAAC;AACnD,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,IAAI,CAAC;AAEpC,OAAO,EAAE,IAAI,EAAc,MAAM,SAAS,CAAC;AAK3C,SAAS,OAAO,CAAC,IAAY,EAAE,OAAoB,EAAE,KAAa;IAChE,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,KAAK,KAAK,CAAC;IAChD,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAE/D,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,QAAmC,EAAE,EAAE;QAC/D,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAC5B,IAAI,GAAG;gBAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACxB;gBACH,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;oBACvB,IAAI,OAAO,CAAC,SAAS,IAAI,KAAK,KAAK,CAAC,EAAE;wBACpC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;4BAC5B,wBAAwB;4BACxB,IAAI,GAAG;gCAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;gCACxB,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBACpG,CAAC,CAAC,CAAC;qBACJ;;wBACI,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBAC1B;qBACI;oBACH,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,MAAM,CAAC,IAAY,EAAE,UAAuB,EAAE,SAAS,EAAE,IAAI,EAAE;IAC7E,OAAO,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC;AAGD,MAAM,UAAU,KAAK,CAAC,IAAY,EAAE,UAAuB,EAAE,SAAS,EAAE,IAAI,EAAE;IAC5E,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import { Observable, Observer, merge } from 'rxjs';\nimport { join } from 'path';\nimport { lstat, readdir } from 'fs';\n\nimport { line, SimpleLine } from '../line';\n\nimport { File, ScanOptions } from './types';\n\n\nfunction _files$(path: string, options: ScanOptions, depth: number): Observable<File<undefined>> {\n  options.recursive = options.recursive !== false;\n  const abspath = options.root ? join(options.root, path) : path;\n\n  return Observable.create((observer: Observer<File<undefined>>) => {\n    lstat(abspath, (err, stats) => {\n      if (err) observer.error(err);\n      else {\n        if (stats.isDirectory()) {\n          if (options.recursive || depth === 0) {\n            readdir(abspath, (err, res) => {\n              /* istanbul ignore if */\n              if (err) observer.error(err);\n              else merge(...res.map(name => _files$(join(path, name), options, depth + 1))).subscribe(observer);\n            });\n          }\n          else observer.complete();\n        }\n        else {\n          observer.next({ path, root: options.root || '', content: undefined });\n          observer.complete();\n        }\n      }\n    });\n  });\n}\n\n\nexport function files$(path: string, options: ScanOptions = { recursive: true }): Observable<File<undefined>> {\n  return _files$(path, options, 0);\n}\n\n\nexport function files(path: string, options: ScanOptions = { recursive: true }): SimpleLine<File<undefined>> {\n  return line(files$(path, options));\n}\n"]}