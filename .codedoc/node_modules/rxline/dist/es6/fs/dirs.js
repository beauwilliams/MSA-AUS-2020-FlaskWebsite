import { Observable, merge } from 'rxjs';
import { join } from 'path';
import { lstat, readdir } from 'fs';
import { line } from '../line';
function _dirs$(path, options, depth) {
    options.recursive = options.recursive !== false;
    const abspath = options.root ? join(options.root, path) : path;
    return Observable.create((observer) => {
        lstat(abspath, (err, stats) => {
            if (err)
                observer.error(err);
            else {
                if (stats.isDirectory()) {
                    if (options.recursive || depth === 0) {
                        if (depth !== 0)
                            observer.next(path);
                        readdir(abspath, (err, res) => {
                            /* istanbul ignore if */
                            if (err)
                                observer.error(err);
                            else
                                merge(...res.map(name => _dirs$(join(path, name), options, depth + 1))).subscribe(observer);
                        });
                    }
                    else {
                        observer.next(path);
                        observer.complete();
                    }
                }
                else
                    observer.complete();
            }
        });
    });
}
export function dirs$(path, options = { recursive: true }) {
    return _dirs$(path, options, 0);
}
export function dirs(path, options = { recursive: true }) {
    return line(dirs$(path, options));
}
//# sourceMappingURL=dirs.js.map