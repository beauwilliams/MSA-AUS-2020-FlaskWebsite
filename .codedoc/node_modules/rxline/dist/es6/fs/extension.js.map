{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../src/fs/extension.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAGnC,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAGrC,MAAM,UAAU,QAAQ,CAAC,IAAY;IACnC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;IAClC,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACzB,CAAC;AAGD,MAAM,UAAU,OAAO,CAAI,OAAiC;IAC1D,OAAO,UAAS,CAAqB;QACnC,OAAO,OAAO,CAAI,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAA;AACH,CAAC;AAMD,MAAM,UAAU,MAAM,CAAI,GAAuB,EAAE,OAAiC;IAClF,SAAe,CAAC,CAAqB,CAAc;;YACjD,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;YACzE,MAAM,GAAG,GAAG,CAAC,IAAY,EAAE,EAAE,GAAG,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YAE3E,OAAO,OAAO,CACZ,CAAO,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,gDAAC,OAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAA,GAAA,EACpG,OAAO,CACR,CAAC,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAED,OAAO,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { parse, join } from 'path';\n\nimport { PathFull, FileModificationOptions, File } from './types';\nimport { mapPath } from './map-file';\n\n\nexport function _dropExt(path: string) {\n  const { dir, name } = parse(path);\n  return join(dir, name);\n}\n\n\nexport function dropExt<I>(options?: FileModificationOptions) {\n  return function(f: File<I> | PathFull) {\n    return mapPath<I>(_dropExt, options)(f);\n  }\n}\n\n\nexport type ExtensionMapper<I> = (ext: string, path: string, \n                                root: string, content: I) => string | Promise<string>;\n\nexport function mapExt<I>(map: ExtensionMapper<I>, options?: FileModificationOptions) {\n  async function _<T extends PathFull>(f: T | File<I>) {\n    const corrected = (ext: string) => ext.startsWith('.') ? ext : '.' + ext;\n    const ext = (path: string) => { const { ext } = parse(path); return ext; };\n\n    return mapPath<I>(\n      async (path, root, content) => _dropExt(path) + corrected(await map(ext(path), path, root, content)),\n      options\n    )(f);\n  }\n\n  return _;\n}\n"]}