{"version":3,"file":"reduce.js","sourceRoot":"","sources":["../../../src/line/reduce.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAY,MAAM,MAAM,CAAC;AAGpD,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAQtC,MAAM,UAAU,MAAM,CAAO,IAAsB,EAAE,OAAU,CAAQ;IACrE,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACjB,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAqB,EAAE,EAAE;gBACjE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACxB,MAAM,SAAS,GAAG,CAAC,CAAI,EAAE,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAA;gBAC/D,IAAI,EAAE,YAAY,UAAU;oBAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;qBAC9D,IAAI,EAAE,YAAY,OAAO;oBAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;;oBAC7C,SAAS,CAAC,EAAE,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { concat, Observable, Observer } from 'rxjs';\n\nimport { Line } from './line';\nimport { last } from 'rxjs/operators';\n\n\nexport type ReduceFunc<T, I> = (total: T, each: I) => T | Promise<T> | Observable<T>;\n\n\nexport function reduce<I>(func: ReduceFunc<number, I>): (l: Line<any, I>) => Promise<number>;\nexport function reduce<T, I>(func: ReduceFunc<T, I>, init: T): (l: Line<any, I>) => Promise<T>;\nexport function reduce<T, I>(func: ReduceFunc<T, I>, init: T = 0 as any): (l: Line<any, I>) => Promise<T> {\n  return line => new Promise<T>((resolve, reject) => {\n    line.collect(res => {\n      let total = init;\n      concat(...res.map(i => Observable.create((observer: Observer<T>) => {\n        let _t = func(total, i);\n        const _complete = (t: T) => { total = t; observer.complete(); }\n        if (_t instanceof Observable) _t.pipe(last()).subscribe(_complete);\n        else if (_t instanceof Promise) _t.then(_complete)\n        else _complete(_t);\n      }))).subscribe(undefined, err => reject(err), () => resolve(total));\n    });\n  });\n}\n"]}