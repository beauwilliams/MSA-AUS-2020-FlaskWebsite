import { Observable, ReplaySubject } from 'rxjs';
import { share } from 'rxjs/operators';
import { line } from './line';
//
// TODO: rewrite with groupBy
//
function _partition(src, key) {
    const _subjects = {};
    const obs$ = src.prep().content$.pipe(share());
    return line(Observable.create((observer) => {
        obs$.subscribe({
            next: v => {
                const _key = key(v).toString();
                if (!(_key in _subjects)) {
                    _subjects[_key] = new ReplaySubject();
                    observer.next(line(_subjects[_key]));
                }
                _subjects[_key].next(v);
            },
            error: err => {
                observer.error(err);
                Object.values(_subjects).forEach(sub => sub.error(err));
            },
            complete: () => {
                observer.complete();
                Object.values(_subjects).forEach(sub => sub.complete());
            }
        });
    }));
}
export function partition(srcOrKey, key) {
    if (key)
        return _partition(srcOrKey, key);
    else
        return (l) => _partition(l, srcOrKey);
}
//# sourceMappingURL=partition.js.map