var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Observable, from } from 'rxjs';
import { flatMap, toArray } from 'rxjs/operators';
import { Modifier } from './modifier';
import { Transform, identity } from './transform';
import { sequentially } from './process';
import { tap } from './tap';
import { filter } from './filter';
export class Line {
    constructor(content, transform) {
        this.transform = transform;
        if (content instanceof Observable)
            this.content$ = content;
        else if (content instanceof Promise)
            this.content$ = from(content).pipe(flatMap(from));
        else
            this.content$ = from(content);
    }
    pipe(...pipes) {
        return pipes.reduce((line, pipe) => line._pipe(pipe), this);
    }
    _pipe(thing) {
        if (thing instanceof Transform)
            return new Line(this.content$, this.transform.combine(thing));
        else if (thing instanceof Modifier)
            return new Line(this.content$, thing.modify(this.transform));
        else
            return new Line(this.content$, this.transform.combine(new Transform(thing)));
    }
    pick(func) { return this.pipe(filter(func)); }
    drop(func) { return this.pipe(filter((f) => __awaiter(this, void 0, void 0, function* () { return !(yield func(f)); }))); }
    peek(func) { return this.pipe(tap(func)); }
    funnel(func) { return func(this); }
    process(strategy = sequentially) {
        return new Line(new Promise((next, error) => {
            strategy(this.content$, this.transform).pipe(toArray()).subscribe({ next, error });
        }), identity());
    }
    prep(strategy = sequentially) {
        return new Line(strategy(this.content$, this.transform), identity());
    }
    collect(collectorOrStrategy, collector, handler) {
        const strategy = collector ? collectorOrStrategy : sequentially;
        return this.prep(strategy).content$
            .pipe(toArray())
            .subscribe(collector || collectorOrStrategy, handler);
    }
}
export function line(content) { return new Line(content, identity()); }
//# sourceMappingURL=line.js.map