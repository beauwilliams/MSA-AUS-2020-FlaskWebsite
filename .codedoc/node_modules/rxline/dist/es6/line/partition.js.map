{"version":3,"file":"partition.js","sourceRoot":"","sources":["../../../src/line/partition.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAY,aAAa,EAAE,MAAM,MAAM,CAAC;AAC3D,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAoB,IAAI,EAAE,MAAM,QAAQ,CAAC;AAMhD,EAAE;AACF,6BAA6B;AAC7B,EAAE;AACF,SAAS,UAAU,CAAI,GAAiB,EAAE,GAAe;IACvD,MAAM,SAAS,GAAsC,EAAE,CAAC;IACxD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC/C,OAAO,IAAI,CAAgB,UAAU,CAAC,MAAM,CAAC,CAAC,QAA8B,EAAE,EAAE;QAC9E,IAAI,CAAC,SAAS,CAAC;YACb,IAAI,EAAE,CAAC,CAAC,EAAE;gBACR,MAAM,IAAI,GAAI,GAAG,CAAC,CAAC,CAAS,CAAC,QAAQ,EAAE,CAAC;gBACxC,IAAI,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,EAAE;oBACxB,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,aAAa,EAAK,CAAC;oBAEzC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtC;gBAED,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YACD,KAAK,EAAE,GAAG,CAAC,EAAE;gBACX,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACpB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1D,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE;gBACb,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACpB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1D,CAAC;SACF,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;AAKD,MAAM,UAAU,SAAS,CAAI,QAAmC,EAAE,GAAgB;IAChF,IAAI,GAAG;QAAE,OAAO,UAAU,CAAC,QAA4B,EAAE,GAAG,CAAC,CAAC;;QACzD,OAAO,CAAC,CAAe,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,QAAsB,CAAC,CAAC;AACzE,CAAC","sourcesContent":["import { Observable, Observer, ReplaySubject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { SimpleLine, Line, line } from './line';\n\n\nexport type KeyFunc<O> = (o: O) => { toString(): string };\n\n\n//\n// TODO: rewrite with groupBy\n//\nfunction _partition<O>(src: Line<any, O>, key: KeyFunc<O>) {\n  const _subjects = <{[key: string]: ReplaySubject<O>}>{};\n  const obs$ = src.prep().content$.pipe(share());\n  return line<SimpleLine<O>>(Observable.create((observer: Observer<Line<O, O>>) => {\n    obs$.subscribe({\n      next: v => {\n        const _key = (key(v) as any).toString();\n        if (!(_key in _subjects)) {\n          _subjects[_key] = new ReplaySubject<O>();\n          \n          observer.next(line(_subjects[_key]));\n        }\n\n        _subjects[_key].next(v);\n      },\n      error: err => {\n        observer.error(err);\n        Object.values(_subjects).forEach(sub => sub.error(err));\n      },\n      complete: () => {\n        observer.complete();\n        Object.values(_subjects).forEach(sub => sub.complete());\n      }\n    })\n  }));\n}\n\n\nexport function partition<O>(key: KeyFunc<O>): (l: Line<any, O>) => SimpleLine<SimpleLine<O>>;\nexport function partition<O>(src: Line<any, O>, key: KeyFunc<O>): SimpleLine<SimpleLine<O>>;\nexport function partition<O>(srcOrKey: Line<any, O> | KeyFunc<O>, key?: KeyFunc<O>) {\n  if (key) return _partition(srcOrKey as Line<unknown, O>, key);\n  else return (l: Line<any, O>) => _partition(l, srcOrKey as KeyFunc<O>);\n}"]}