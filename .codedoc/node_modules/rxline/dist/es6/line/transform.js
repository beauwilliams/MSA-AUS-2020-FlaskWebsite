import { Observable, from, of, throwError } from 'rxjs';
import { concatMap } from 'rxjs/operators';
export class Transform {
    constructor(_op$) {
        this.op$ = i => {
            try {
                const _o = _op$(i);
                if (_o instanceof Promise)
                    return from(_o);
                else if (_o instanceof Observable)
                    return _o;
                else
                    return of(_o);
            }
            catch (err) {
                return throwError(err);
            }
        };
    }
    combine(transform) {
        if (transform instanceof Transform)
            return new Transform((i) => this.op$(i).pipe(concatMap(transform.op$)));
        else
            return this.combine(new Transform(transform));
    }
    apply(i) { return this.op$(i); }
}
export function identity() { return new Transform((i) => i); }
export function transform(func) { return new Transform(func); }
//# sourceMappingURL=transform.js.map