"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var express_1 = __importDefault(require("express"));
var express_ws_1 = __importDefault(require("express-ws"));
var chalk_1 = __importDefault(require("chalk"));
var path_1 = require("path");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var sdh_1 = require("@connectv/sdh");
var fs_2 = require("rxline/fs");
var merge = /*#__PURE__*/ require('webpack-merge');
var build_1 = require("../build");
var rebuild_1 = require("../build/rebuild");
var files_1 = require("../build/files");
var toc_1 = require("../build/toc");
var config_1 = require("./config");
var watch_1 = require("./watch");
var watch_assets_1 = require("./watch-assets");
var reload_1 = require("./reload");
var building_html_1 = require("./building-html");
function serve(root, config, builder, themeInstaller, webpackConfig) {
    var _this = this;
    var state = new rxjs_1.BehaviorSubject({ status: config_1.StatusBuildingResponse });
    config = __assign(__assign({}, config), { bundle: __assign(__assign({}, config.bundle), { init: __spreadArrays(config.bundle.init, [reload_1.reloadOnChange$]) }) });
    var wpconf = merge({ mode: 'development' }, webpackConfig || {});
    state.next({ status: config_1.StatusBuildingResponse });
    build_1.build(config, builder, themeInstaller, wpconf).then(function (assets) {
        state.next({ status: config_1.StatusReadyResponse });
        console.log(chalk_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["{greenBright #} Documents built!"], ["{greenBright #} Documents built!"]))));
        var notifier = new rxjs_1.Subject();
        watch_1.watch(root, config, notifier).subscribe(function (buildreq) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(buildreq === 'queued')) return [3 /*break*/, 1];
                        state.next({ status: config_1.StatusBuildingResponse });
                        return [3 /*break*/, 4];
                    case 1:
                        if (!(buildreq === 'all')) return [3 /*break*/, 3];
                        _a = assets;
                        return [4 /*yield*/, toc_1.loadToC(config)];
                    case 2:
                        _a.toc = _b.sent();
                        _b.label = 3;
                    case 3:
                        rebuild_1.rebuild(buildreq === 'all' ? files_1.files(config) : files_1.files(buildreq, config), config, builder, assets, wpconf).then(function () {
                            console.log(chalk_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["{greenBright #} Documents Rebuilt!"], ["{greenBright #} Documents Rebuilt!"]))));
                            state.next({ status: config_1.StatusReadyResponse });
                            notifier.next();
                        }).catch(function (error) {
                            console.log(chalk_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["{redBright # REBUILD FAILED!!}"], ["{redBright # REBUILD FAILED!!}"]))));
                            console.log((error === null || error === void 0 ? void 0 : error.message) || error);
                            state.next({ status: config_1.StatusErrorResponse, error: (error === null || error === void 0 ? void 0 : error.message) || error });
                            notifier.next();
                        });
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        watch_assets_1.watchAssets(root, config, state).subscribe(function (filename) {
            console.log(chalk_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["{gray # change in ", ", issuing reload to client ...}"], ["{gray # change in ", ", issuing reload to client ...}"])), filename));
            state.next({ status: config_1.StatusBuildingResponse });
            setTimeout(function () { return state.next({ status: config_1.StatusReadyResponse }); }, 300);
        });
    }).catch(function (error) {
        console.log(chalk_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["{redBright # BUILD FAILED!!}"], ["{redBright # BUILD FAILED!!}"]))));
        console.log((error === null || error === void 0 ? void 0 : error.message) || error);
        state.next({ status: config_1.StatusErrorResponse, error: (error === null || error === void 0 ? void 0 : error.message) || error });
        watch_1.watch(root, config).pipe(operators_1.take(1)).subscribe(function () {
            // --> so this is shaky and requires explanation:
            // --> we need to restart the whole process when the initial build fails.
            // --> in order to do so, we simply touch the current file.
            // --> since this file is imported, saving it should restart ts-node-dev's process.
            fs_1.utimesSync(__filename, new Date(), new Date());
        });
    });
    var app = express_1.default();
    express_ws_1.default(app);
    app.get(config_1.StatusCheckURL, function (_, res) { return res.json(state.value); });
    app.ws(config_1.StatusCheckURL, function (ws) {
        var sub = state.subscribe(function (v) { return ws.send(JSON.stringify(v)); });
        ws.on('error', function () { return sub.unsubscribe(); });
        ws.on('close', function () { return sub.unsubscribe(); });
    });
    app.use(config.dest.namespace, express_1.default.static(config.dest.assets));
    app.get(config.dest.namespace + "/*", function (req, res) {
        var normalUrl = req.originalUrl.substr(config.dest.namespace.length).split('?')[0];
        var filename = (normalUrl === '/' ? 'index' : normalUrl) + '.html';
        var filepath = path_1.join(root, config.dest.html, filename);
        res.sendFile(filepath, {}, function (err) {
            if (err) {
                if (state.value.status === config_1.StatusBuildingResponse) {
                    sdh_1.compile(building_html_1.buildingHtml)
                        .serialize()
                        .then(function (html) { return res.status(200).send(html); });
                }
                else {
                    console.log();
                    console.log(chalk_1.default.red('# Not Found::'));
                    console.log(chalk_1.default.red('# ') + req.originalUrl);
                    console.log(chalk_1.default.red('# '));
                    console.log(chalk_1.default.red('# ') + chalk_1.default.gray('tried the following paths:'));
                    console.log(chalk_1.default.red('# ') + chalk_1.default.gray(path_1.join(root, config.dest.assets, req.originalUrl.substr(config.dest.namespace.length))));
                    console.log(chalk_1.default.red('# ') + chalk_1.default.gray(filepath));
                    console.log();
                    res.sendFile(path_1.join(root, config.dest.html, fs_2._dropExt(config.src.not_found) + '.html'), {}, function (err) {
                        if (err)
                            res.status(404).send('Not Found!!');
                    });
                }
            }
        });
    });
    app.listen(config.dev.port, function () {
        console.log(chalk_1.default.greenBright('# ') + 'Serving docs on '
            + chalk_1.default.cyan("http://localhost:" + config.dev.port + config.dest.namespace));
    });
}
exports.serve = serve;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=index.js.map