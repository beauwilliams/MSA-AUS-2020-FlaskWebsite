{"version":3,"file":"override.type.js","sourceRoot":"","sources":["../../../src/config/override.type.ts"],"names":[],"mappings":"","sourcesContent":["import { MetaOptions } from '../components/page/meta';\nimport { FontsOptions } from '../components/page/fonts';\nimport { CodedocTheme } from '../theme';\n\nimport { PostProcessor } from './post-processor.type';\nimport { SourceConfig } from './source.type';\nimport { DestConfig } from './dest.type';\nimport { BundleConfig } from './bundle.type';\nimport { TitleConfig } from './title.type';\nimport { MarkdownConfig } from './markdown.type';\nimport { DevConfig } from './dev.type';\nimport { GithubConfig, GitterConfig } from './misc.type';\nimport { CodedocConfig } from './config.type';\nimport { AfterBuild } from './after-build.type';\n\n/**\n *\n * An object denoting overrides for the default codedoc configuration.\n *\n */\nexport interface ConfigOverride {\n  /**\n   *\n   * Configuration of source files, i.e. markdown files of the docs.\n   *\n   */\n  src?: Partial<SourceConfig>;\n\n  /**\n   *\n   * Configuration of destination files, i.e. where codedoc should export\n   * all generated stuff to.\n   *\n   */\n  dest?: Partial<DestConfig>;\n\n  /**\n   *\n   * Configuration of the client-side bundle.\n   *\n   */\n  bundle?: Partial<BundleConfig>;\n\n  /**\n   *\n   * Development configuration.\n   *\n   */\n  dev?: Partial<DevConfig>;\n\n  /**\n   *\n   * Configuration of generated pages.\n   *\n   */\n  page?: {\n    /**\n     *\n     * Configuration of the title of each page.\n     *\n     */\n    title?: Partial<TitleConfig<CodedocConfig>>;\n\n    /**\n     *\n     * The URL for the favicon of pages. For a standard GitHub pages setup,\n     * you can simply put your favicon in the root folder of your project\n     * (i.e. `favicon.ico`) and set this to `\"/favicon.ico\"`.\n     *\n     */\n    favicon?: string;\n\n    /**\n     *\n     * Meta information for each page.\n     *\n     */\n    meta?: MetaOptions;\n\n    /**\n     *\n     * Configuration of fonts used in each page.\n     *\n     */\n    fonts?: FontsOptions;\n\n    /**\n     *\n     * A list of external script elements to be loaded.\n     *\n     */\n    scripts?: HTMLElement[];\n\n    /**\n     *\n     * A list of external stylesheet elements (link elements) to be loaded.\n     *\n     */\n    stylesheets?: HTMLElement[];\n\n    /**\n     *\n     * A list of post processor functions to post-process each page.\n     *\n     */\n    post?: PostProcessor<CodedocConfig>[];\n  }\n\n  /**\n   *\n   * The theme used for generating the docs.\n   *\n   */\n  theme?: CodedocTheme;\n\n  /**\n   *\n   * Markdown options used to turn markdown into HTML.\n   * \n   * **WARNING**: A lot of functionality of codedoc is based on its markdown components,\n   * so be careful when you override this value. It is highly recommended to simply\n   * extend the default value, i.e.\n   *\n   * ```ts\n   * import { configuration, DefaultConfig } from '@codedoc/core';\n   * \n   * const config = configuration({\n   *   markdown: {\n   *     ...DefaultConfig.markdown,\n   *     Heading: MyCustomHeading,\n   *   }\n   * });\n   * ```\n   *\n   */\n  markdown?: Partial<MarkdownConfig>;\n\n  /**\n   *\n   * Markdown options used for parsing the table of contents markdown file.\n   * \n   * **WARNING**: A lot of functionality of codedoc is based on its markdown components,\n   * so be careful when you override this value. It is highly recommended to simply\n   * extend the default value, i.e.\n   *\n   * ```ts\n   * import { configuration, DefaultConfig } from '@codedoc/core';\n   * \n   * const config = configuration({\n   *   tocMarkdown: {\n   *     ...DefaultConfig.tocMarkdown,\n   *     Heading: MyCustomHeading,\n   *   }\n   * });\n   * ```\n   *\n   */\n  tocMarkdown?: Partial<MarkdownConfig>;\n\n  /**\n   *\n   * Functions to be called after each build.\n   *\n   */\n  afterBuild?: AfterBuild<CodedocConfig>[];\n\n  /**\n   *\n   * Miscellaneous configuration.\n   *\n   */\n  misc?: {\n    /**\n     *\n     * Configuration for GitHub integration. Providing this will by default\n     * result in a link to your repo in the footer and a GitHub button in the header,\n     * in addition to a ToC-search that would automatically search in the docs\n     * via GitHub search API.\n     *\n     */\n    github?: GithubConfig;\n\n    /**\n     *\n     * Configuration for Gitter integration. Providing this by default\n     * will result in automatic integration of Gitter chat on your documentation\n     * page with a link for activating the chat in the footer.\n     *\n     */\n    gitter?: GitterConfig;\n    [whatevs: string]: any;\n  }\n}\n"]}