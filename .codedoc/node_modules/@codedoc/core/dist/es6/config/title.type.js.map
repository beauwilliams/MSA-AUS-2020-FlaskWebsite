{"version":3,"file":"title.type.js","sourceRoot":"","sources":["../../../src/config/title.type.ts"],"names":[],"mappings":"","sourcesContent":["import { File } from 'rxline/fs';\n\n\n/**\n *\n * Denotes the configuration for title pages of the docs.\n *\n */\nexport interface TitleConfig<ConfType> {\n  /**\n   *\n   * Represents the base title, which is prefixed to title of all pages.\n   *\n   */\n  base: string;\n\n  /**\n   *\n   * Represents the connector string, which is used to join `base` with page specific titles.\n   * For example, if your `base` title is `My Awesome Project`, `connector` is ` > ` and\n   * specific title of a particular page is `Stuff`, then the final title of that page would be\n   * `My Awesome Project > Stuff`.\n   *\n   * Default is ` | `.\n   *\n   */\n  connector: string;\n\n  /**\n   *\n   * The function to determine the specific title of a page. Given function should return\n   * the page-specific title as a string. This string is then attached to `base` using\n   * the `connector` argument, to create the final title of any given page.\n   * \n   * The function will be provided with the following arguments,\n   * in specified order:\n   *\n   * - `content: HTMLElement` : the HTML tree of the page\n   * - `config: CodedocConfig`: codedoc configuration\n   * - `file: File<string>`   : the original markdown file from which the content was extracted\n   *\n   * Argument `file` is of type `rxline/fs.File`, which means it contains a `path` property and a `content`\n   * property.\n   *\n   * By default, `guessTitle()` function is used, which would assume the first heading in the HTML tree\n   * to contain the page specific title.\n   *\n   */\n  extractor: (content: HTMLElement, config: ConfType, file: File<string>) => string;\n}\n"]}