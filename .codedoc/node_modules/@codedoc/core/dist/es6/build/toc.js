var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import chalk from 'chalk';
import { join } from 'path';
import { readFile } from 'rxline/fs';
export function loadToC(config) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const tocFile = yield readFile()(join(config.src.base, config.src.toc));
            return tocFile.content;
        }
        catch (err) {
            console.log(chalk.yellowBright('# Warning:: ToC file could not be loaded.'));
            console.log(chalk.yellowBright('# ') + chalk.gray(join(config.src.base, config.src.toc)));
            console.log(chalk.yellowBright('# ') + err);
            return '';
        }
    });
}
//# sourceMappingURL=toc.js.map