{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/build/index.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { join } from 'path';\nimport { Configuration } from 'webpack';\nimport { sequentially, handleError, Function } from 'rxline';\nimport { readFile, mapExt, mapRoot, File } from 'rxline/fs';\nimport { post, save, Compiled } from '@connectv/sdh';\nimport { TransportedFunc } from '@connectv/sdh/dist/es6/dynamic/transport/index';\n\nimport { CodedocConfig } from '../config';\nimport { files } from './files';\nimport { initJss } from '../transport/setup-jss';\nimport { bundle } from './bundle';\nimport { ContentBuilder, BuildAssets } from './types';\nimport { content } from './content';\nimport { styles } from './styles';\nimport { loadToC } from './toc';\nimport { namespace } from './namespace';\nimport { pageSpecificMeta } from '../components/page/meta-override/post';\n\n\nexport async function build(\n  config: CodedocConfig,\n  builder: ContentBuilder,\n  themeInstaller: TransportedFunc<void>,\n  webpackConfig?: Configuration,\n): Promise<BuildAssets> {\n  initJss();\n\n  const _bundle = bundle(config, themeInstaller);\n  const _styles = styles(config);\n\n  const _toc = await loadToC(config);\n  const source = files(config);\n\n  return new Promise((resolve, reject) => {\n    source\n      .peek(file => console.log(`${chalk.gray('# building ........ ' + join(file.root, file.path)) }`))\n      .pipe(\n        readFile(),\n        content(builder, _toc, config, _styles),\n        post(_bundle.collect()),\n        post(namespace(config)),\n        post(pageSpecificMeta),\n        (file: File<Compiled>) => {\n          (config.page.post || []).forEach(p => file.content.post(html => p(html, file, config)));\n          return file;\n        },\n        mapExt<Compiled>(() => '.html'),\n        mapRoot(() => config.dest.html),\n        save(),\n      )\n      .pipe(\n        handleError((err, file, rethrow) => {\n          rethrow(new Error(chalk`{redBright # ERROR} in {underline ${file.path}}\\n${err?.message || err}`));\n        }) as any as Function<File<any>, File<any>>,\n      )\n      .peek(file => console.log(`${chalk.green('#')}${chalk.gray(' built:: .........')} ${join(file.root, file.path)}`))\n      .process()\n      .collect(sequentially, async (built) => {\n        console.log(`${chalk.gray('# building ........ ' + _styles.path)}`);\n        await _styles.save();\n        console.log(`${chalk.green('#')} ${chalk.gray('built:: .........')} ${_styles.path}`)\n\n        console.log(`${chalk.gray('# building ........ ' + _bundle.path)}`);\n        await save(_bundle, webpackConfig);\n        _bundle.repack = false;\n        console.log(`${chalk.green('#')} ${chalk.gray('built:: .........')} ${_bundle.path}`);\n\n        if (config.afterBuild) {\n          console.log(chalk.gray('# running after build hooks ...'));\n          for (let hook of config.afterBuild) {\n            console.log(chalk.gray('# running ......... ' + hook.name + '()'));\n            await hook({ config, built, source, partial: false });\n            console.log(`${chalk.green('#')} ${chalk.gray('finished:: ......')} ${hook.name}()`);\n          }\n        }\n\n        resolve({ bundle: _bundle, styles: _styles, toc: _toc });\n      }, reject);\n  });\n}\n"]}