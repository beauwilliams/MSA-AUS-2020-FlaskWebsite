var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { marked } from '@connectv/marked';
import { build } from '@connectv/sdh';
import { ConfigTransport$ } from '../transport/config';
export function content(builder, toc, config, ...plugins) {
    return build((md, renderer, file) => __awaiter(this, void 0, void 0, function* () {
        const res = yield builder(marked(md, config.markdown)(renderer), marked(toc, config.tocMarkdown)(renderer), renderer, file);
        const transportConf = {
            namespace: config.dest.namespace
        };
        if (res instanceof HTMLHtmlElement && res.lastChild)
            renderer.render(renderer.create(ConfigTransport$, Object.assign({}, transportConf))).on(res.lastChild);
        else
            renderer.render(renderer.create(ConfigTransport$, Object.assign({}, transportConf))).on(res);
        return res;
    }), ...plugins);
}
//# sourceMappingURL=content.js.map