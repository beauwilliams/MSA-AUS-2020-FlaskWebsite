{"version":3,"file":"rebuild.js","sourceRoot":"","sources":["../../../src/build/rebuild.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,OAAO,EAAc,YAAY,EAAE,WAAW,EAAY,MAAM,QAAQ,CAAC;AACzE,OAAO,EAAQ,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAC5D,OAAO,EAAE,IAAI,EAAY,IAAI,EAAE,MAAM,eAAe,CAAC;AAIrD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;AAIzE,MAAM,UAAU,OAAO,CACrB,KAAkC,EAClC,MAAqB,EACrB,OAAuB,EACvB,MAAmB,EACnB,aAA6B;IAE7B,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAE1D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,KAAK;aACJ,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAE,EAAE,CAAC,CAAC;aAClG,IAAI,CACH,QAAQ,EAAE,EACV,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,EACnD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAC7B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EACvB,IAAI,CAAC,gBAAgB,CAAC,EACtB,CAAC,IAAoB,EAAE,EAAE;YACvB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxF,OAAO,IAAI,CAAC;QACd,CAAC,EACD,MAAM,CAAW,GAAG,EAAE,CAAC,OAAO,CAAC,EAC/B,OAAO,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAC/B,IAAI,EAAE,CACP;aACA,IAAI,CACH,WAAW,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;YACjC,OAAO,CAAC,IAAI,KAAK,CAAC,KAAK,CAAA,qCAAqC,IAAI,CAAC,IAAI,MAAM,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,KAAI,GAAG,EAAE,CAAC,CAAC,CAAC;QACrG,CAAC,CAA0C,CAC5C;aACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACnH,OAAO,EAAE;aACT,OAAO,CAAC,YAAY,EAAE,CAAO,KAAK,EAAE,EAAE;YACrC,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,SAAS,EAAE;gBACzD,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC5E,MAAM,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;aAC9F;YAED,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;gBACxB,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC5E,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;gBACzC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;aAC/F;YAED,IAAI,MAAM,CAAC,UAAU,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC,CAAC;gBAC3D,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,UAAU,EAAE;oBAClC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;oBACnE,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC5D,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;iBACtF;aACF;YAED,OAAO,CAAC,MAAM,CAAC,CAAC;QAClB,CAAC,CAAA,EAAE,MAAM,CAAC,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import chalk from 'chalk';\nimport { join } from 'path';\nimport { Configuration } from 'webpack';\nimport { SimpleLine, sequentially, handleError, Function } from 'rxline';\nimport { File, readFile, mapExt, mapRoot } from 'rxline/fs';\nimport { post, Compiled, save } from '@connectv/sdh';\n\nimport { CodedocConfig } from '../config';\nimport { ContentBuilder, BuildAssets } from './types';\nimport { content } from './content';\nimport { namespace } from './namespace';\nimport { pageSpecificMeta } from '../components/page/meta-override/post';\n\n\n\nexport function rebuild(\n  files: SimpleLine<File<undefined>>,\n  config: CodedocConfig,\n  builder: ContentBuilder,\n  assets: BuildAssets,\n  webpackConfig?: Configuration,\n): Promise<BuildAssets> {\n  const _ogstyles = assets.styles.theme.registry.toString();\n\n  return new Promise((resolve, reject) => {\n    files\n    .peek(file => console.log(`${chalk.gray('# rebuilding ........ ' + join(file.root, file.path)) }`))\n    .pipe(\n      readFile(),\n      content(builder, assets.toc, config, assets.styles),\n      post(assets.bundle.collect()),\n      post(namespace(config)),\n      post(pageSpecificMeta),\n      (file: File<Compiled>) => {\n        (config.page.post || []).forEach(p => file.content.post(html => p(html, file, config)));\n        return file;\n      },\n      mapExt<Compiled>(() => '.html'),\n      mapRoot(() => config.dest.html),\n      save(),\n    )\n    .pipe(\n      handleError((err, file, rethrow) => {\n        rethrow(new Error(chalk`{redBright # ERROR} in {underline ${file.path}}\\n${err?.message || err}`));\n      }) as any as Function<File<any>, File<any>>,\n    )\n    .peek(file => console.log(`${chalk.green('#')}${chalk.gray(' rebuilt:: .........')} ${join(file.root, file.path)}`))\n    .process()\n    .collect(sequentially, async (built) => {\n      if (assets.styles.theme.registry.toString() !== _ogstyles) {\n        console.log(`${chalk.gray('# rebuilding ........ ' + assets.styles.path)}`);\n        await assets.styles.save();\n        console.log(`${chalk.green('#')} ${chalk.gray('rebuilt:: .........')} ${assets.styles.path}`)\n      }\n\n      if (assets.bundle.repack) {\n        console.log(`${chalk.gray('# rebuilding ........ ' + assets.bundle.path)}`);\n        await save(assets.bundle, webpackConfig);\n        assets.bundle.repack = false;\n        console.log(`${chalk.green('#')} ${chalk.gray('rebuilt:: .........')} ${assets.bundle.path}`);\n      }\n\n      if (config.afterBuild) {\n        console.log(chalk.gray('# running after build hooks ...'));\n        for (let hook of config.afterBuild) {\n          console.log(chalk.gray('# running ......... ' + hook.name + '()'));\n          await hook({ config, built, source: files, partial: true });\n          console.log(`${chalk.green('#')} ${chalk.gray('finished:: ......')} ${hook.name}()`);\n        }\n      }\n\n      resolve(assets);\n    }, reject);\n  });\n}\n"]}