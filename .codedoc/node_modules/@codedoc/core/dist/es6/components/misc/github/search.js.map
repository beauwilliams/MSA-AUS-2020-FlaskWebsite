{"version":3,"file":"search.js","sourceRoot":"","sources":["../../../../../src/components/misc/github/search.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ajax } from 'rxjs/ajax';\nimport { Subject, of, zip } from 'rxjs';\nimport { switchMap, map, catchError, tap, share } from 'rxjs/operators';\nimport { RendererLike, ComponentThis } from '@connectv/html';\nimport { transport } from '@connectv/sdh/transport';\nimport { ToCSearchBtn } from '../../page/toc/search/button';\n\n\nexport interface SearchOptions {\n  repo: string;\n  user: string;\n  root: string;\n  pick: string;\n  drop: string;\n  label?: string;\n}\n\n\ninterface HotGithubResponse {\n  items: {\n    path: string\n  }[];\n}\n\ninterface CachedGithubResponse {\n  result: string[]\n}\n\nfunction isCached(res: HotGithubResponse | CachedGithubResponse): res is CachedGithubResponse {\n  return (res as any).result !== undefined;\n}\n\n\nexport function GithubSearch(this: ComponentThis, options: SearchOptions, renderer: RendererLike<any, any>) {\n  const query = new Subject<string>();\n  const pick = new RegExp(options.pick);\n  const drop = new RegExp(options.drop);\n  const cache: {[q: string]: string[]} = {};\n\n  const results = query.pipe(\n    switchMap(q =>\n      (q in cache) ? of({ result: cache[q] }) :     // --> respond from cache if query in cache\n      ajax.getJSON<HotGithubResponse>(\n        `https://api.github.com/search/code?q=${encodeURIComponent(q)}`\n        + `+in:file`                                // --> search in files\n        + `+path:${options.root}`                   // --> search in root directory\n        + `+extension:md`                           // --> search in `.md` files\n        + `+repo:${options.user}/${options.repo}`   // --> search in given repo of given user\n      ).pipe(catchError(() => of(undefined)))       // --> no sweat in case of error\n    ),\n    map(res => \n      res ?\n      ( isCached(res) ? res.result :                // --> if cached result, no need to process\n        res.items\n          .map(item => item.path)\n          .filter(x => pick.test(x))                // --> check if it should be picked\n          .filter(x => !drop.test(x))               // --> check if it shouldn't be dropped\n          .map(x => x.substr(0, x.length - 3))      // --> remove the extension `.md`\n          .map(x => x.substr(options.root.length))  // --> remove the root path part\n          .map(x => x === '/index' ? '/' : x)       // --> turn `/index` to `/`\n      ): []\n    ),\n    share(),\n  );\n\n  zip(query, results).pipe(                         // --> for pairs of query and result...\n    tap(([query, results]) => {\n      if (results.length > 0)                       // --> ...if the result is valid...\n        cache[query] = results;                     // --> ...cache it.\n    })\n  ).subscribe();\n\n  return <ToCSearchBtn label={options.label} query={query} results={results}/>;\n}\n\n\nexport const GithubSearch$ = /*#__PURE__*/transport(GithubSearch);\n"]}