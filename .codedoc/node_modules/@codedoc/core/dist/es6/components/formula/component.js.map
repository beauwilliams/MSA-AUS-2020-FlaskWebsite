{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../src/components/formula/component.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC;AAKvC,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AASvC,MAAM,UAAU,OAAO,CAErB,OAAuB,EACvB,QAAgC,EAChC,OAAY;IAEZ,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAEjD,MAAM,MAAM,GAAG,6BAAM,OAAO,CAAO,CAAC;IACpC,MAAM,MAAM,GAAG,yBAAK,KAAK,EAAE,OAAO,CAAC,OAAO;cACtC,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE;cAC3D,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAA,CAAC,CAAC,EAAE,EAAE,GACtD,CAAC;IAEJ,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACzC,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,KAAK,YAAY,cAAc,IAAI,KAAK,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE;YAC5E,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACpD,OAAO,IAAI,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;SACJ;;YACI,OAAO,GAAG,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;QAEvC,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,yCAAmB,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,EAC3C,UAAU,EAAE,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC;QACzD,QAAQ,CAAC,MAAM,CAAC,0BAAM,KAAK,EAAC,SAAS,IAAE,KAAK,GAAG,CAAC,CAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QACpE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { renderToString } from 'katex';\nimport { RendererLike } from '@connectv/html';\nimport { ThemedComponentThis } from '@connectv/jss-theme';\n\nimport { CodedocTheme } from '../../theme';\nimport { FormulaStyle } from './style';\n\n\nexport interface FormulaOptions {\n  size?: 'normal' | 'large';\n  align?: 'left' | 'center';\n}\n\n\nexport function Formula(\n  this: ThemedComponentThis<CodedocTheme>,\n  options: FormulaOptions,\n  renderer: RendererLike<any, any>,\n  content: any\n) {\n  const classes = this.theme.classes(FormulaStyle);\n\n  const marker = <div>{content}</div>;\n  const holder = <div class={classes.formula\n    + ` ${options && options.align === 'center' ? 'center' : ''}`\n    + ` ${options && options.size === 'large' ? 'big': ''}`\n  }/>;\n\n  marker.childNodes.forEach((child, index) => {\n    let formula = '';\n    if (child instanceof HTMLPreElement && child.querySelector('[data-content]')) {\n      child.querySelectorAll('[data-content]').forEach(l$ => {\n        formula += l$.getAttribute('data-content');\n      });\n    }\n    else formula = child.textContent || '';\n\n    formula = formula.trim();\n    const line$ = <div data-formula={formula} class={classes.line}\n                      _innerHTML={renderToString(formula)}/>;\n    renderer.render(<span class=\"counter\">{index + 1}</span>).on(line$);\n    renderer.render(line$).on(holder);\n  });\n\n  return holder;\n}\n\n"]}