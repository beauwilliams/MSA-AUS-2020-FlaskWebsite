import { Subject, fromEvent } from 'rxjs';
import { mapTo } from 'rxjs/operators';
import { funcTransport, onReady } from '@connectv/sdh/transport';
import { getRenderer } from '../../../transport/renderer';
import { HintBox } from './component';
const commentRegex = new RegExp([
    /\/\/\s?\-\-\>\s*(.*[^\s])\s*$/,
    /\/\*\s?\-\-\>\s*(.*[^\s])\s*\*\/$/,
    /\#\s?\-\-\>\s*(.*[^\s])\s*$/,
    /\<\!\-\-\s?\>\s*(.*[^\s])\s*\-\-\>$/,
].map(r => `(?:${r.source})`).join('|'));
export function initHintBox() {
    onReady(() => {
        const renderer = getRenderer();
        const target = new Subject();
        renderer.render(renderer.create(HintBox, { target: target })).on(document.body);
        const _exec = () => {
            document.querySelectorAll('pre>code>div').forEach(line$ => {
                let hint = '';
                let hint$;
                line$.querySelectorAll('.token.comment').forEach(comment$ => {
                    const match = commentRegex.exec(comment$.textContent || '');
                    if (match) {
                        hint = match.slice(1).find(_ => _) || hint;
                        if (hint)
                            hint$ = comment$;
                    }
                });
                if (hint.length > 0 && hint$) {
                    hint$.style.opacity = '.5';
                    line$.setAttribute('data-hint', hint);
                    fromEvent(line$, 'mouseenter').pipe(mapTo(line$)).subscribe(target);
                    fromEvent(line$, 'mouseleave').pipe(mapTo(undefined)).subscribe(target);
                }
            });
        };
        _exec();
        window.addEventListener('navigation', _exec);
    });
}
export const codeLineHints$ = /*#__PURE__*/ funcTransport(initHintBox);
//# sourceMappingURL=index.js.map