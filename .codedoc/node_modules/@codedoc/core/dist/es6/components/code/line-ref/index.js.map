{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/components/code/line-ref/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAEjE,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAC1D,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAGrC,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC;IAC9B,6BAA6B;IAC7B,iCAAiC;IACjC,wBAAwB;IACxB,uCAAuC;CACxC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAGzC,MAAM,WAAW,GAAG,mBAAmB,CAAC;AAGxC,MAAM,UAAU,eAAe;IAC7B,OAAO,CAAC,GAAG,EAAE;QACX,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;QAC/B,MAAM,MAAM,GAAG,IAAI,OAAO,EAA2B,CAAC;QAEtD,QAAQ,CAAC,MAAM,CAAC,gBAAC,MAAM,IAAC,MAAM,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE7D,MAAM,KAAK,GAAG,GAAG,EAAE;YACjB,QAAQ,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACxD,IAAI,GAAG,GAAG,EAAE,CAAC;gBACb,IAAI,IAA6B,CAAC;gBAElC,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAC1D,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;oBAC5D,IAAI,KAAK,EAAE;wBACT,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;wBACzC,IAAI,GAAG;4BAAE,IAAI,GAAG,QAAuB,CAAC;qBACzC;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,EAAE;oBAC1B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACd,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACpC,IAAI,KAAK,EAAE;wBACT,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;wBAC/C,KAAK,CAAC,YAAY,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;qBACrD;;wBAEC,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;oBACtC,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAoB,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBACnF,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;iBACzE;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAA;QAED,KAAK,EAAE,CAAC;QAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,aAAa,CAAA,aAAa,CAAC,eAAe,CAAC,CAAC","sourcesContent":["import { Subject, fromEvent } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport { funcTransport, onReady } from '@connectv/sdh/transport';\n\nimport { getRenderer } from '../../../transport/renderer';\nimport { RefBox } from './component';\n\n\nconst commentRegex = new RegExp([\n  /\\/\\/\\s?\\@see\\s(.*[^\\s])\\s*$/,             // --> single line comments\n  /\\/\\*\\s?\\@see\\s(.*[^\\s])\\s*\\*\\/$/,         // --> multi line comments\n  /\\#\\@see\\s(.*[^\\s])\\s*$/,                  // --> python comments\n  /\\<\\!\\-\\-\\s?\\@see\\s(.*[^\\s])\\s*\\-\\-\\>$/,   // --> html comments\n].map(r => `(?:${r.source})`).join('|'));\n\n\nconst mdlinkRegex = /\\[(.*)\\]\\((.*)\\)$/;\n\n\nexport function initCodeLineRef() {\n  onReady(() => {\n    const renderer = getRenderer();\n    const target = new Subject<HTMLElement | undefined>();\n\n    renderer.render(<RefBox target={target}/>).on(document.body);\n\n    const _exec = () => {\n      document.querySelectorAll('pre>code>div').forEach(line$ => {\n        let ref = '';\n        let ref$: HTMLElement | undefined;\n  \n        line$.querySelectorAll('.token.comment').forEach(comment$ => {\n          const match = commentRegex.exec(comment$.textContent || '');\n          if (match) {\n            ref = match.slice(1).find(_ => _) || ref;\n            if (ref) ref$ = comment$ as HTMLElement;\n          }\n        });\n  \n        if (ref.length > 0 && ref$) {\n          ref$.remove();\n          const match = mdlinkRegex.exec(ref);\n          if (match) {\n            line$.setAttribute('data-ref', match[2] || '');\n            line$.setAttribute('data-ref-text', match[1] || '');\n          }\n          else \n            line$.setAttribute('data-ref', ref);\n          fromEvent(line$, 'mouseenter').pipe(mapTo(line$ as HTMLElement)).subscribe(target);\n          fromEvent(line$, 'mouseleave').pipe(mapTo(undefined)).subscribe(target);\n        }\n      });\n    }\n\n    _exec(); window.addEventListener('navigation', _exec);\n  });\n}\n\nexport const codeLineRef$ = /*#__PURE__*/funcTransport(initCodeLineRef);\n"]}