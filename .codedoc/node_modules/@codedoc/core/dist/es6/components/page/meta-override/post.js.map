{"version":3,"file":"post.js","sourceRoot":"","sources":["../../../../../src/components/page/meta-override/post.ts"],"names":[],"mappings":"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","sourcesContent":["import { OverrideTarget, OverrideBehavior } from './types';\n\n\nfunction overrideMeta(html: HTMLDocument, target: OverrideTarget, behavior: OverrideBehavior, override: string) {\n  let el$ = html.querySelector(`meta[name=\"${target}\"]`);\n\n  if (!el$) {\n    el$ = html.createElement('meta');\n    el$.setAttribute('name', target);\n    html.head.append(el$);\n  }\n\n\n  let content = el$.getAttribute('content') || '';\n\n  if (behavior === 'replace') content = override;\n  else {\n    if (target === 'keywords') content = [\n        ...content.split(',').map(_ => _.trim()), \n        ...override.split(',').map(_ => _.trim())\n      ].join(', ');\n    else content = [content.trim(), override.trim()].join(' ');\n  }\n\n  el$.setAttribute('content', content);\n\n}\n\n\nfunction addCanonical(html: HTMLDocument, content: string) {\n  const el$ = html.createElement('link');\n  el$.setAttribute('rel', 'canonical');\n  el$.setAttribute('href', content);\n  html.head.append(el$);\n}\n\n\nfunction addMetaWithProp(html: HTMLDocument, prop: string, content: string) {\n  const el$ = html.createElement('meta');\n  el$.setAttribute('property', prop);\n  el$.setAttribute('content', content);\n  html.head.append(el$);\n}\n\n\nexport function pageSpecificMeta(html: HTMLDocument) {\n  html.body.querySelectorAll('[data-meta-override]').forEach(override$ => {\n    const target = override$.getAttribute('data-meta-override') as OverrideTarget;\n    const behavior = (override$.getAttribute('data-meta-override-behavior') || 'replace') as OverrideBehavior;\n    const content = override$.textContent || '';\n\n    if (target === 'canonical') addCanonical(html, content);\n    else overrideMeta(html, target, behavior, content);\n  });\n\n  html.body.querySelectorAll('[data-meta-override-property]').forEach(override$ => {\n    const prop = override$.getAttribute('data-meta-override-property') || '';\n    const content= override$.textContent || '';\n\n    addMetaWithProp(html, prop, content);\n  });\n}\n"]}